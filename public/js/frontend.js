/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./public/theme/js/olerooms.js":
/*!*************************************!*\
  !*** ./public/theme/js/olerooms.js ***!
  \*************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\njQuery(function ($) {\n  $.fn.bravoAutocomplete = function (options) {\n    return this.each(function () {\n      var $this = $(this);\n      var main = $(this).closest(\".smart-search\");\n      var textLoading = options.textLoading;\n      main.append('<div class=\"bravo-autocomplete on-message\"><div class=\"list-item\"></div><div class=\"message\">' + textLoading + \"</div></div>\");\n      $(document).on(\"click.Bst\", function (event) {\n        if (main.has(event.target).length === 0 && !main.is(event.target)) {\n          main.find(\".bravo-autocomplete\").removeClass(\"show\");\n        } else {\n          if (options.dataDefault.length > 0) {\n            if (main.find(\".bravo-autocomplete\").hasClass(\"show\")) {\n              main.find(\".bravo-autocomplete\").removeClass(\"show\");\n            } else {\n              main.find(\".bravo-autocomplete\").addClass(\"show\");\n            }\n          }\n        }\n      });\n\n      if (options.dataDefault.length > 0) {\n        var items = \"\";\n\n        for (var index in options.dataDefault) {\n          var item = options.dataDefault[index];\n          items += '<div class=\"item\" data-id=\"' + item.id + '\" data-text=\"' + item.title + '\"> <i class=\"' + options.iconItem + '\"></i> ' + item.title + \" </div>\";\n        }\n\n        main.find(\".bravo-autocomplete .list-item\").html(items);\n        main.find(\".bravo-autocomplete\").removeClass(\"on-message\");\n      }\n\n      var requestTimeLimit;\n\n      if (typeof options.url != \"undefined\" && options.url) {\n        $this.keyup(function () {\n          main.find(\".bravo-autocomplete\").addClass(\"on-message\");\n          main.find(\".bravo-autocomplete .message\").html(textLoading);\n          main.find(\".child_id\").val(\"\");\n          var query = $(this).val(); // var property_type_id = $(this).data('property_type_id');\n\n          var property_type_id = $(\"input[name=property_type]\").val();\n          clearTimeout(requestTimeLimit);\n\n          if (query.length === 0) {\n            if (options.dataDefault.length > 0) {\n              var items = \"\";\n\n              for (var index in options.dataDefault) {\n                var item = options.dataDefault[index];\n                items += '<div class=\"item\" data-id=\"' + item.id + '\" data-text=\"' + item.title + '\"> <i class=\"' + options.iconItem + '\"></i> ' + item.title + \" </div>\";\n              }\n\n              main.find(\".bravo-autocomplete .list-item\").html(items);\n              main.find(\".bravo-autocomplete\").removeClass(\"on-message\");\n            } else {\n              main.find(\".bravo-autocomplete\").removeClass(\"show\");\n            }\n\n            return;\n          }\n\n          requestTimeLimit = setTimeout(function () {\n            $.ajax({\n              url: options.url,\n              data: {\n                search: query,\n                property_type_id: property_type_id\n              },\n              dataType: \"json\",\n              type: \"get\",\n              beforeSend: function beforeSend() {},\n              success: function success(res) {\n                if (res.original.status === 1) {\n                  var items = \"\";\n\n                  for (var ix in res.original.data) {\n                    var item = res.original.data[ix];\n                    items += '<div class=\"item\" data-id=\"' + item.id + '\" data-text=\"' + item.title + '\"> <i class=\"' + options.iconItem + '\"></i> ' + get_highlight(item.title, query) + \" </div>\";\n                  }\n\n                  main.find(\".bravo-autocomplete .list-item\").html(items);\n                  main.find(\".bravo-autocomplete\").removeClass(\"on-message\");\n                }\n\n                if (_typeof(res.message) === undefined) {\n                  main.find(\".bravo-autocomplete\").addClass(\"on-message\");\n                } else {\n                  main.find(\".bravo-autocomplete .message\").html(res.message);\n                }\n              }\n            });\n          }, 700);\n\n          function get_highlight(text, val) {\n            return text.replace(new RegExp(val + \"(?!([^<]+)?>)\", \"gi\"), '<span class=\"h-line\">$&</span>');\n          }\n\n          main.find(\".bravo-autocomplete\").addClass(\"show\");\n        });\n      }\n\n      main.find(\".bravo-autocomplete\").on(\"click\", \".item\", function () {\n        var id = $(this).attr(\"data-id\"),\n            text = $(this).attr(\"data-text\");\n\n        if (id.length > 0 && text.length > 0) {\n          text = text.replace(/-/g, \"\");\n          text = trimFunc(text, \" \");\n          text = trimFunc(text, \"-\");\n          main.find(\".parent_text\").val(text).trigger(\"change\");\n          var childval = main.find(\".child_id\").val();\n          main.find(\".child_id\").val(id).trigger(\"change\");\n          $(\".flat-options\").hide();\n\n          if (options.flatBhkType == \"reset\" && childval != \"\" && childval != main.find(\".child_id\").val()) {\n            var adultsHtml = $(\".flat_adult_render .adults .multi\").data(\"html\");\n            var childrenHtml = $(\".flat_adult_render .children .multi\").data(\"html\");\n            $(\".flat_adult_render .adults .multi\").html(adultsHtml.replace(\":count\", 1));\n            $(\".flat_adult_render .children .multi\").html(childrenHtml.replace(\":count\", 0));\n            $(\"#flat_adults\").val(1);\n            $(\"#flat_children\").val(0);\n          }\n        } else {\n          console.log(\"Cannot select!\");\n        }\n\n        setTimeout(function () {\n          main.find(\".bravo-autocomplete\").removeClass(\"show\");\n        }, 100);\n      });\n\n      var trimFunc = function trimFunc(s, c) {\n        if (c === \"]\") c = \"\\\\]\";\n        if (c === \"\\\\\") c = \"\\\\\\\\\";\n        return s.replace(new RegExp(\"^[\" + c + \"]+|[\" + c + \"]+$\", \"g\"), \"\");\n      };\n    });\n  };\n});\njQuery(function ($) {\n  function parseErrorMessage(e) {\n    var html = \"\";\n\n    if (e.responseJSON) {\n      if (e.responseJSON.errors) {\n        return Object.values(e.responseJSON.errors).join(\"<br>\");\n      }\n    }\n\n    return html;\n  }\n\n  $(\".g-map-place\").each(function () {\n    var map = $(this).find(\".map\").attr(\"id\");\n    var searchInput = $(this).find(\"input[name=map_place]\");\n    var latInput = $(this).find('input[name=\"map_lat\"]');\n    var lgnInput = $(this).find('input[name=\"map_lgn\"]');\n    new BravoMapEngine(map, {\n      fitBounds: true,\n      center: [51.505, -0.09],\n      ready: function ready(engineMap) {\n        engineMap.searchBox(searchInput, function (dataLatLng) {\n          latInput.attr(\"value\", dataLatLng[0]);\n          lgnInput.attr(\"value\", dataLatLng[1]);\n        });\n      }\n    });\n  });\n  $(\".bravo_fullHeight\").each(function () {\n    var height = $(document).height();\n\n    if ($(document).find(\".bravo-admin-bar\").length > 0) {\n      height = height - $(\".bravo-admin-bar\").height();\n    }\n\n    $(this).css(\"min-height\", height);\n  });\n  $(\".date-picker\").each(function () {\n    var options = {\n      singleDatePicker: true,\n      opens: bookingCore.rtl ? \"right\" : \"left\",\n      locale: {\n        format: bookingCore.date_format,\n        direction: bookingCore.rtl ? \"rtl\" : \"ltr\",\n        firstDay: daterangepickerLocale.first_day_of_week\n      }\n    };\n\n    if ((typeof daterangepickerLocale === \"undefined\" ? \"undefined\" : _typeof(daterangepickerLocale)) == \"object\") {\n      options.locale = _.merge(daterangepickerLocale, options.locale);\n    }\n\n    $(this).daterangepicker(options);\n  });\n  $(\".date-picker-dob\").each(function () {\n    var nowDate = new Date();\n    nowDate.setDate(nowDate.getDate() - 1);\n    var today = new Date(nowDate.getFullYear(), nowDate.getMonth(), nowDate.getDate(), 0, 0, 0, 0);\n    var options = {\n      singleDatePicker: true,\n      maxDate: today,\n      opens: bookingCore.rtl ? \"left\" : \"right\",\n      locale: {\n        format: bookingCore.date_format,\n        direction: bookingCore.rtl ? \"rtl\" : \"ltr\",\n        firstDay: daterangepickerLocale.first_day_of_week\n      }\n    };\n\n    if ((typeof daterangepickerLocale === \"undefined\" ? \"undefined\" : _typeof(daterangepickerLocale)) == \"object\") {\n      options.locale = _.merge(daterangepickerLocale, options.locale);\n    }\n\n    $(this).daterangepicker(options);\n    $(this).val(\"\");\n  });\n  $(\".date-picker-dob-update\").each(function () {\n    var nowDate = new Date();\n    nowDate.setDate(nowDate.getDate() - 1);\n    var today = new Date(nowDate.getFullYear(), nowDate.getMonth(), nowDate.getDate(), 0, 0, 0, 0);\n    var options = {\n      singleDatePicker: true,\n      maxDate: today,\n      showDropdowns: true,\n      minYear: 1901,\n      autoUpdateInput: false,\n      opens: bookingCore.rtl ? \"left\" : \"right\",\n      locale: {\n        format: bookingCore.date_format,\n        direction: bookingCore.rtl ? \"rtl\" : \"ltr\",\n        firstDay: daterangepickerLocale.first_day_of_week\n      }\n    };\n\n    if ((typeof daterangepickerLocale === \"undefined\" ? \"undefined\" : _typeof(daterangepickerLocale)) == \"object\") {\n      options.locale = _.merge(daterangepickerLocale, options.locale);\n    }\n\n    $(this).daterangepicker(options);\n  });\n  $(\".review-form .review-items .rates .fa\").each(function () {\n    var list = $(this).parent(),\n        listItems = list.children(),\n        itemIndex = $(this).index(),\n        parentItem = list.parent();\n    $(this).hover(function () {\n      for (var i = 0; i < listItems.length; i++) {\n        if (i <= itemIndex) {\n          $(listItems[i]).addClass(\"hovered\");\n        } else {\n          break;\n        }\n      }\n\n      $(this).click(function () {\n        for (var i = 0; i < listItems.length; i++) {\n          if (i <= itemIndex) {\n            $(listItems[i]).addClass(\"selected\");\n          } else {\n            $(listItems[i]).removeClass(\"selected\");\n          }\n        }\n\n        parentItem.children(\".review_stats\").val(itemIndex + 1);\n      });\n    }, function () {\n      listItems.removeClass(\"hovered\");\n    });\n  });\n  $(\".bravo-form-login [type=submit]\").click(function (e) {\n    e.preventDefault();\n    var form = $(this).closest(\".bravo-form-login\");\n    $.ajaxSetup({\n      headers: {\n        \"X-CSRF-TOKEN\": form.find('meta[name=\"csrf-token\"]').attr(\"content\")\n      }\n    });\n    $.ajax({\n      url: bookingCore.routes.login,\n      data: {\n        email: form.find(\"input[name=email]\").val(),\n        password: form.find(\"input[name=password]\").val(),\n        remember: form.find(\"input[name=remember]\").is(\":checked\") ? 1 : \"\",\n        \"g-recaptcha-response\": form.find(\"[name=g-recaptcha-response]\").val(),\n        redirect: form.find(\"input[name=redirect]\").val()\n      },\n      type: \"POST\",\n      beforeSend: function beforeSend() {\n        form.find(\".error\").hide();\n        form.find(\".icon-loading\").css(\"display\", \"inline-block\");\n        $(\"#loader_msg\").html(\"Please wait, Logging to your account\");\n        $(\"#loader\").show();\n      },\n      complete: function complete() {\n        $(\"#loader\").hide();\n      },\n      success: function success(data) {\n        form.find(\".icon-loading\").hide();\n\n        if (data.error === true) {\n          if (data.messages !== undefined) {\n            for (var item in data.messages) {\n              var msg = data.messages[item];\n              form.find(\".error-\" + item).show().text(msg[0]);\n            }\n          }\n\n          if (data.messages.message_error !== undefined) {\n            form.find(\".message-error\").show().html('<div class=\"alert alert-danger\">' + data.messages.message_error[0] + \"</div>\");\n          }\n        }\n\n        if (typeof data.redirect !== \"undefined\" && data.redirect) {\n          window.location.href = data.redirect;\n        }\n      }\n    });\n  });\n  $(\".bravo-form-login-mobile [type=submit]\").click(function (e) {\n    e.preventDefault();\n    var form = $(this).closest(\".bravo-form-login-mobile\");\n    $.ajaxSetup({\n      headers: {\n        \"X-CSRF-TOKEN\": form.find('meta[name=\"csrf-token\"]').attr(\"content\")\n      }\n    });\n    $.ajax({\n      url: bookingCore.routes.login_mobile,\n      data: {\n        phone: form.find(\"input[name=phone]\").val(),\n        redirect: form.find(\"input[name=redirect]\").val()\n      },\n      type: \"POST\",\n      beforeSend: function beforeSend() {\n        form.find(\".error\").hide();\n        form.find(\".icon-loading\").css(\"display\", \"inline-block\");\n        $(\"#loader_msg\").html(\"Please wait, Logging to your account\");\n        $(\"#loader\").show();\n      },\n      complete: function complete() {\n        $(\"#loader\").hide();\n      },\n      success: function success(data) {\n        form.find(\".icon-loading\").hide();\n\n        if (data.error === true) {\n          if (data.messages !== undefined) {\n            for (var item in data.messages) {\n              var msg = data.messages[item];\n              form.find(\".error-\" + item).show().text(msg[0]);\n            }\n          }\n\n          if (data.messages.message_error !== undefined) {\n            form.find(\".message-error\").show().html('<div class=\"alert alert-danger\">' + data.messages.message_error[0] + \"</div>\");\n          }\n        }\n\n        if (typeof data.redirect !== \"undefined\" && data.redirect) {\n          window.location.href = data.redirect;\n        }\n      }\n    });\n  });\n  $(\"#register\").on(\"show.bs.modal\", function (event) {\n    $(\"#login\").modal(\"hide\");\n  });\n  $(\"#login\").on(\"show.bs.modal\", function (event) {\n    $(\"#register\").modal(\"hide\");\n  });\n  $(\".bravo-more-menu\").click(function () {\n    $(this).trigger(\"bravo-trigger-menu-mobile\");\n  });\n  $(\".bravo-menu-mobile .b-close\").click(function () {\n    $(\".bravo-more-menu\").trigger(\"bravo-trigger-menu-mobile\");\n  });\n  $(document).on(\"click\", \".bravo-effect-bg\", function () {\n    $(\".bravo-more-menu\").trigger(\"bravo-trigger-menu-mobile\");\n  });\n  $(document).on(\"bravo-trigger-menu-mobile\", \".bravo-more-menu\", function () {\n    $(this).toggleClass(\"active\");\n\n    if ($(this).hasClass(\"active\")) {\n      $(\".bravo-menu-mobile\").addClass(\"active\");\n      $(\"body\").css(\"overflow\", \"hidden\").append(\"<div class='bravo-effect-bg'></div>\");\n    } else {\n      $(\".bravo-menu-mobile\").removeClass(\"active\");\n      $(\"body\").css(\"overflow\", \"initial\").find(\".bravo-effect-bg\").remove();\n    }\n  });\n  $(\".bravo-menu-mobile .g-menu ul li .fa\").click(function (e) {\n    e.preventDefault();\n    $(this).closest(\"li\").toggleClass(\"active\");\n  });\n  $(\".bravo-menu-mobile\").each(function () {\n    var h_profile = $(this).find(\".user-profile\").height();\n    var h1_main = $(window).height();\n    $(this).find(\".g-menu\").css(\"max-height\", h1_main - h_profile - 15);\n  });\n  $(\".bravo-more-menu-user\").click(function () {\n    $(\".bravo_user_profile > .container-fluid > .row > .col-md-3\").addClass(\"active\");\n    $(\"body\").css(\"overflow\", \"hidden\").append(\"<div class='bravo-effect-user-bg'></div>\");\n  });\n  $(document).on(\"click\", \".bravo-effect-user-bg,.bravo-close-menu-user\", function () {\n    $(\".bravo_user_profile > .container-fluid > .row > .col-md-3\").removeClass(\"active\");\n    $(\"body\").css(\"overflow\", \"initial\").find(\".bravo-effect-user-bg\").remove();\n  });\n  $('[data-toggle=\"tooltip\"]').tooltip();\n  $(\".dropdown-toggle\").dropdown();\n  $(\".select-guests-dropdown .dropdown-item-row\").click(function (e) {\n    e.stopPropagation();\n  });\n  $(\".select-seat-type-dropdown .btn-minus\").on(\"click\", function (e) {\n    e.stopPropagation();\n    var parent = $(this).closest(\".form-select-seat-type\");\n    var inputAttr = $(this).data(\"input-attr\");\n\n    if (typeof inputAttr == \"undefined\") {\n      inputAttr = \"name\";\n    }\n\n    var input = parent.find(\".select-seat-type-dropdown [\" + inputAttr + \"=\" + $(this).data(\"input\") + \"]\");\n    var min = parseInt(input.attr(\"min\"));\n    var old = parseInt(input.val());\n\n    if (old <= min) {\n      return;\n    }\n\n    input.val(old - 1);\n    updateCustomSelectDropdown(input);\n  });\n  $(\".select-seat-type-dropdown .btn-add\").on(\"click\", function (e) {\n    e.stopPropagation();\n    var parent = $(this).closest(\".form-select-seat-type\");\n    var inputAttr = $(this).data(\"input-attr\");\n\n    if (typeof inputAttr == \"undefined\") {\n      inputAttr = \"name\";\n    }\n\n    var input = parent.find(\".select-seat-type-dropdown [\" + inputAttr + \"=\" + $(this).data(\"input\") + \"]\");\n    var max = parseInt(input.attr(\"max\"));\n    var old = parseInt(input.val());\n\n    if (old >= max) {\n      return;\n    }\n\n    input.val(old + 1);\n    updateCustomSelectDropdown(input);\n  });\n  $(\".select-seat-type-dropdown input\").on(\"keyup\", function (e) {\n    updateCustomSelectDropdown($(this));\n  });\n  $(\".select-seat-type-dropdown input\").on(\"change\", function (e) {\n    updateCustomSelectDropdown($(this));\n  });\n\n  function updateCustomSelectDropdown(input) {\n    var parent = input.closest(\".form-select-seat-type\");\n    var target = input.attr(\"id\");\n    var number = parseInt(input.val());\n    var render = parent.find(\"[id=\" + target + \"_render]\");\n    var htmlString = render.find(\".multi\").data(\"html\");\n    var min = input.attr(\"min\"); //console.log(render)\n\n    if (number > min) {\n      render.find(\".multi\").removeClass(\"d-none\").html(htmlString.replace(\":count\", number));\n      render.find(\".one\").addClass(\"d-none\");\n    } else {\n      render.find(\".multi\").addClass(\"d-none\");\n      render.find(\".one\").removeClass(\"d-none\");\n    }\n  }\n\n  $(\".select-seat-type-dropdown .dropdown-item-row\").on(\"click\", function (e) {\n    e.stopPropagation();\n  });\n  $(\".smart-search .smart-search-occupancy\").each(function () {\n    var $this = $(this);\n    var string_list = $this.attr(\"data-default\");\n    var default_list = [];\n\n    if (string_list.length > 0) {\n      default_list = JSON.parse(string_list);\n    }\n\n    var options = {\n      dataDefault: default_list,\n      iconItem: \"\",\n      textLoading: $this.attr(\"data-onLoad\")\n    };\n    $this.bravoAutocomplete(options);\n  });\n  $(\".smart-search .smart-search-flatbhk\").each(function () {\n    var $this = $(this);\n    var string_list = $this.attr(\"data-default\");\n    var default_list = [];\n\n    if (string_list.length > 0) {\n      default_list = JSON.parse(string_list);\n    }\n\n    var options = {\n      flatBhkType: \"reset\",\n      dataDefault: default_list,\n      iconItem: \"\",\n      textLoading: $this.attr(\"data-onLoad\")\n    };\n    $this.bravoAutocomplete(options);\n  }); //Using in olerooms\n\n  $(\".smart-search .autocomplete-search\").each(function () {\n    var $this = $(this);\n    var string_list = $(this).attr(\"data-default\");\n    var default_list = [];\n\n    if (string_list.length > 0) {\n      default_list = JSON.parse(string_list);\n    }\n\n    var options = {\n      url: $(\"#auto_com_search_div\").data(\"searchroute\"),\n      dataDefault: default_list,\n      textLoading: $this.attr(\"data-onLoad\"),\n      iconItem: \"icofont-location-pin\"\n    };\n    $this.bravoAutocomplete(options);\n  }); //Using in olerooms\n\n  $(\".smart-search .smart-search-city\").each(function () {\n    var $this = $(this);\n    var string_list = $(this).attr(\"data-default\");\n    var default_list = [];\n\n    if (string_list.length > 0) {\n      default_list = JSON.parse(string_list);\n    }\n\n    var options = {\n      url: bookingCore.url + \"/location/search/searchForSelect2\",\n      dataDefault: default_list,\n      textLoading: $this.attr(\"data-onLoad\"),\n      iconItem: \"icofont-location-pin\"\n    };\n    $this.bravoAutocomplete(options);\n  });\n  $(document).on(\"click\", \".service-wishlist\", function () {\n    var $this = $(this);\n    var isPaginateRUn = document.getElementsByClassName(\"paginate-run\");\n    $.ajax({\n      url: bookingCore.url + \"customer/wishlist\",\n      data: {\n        object_id: $this.attr(\"data-id\"),\n        object_model: $this.attr(\"data-type\")\n      },\n      dataType: \"json\",\n      type: \"POST\",\n      beforeSend: function beforeSend() {\n        if (isPaginateRUn.length > 0) {\n          $(\".ajaxloader\").show();\n        }\n\n        $this.addClass(\"loading\");\n      },\n      success: function success(res) {\n        if (res[\"type\"] == \"error\") {\n          Lobibox.notify(\"error\", {\n            position: \"top right\",\n            msg: res[\"message\"]\n          });\n        } else {\n          $this.removeClass(\"active loading\");\n          $this.addClass(res[\"class\"]);\n          var isPaginateRUn = document.getElementsByClassName(\"paginate-run\");\n\n          if (isPaginateRUn.length > 0) {\n            paginate();\n          }\n        }\n      },\n      error: function error(e) {\n        if (e.status === 401) {\n          Lobibox.notify(\"error\", {\n            position: \"top right\",\n            msg: \"Please login as customer to perform this action\"\n          });\n        }\n      }\n    });\n  });\n  $(\".bravo-video-popup\").click(function () {\n    var video_url = $(this).data(\"src\");\n    var target = $(this).data(\"target\");\n    $(target).find(\".bravo_embed_video\").attr(\"src\", video_url + \"?autoplay=0&amp;modestbranding=1&amp;showinfo=0\");\n    $(target).on(\"hidden.bs.modal\", function () {\n      $(target).find(\".bravo_embed_video\").attr(\"src\", \"\");\n    });\n  });\n  var onSubmitContact = false;\n  $(\".bravo-contact-block-form\").submit(function (e) {\n    e.preventDefault();\n    if (onSubmitContact) return;\n    $(this).addClass(\"loading\");\n    var me = $(this);\n    me.find(\".form-mess\").html(\"\");\n    $.ajax({\n      url: me.attr(\"action\"),\n      type: \"post\",\n      data: $(this).serialize(),\n      dataType: \"json\",\n      success: function success(json) {\n        onSubmitContact = false;\n        me.removeClass(\"loading\");\n\n        if (json.message) {\n          me.find(\".form-mess\").html('<span class=\"' + (json.status ? \"text-success\" : \"text-danger\") + '\">' + json.message + \"</span>\");\n        }\n\n        if (json.status) {\n          me.find(\"input\").val(\"\");\n          me.find(\"textarea\").val(\"\");\n        }\n      },\n      error: function error(e) {\n        console.log(e);\n        onSubmitContact = false;\n        me.removeClass(\"loading\");\n\n        if (parseErrorMessage(e)) {\n          me.find(\".form-mess\").html('<span class=\"text-danger\">' + parseErrorMessage(e) + \"</span>\");\n        } else if (e.responseText) {\n          me.find(\".form-mess\").html('<span class=\"text-danger\">' + e.responseText + \"</span>\");\n        }\n      }\n    });\n    return false;\n  });\n});\njQuery(function ($) {\n  var notificationsWrapper = $(\".dropdown-notifications\");\n  var notificationsToggle = notificationsWrapper.find(\"a[data-toggle]\");\n  var notificationsCountElem = notificationsToggle.find(\".notification-icon\");\n  var notificationsCount = parseInt(notificationsCountElem.html());\n  var notifications = notificationsWrapper.find(\"ul.dropdown-list-items\");\n\n  if (bookingCore.pusher_api_key && bookingCore.pusher_cluster) {\n    var pusher = new Pusher(bookingCore.pusher_api_key, {\n      encrypted: true,\n      cluster: bookingCore.pusher_cluster\n    });\n  }\n\n  $(document).on(\"click\", \".markAsRead\", function (e) {\n    e.stopPropagation();\n    e.preventDefault();\n    var id = $(this).data(\"id\");\n    var url = $(this).attr(\"href\");\n    $.ajax({\n      url: bookingCore.markAsRead,\n      data: {\n        id: id\n      },\n      method: \"post\",\n      success: function success(res) {\n        window.location.href = url;\n      }\n    });\n  });\n  $(document).on(\"click\", \".markAllAsRead\", function (e) {\n    e.stopPropagation();\n    e.preventDefault();\n    $.ajax({\n      url: bookingCore.markAllAsRead,\n      method: \"post\",\n      success: function success(res) {\n        $(\".dropdown-notifications\").find(\"li.notification\").removeClass(\"active\");\n        notificationsCountElem.text(0);\n        notificationsWrapper.find(\".notif-count\").text(0);\n      }\n    });\n  });\n\n  var callback = function callback(data) {\n    var existingNotifications = notifications.html();\n    var newNotificationHtml = '<li class=\"notification active\">' + '<div class=\"media\">' + '   <a class=\"markAsRead p-0\" data-id=\"' + data.idNotification + '\" href=\"' + data.link + '\">' + '    <div class=\"media-left\">' + '      <div class=\"media-object\">' + data.avatar + \"      </div>\" + \"    </div>\" + '    <div class=\"media-body\">' + \"      \" + data.message + \"\" + '      <div class=\"notification-meta\">' + '        <small class=\"timestamp\">about a few seconds ago</small>' + \"      </div>\" + \"    </div>\" + \"  </a>\" + \"</div>\" + \"</li>\";\n    notifications.html(newNotificationHtml + existingNotifications);\n    notificationsCount += 1;\n    notificationsCountElem.text(notificationsCount);\n    notificationsWrapper.find(\".notif-count\").text(notificationsCount);\n  };\n\n  if (bookingCore.isAdmin > 0 && bookingCore.pusher_api_key) {\n    var channel = pusher.subscribe(\"admin-channel\");\n    channel.bind(\"App\\\\Events\\\\PusherNotificationAdminEvent\", callback);\n  }\n\n  if (bookingCore.currentUser > 0 && bookingCore.pusher_api_key) {\n    var channelPrivate = pusher.subscribe(\"user-channel-\" + bookingCore.currentUser);\n    channelPrivate.bind(\"App\\\\Events\\\\PusherNotificationPrivateEvent\", callback);\n  }\n}); //added by designer\n\n$(\".searchproperty_btn \").click(function () {\n  // $(\"#searchinner_menu\").toggleClass(\"show\");\n  // $(\"#searchinner_menu\").toggleClass(\"hide\");\n  if ($(\"#searchinner_menu\").hasClass(\"show\")) {\n    $(\"#searchinner_menu\").removeClass(\"show\");\n    $(\"#searchinner_menu\").addClass(\"hide\");\n  } else {\n    $(\"#searchinner_menu\").addClass(\"show\");\n    $(\"#searchinner_menu\").removeClass(\"hide\");\n  }\n});\n$(\".g-button-submit .btn\").click(function () {\n  $(\"#searchinner_menu\").addClass(\"hide\");\n  $(\"#searchinner_menu\").removeClass(\"show\");\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/theme/js/olerooms.js\n");

/***/ }),

/***/ "./resources/js/frontend.js":
/*!**********************************!*\
  !*** ./resources/js/frontend.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("//DatePair\n__webpack_require__(/*! ../../node_modules/jquery/dist/jquery.min.js */ \"./node_modules/jquery/dist/jquery.min.js\");\n\n__webpack_require__(/*! ../../node_modules/jquery-timepicker/jquery.timepicker.js */ \"./node_modules/jquery-timepicker/jquery.timepicker.js\");\n\n__webpack_require__(/*! ../../node_modules/datepair.js/dist/datepair.js */ \"./node_modules/datepair.js/dist/datepair.js\");\n\n__webpack_require__(/*! ../../node_modules/datepair.js/dist/jquery.datepair.js */ \"./node_modules/datepair.js/dist/jquery.datepair.js\");\n\n__webpack_require__(/*! ../js/frontend/custom.js */ \"./resources/js/frontend/custom.js\"); //jQuery Validiations\n\n\n__webpack_require__(/*! ../js/jquery.validate.min.js */ \"./resources/js/jquery.validate.min.js\");\n\n__webpack_require__(/*! ../js/frontend/developer.js */ \"./resources/js/frontend/developer.js\");\n\n__webpack_require__(/*! ../js/frontend/filter.js */ \"./resources/js/frontend/filter.js\");\n\n__webpack_require__(/*! ../js/frontend/booking.js */ \"./resources/js/frontend/booking.js\");\n\n__webpack_require__(/*! ../js/frontend/review.js */ \"./resources/js/frontend/review.js\");\n\n__webpack_require__(/*! ../../public/theme/js/olerooms.js */ \"./public/theme/js/olerooms.js\");\n\n__webpack_require__(/*! ../js/frontend/booking-company.js */ \"./resources/js/frontend/booking-company.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvZnJvbnRlbmQuanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQUEsbUJBQU8sQ0FBQyw4RkFBRCxDQUFQOztBQUNBQSxtQkFBTyxDQUFDLHdIQUFELENBQVA7O0FBQ0FBLG1CQUFPLENBQUMsb0dBQUQsQ0FBUDs7QUFDQUEsbUJBQU8sQ0FBQyxrSEFBRCxDQUFQOztBQUVBQSxtQkFBTyxDQUFDLG1FQUFELENBQVAsQyxDQUNBOzs7QUFDQUEsbUJBQU8sQ0FBQywyRUFBRCxDQUFQOztBQUNBQSxtQkFBTyxDQUFDLHlFQUFELENBQVA7O0FBQ0FBLG1CQUFPLENBQUMsbUVBQUQsQ0FBUDs7QUFDQUEsbUJBQU8sQ0FBQyxxRUFBRCxDQUFQOztBQUNBQSxtQkFBTyxDQUFDLG1FQUFELENBQVA7O0FBQ0FBLG1CQUFPLENBQUMsd0VBQUQsQ0FBUDs7QUFDQUEsbUJBQU8sQ0FBQyxxRkFBRCxDQUFQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL2Zyb250ZW5kLmpzP2VhMGYiXSwic291cmNlc0NvbnRlbnQiOlsiLy9EYXRlUGFpclxyXG5yZXF1aXJlKCcuLi8uLi9ub2RlX21vZHVsZXMvanF1ZXJ5L2Rpc3QvanF1ZXJ5Lm1pbi5qcycpO1xyXG5yZXF1aXJlKCcuLi8uLi9ub2RlX21vZHVsZXMvanF1ZXJ5LXRpbWVwaWNrZXIvanF1ZXJ5LnRpbWVwaWNrZXIuanMnKTtcclxucmVxdWlyZSgnLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGVwYWlyLmpzL2Rpc3QvZGF0ZXBhaXIuanMnKTtcclxucmVxdWlyZSgnLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGVwYWlyLmpzL2Rpc3QvanF1ZXJ5LmRhdGVwYWlyLmpzJyk7XHJcblxyXG5yZXF1aXJlKCcuLi9qcy9mcm9udGVuZC9jdXN0b20uanMnKTtcclxuLy9qUXVlcnkgVmFsaWRpYXRpb25zXHJcbnJlcXVpcmUoJy4uL2pzL2pxdWVyeS52YWxpZGF0ZS5taW4uanMnKTtcclxucmVxdWlyZSgnLi4vanMvZnJvbnRlbmQvZGV2ZWxvcGVyLmpzJyk7XHJcbnJlcXVpcmUoJy4uL2pzL2Zyb250ZW5kL2ZpbHRlci5qcycpO1xyXG5yZXF1aXJlKCcuLi9qcy9mcm9udGVuZC9ib29raW5nLmpzJyk7XHJcbnJlcXVpcmUoJy4uL2pzL2Zyb250ZW5kL3Jldmlldy5qcycpO1xyXG5yZXF1aXJlKCcuLi8uLi9wdWJsaWMvdGhlbWUvanMvb2xlcm9vbXMuanMnKTtcclxucmVxdWlyZSgnLi4vanMvZnJvbnRlbmQvYm9va2luZy1jb21wYW55LmpzJyk7XHJcbiJdLCJuYW1lcyI6WyJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/frontend.js\n");

/***/ }),

/***/ "./resources/js/frontend/booking-company.js":
/*!**************************************************!*\
  !*** ./resources/js/frontend/booking-company.js ***!
  \**************************************************/
/***/ (() => {

eval("if (document.getElementById(\"searchpage\") || document.getElementById(\"property_details\") || document.getElementById(\"BookNowButtonPage\")) {\n  $(document).on('click', '.bookNowButton', function () {\n    var cusRoute = $('.customerRoute' + $(this).attr('data-id')).val();\n    var compRoute = $('.companyRoute' + $(this).attr('data-id')).val();\n    $('#customerRoute').attr('href', cusRoute).attr('data-id', $(this).attr('data-id')).attr('data-action', $(this).attr('data-action'));\n    $('#companyRoute').attr('href', compRoute).attr('data-id', $(this).attr('data-id')).attr('data-action', $(this).attr('data-action'));\n  });\n  $(document).on('click', '#scheduleNowButton', function () {\n    var cusRoute = $('.customerScheduleRoute').val();\n    var compRoute = $('.companyScheduleRoute').val();\n    $('#scheduleCustomerRoute').attr('data-url', cusRoute).attr('data-id', $(this).attr('data-id'));\n    $('#scheduleCompanyRoute').attr('data-url', compRoute).attr('data-id', $(this).attr('data-id'));\n  });\n  $(document).on('click', '.store-visit-company', function () {\n    var property_id = $(this).attr('data-id');\n    var url = $(this).attr('data-url');\n    $.ajax({\n      type: \"POST\",\n      url: url,\n      data: {\n        'property_id': property_id\n      },\n      dataType: 'json',\n      beforeSend: function beforeSend() {\n        $(\"#loader_msg\").html(_loaderMsg);\n        $(\"#loader\").show();\n      },\n      success: function success(data) {\n        $(\"#loader\").hide();\n        Lobibox.notify(data['type'], {\n          position: \"top right\",\n          msg: data['message']\n        });\n\n        if (data[\"redirect-url\"]) {\n          location.href = data[\"redirect-url\"];\n        }\n      },\n      error: function error(data) {\n        if (data.responseJSON.message == \"Unauthenticated.\") {\n          Lobibox.notify('error', {\n            position: \"top right\",\n            msg: 'Login as company to schedule visit.'\n          });\n          window.location.href = site_url + '/company/login';\n        }\n\n        $(\"#loader\").hide();\n      }\n    });\n  });\n}\n\nif (document.getElementById(\"bookingPageCompany\")) {\n  var dateDifference = function dateDifference() {\n    var start_date = $(\".check-in-input\").val();\n    var end_date = $(\".check-out-input\").val();\n    var endDate = new Date(end_date);\n    var startDate = new Date(start_date);\n    var diffTime = Math.abs(endDate - startDate);\n    var diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n\n    if (isNaN(diffDays)) {\n      diffDays = 0;\n    }\n\n    $('#daysDiff').val(diffDays);\n  };\n\n  var removeDiscount = function removeDiscount() {\n    var sendMsg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    reloadVal = 1;\n    $('#agentCompanyCode1').val('');\n    $('#agentCompanyCode').val('');\n    $('#agentCompanyCodeType').val('');\n    $('#discountAmount').val('');\n    $('.discountAmount').html(0);\n    $('#discountSucccessText').hide().removeClass('d-flex');\n    $('#discountType').val('');\n    $('#discountValue').val('');\n    $('#discountSucccessAmount').html('');\n    $(\"#AppliedCouponCode\").val('');\n    $('#offerCode').val('');\n    $('#basic-addon1').html('Apply').addClass('applyOfferButton grey').removeClass('green');\n    $('#applyCodeButton').html('Apply').removeClass('green').addClass('grey');\n\n    if (sendMsg != '') {\n      Lobibox.notify('error', {\n        position: \"top right\",\n        msg: sendMsg\n      });\n    }\n\n    calculateAmount();\n    return;\n  };\n\n  var amountType = function amountType() {\n    var payment_type = $('input:radio.paidType:checked').val();\n    var payAmount;\n\n    if (payment_type == 'partial') {\n      payAmount = $('#propertyCommissionAmount').val();\n      remainingAmount = $('#totalAmount').val() - payAmount;\n    } else {\n      payAmount = $('#finalPayableAmount').val();\n      $('.remainingAmountDiv').hide().removeClass('d-flex');\n    }\n\n    $('.finalAmountAfterSelection').html('₹' + payAmount);\n    $('#finalAmountAfterSelection').val(payAmount);\n\n    if (isCall == 0) {\n      $('#addPaymentButton').prop('disabled', true);\n      $('#pills-bookingpayment-tab').addClass('disabled');\n    }\n  };\n\n  var calculateAgentCorpCodeDiscount = function calculateAgentCorpCodeDiscount() {\n    var agentCorpCode = $('#agentCompanyCode1').val();\n    var property_price = $('#totalAmount').val();\n\n    if (property_price == 0 || agentCorpCode == '') {\n      sendMsg = property_price == 0 ? \"Property amount must be greater than zero!\" : 'Please insert Agent/Corporate code!';\n      Lobibox.notify('error', {\n        position: \"top right\",\n        msg: sendMsg\n      });\n    } else {\n      var agentCorpCodeUrl = $('#applyCodeButton').data('url');\n      $.ajax({\n        type: \"POST\",\n        url: agentCorpCodeUrl,\n        data: {\n          agent_corp_code: agentCorpCode,\n          property_price: property_price,\n          _token: $('meta[name=\"csrf-token\"]').attr('content')\n        },\n        beforeSend: function beforeSend() {\n          var _loaderMsg = $(this).attr(\"data-loader\");\n\n          $(\"#loader_msg\").html(_loaderMsg);\n          $(\"#loader\").show();\n        },\n        complete: function complete() {\n          $(\"#loader\").hide();\n        },\n        success: function success(data) {\n          Lobibox.notify(data[\"type\"], {\n            position: \"top right\",\n            msg: data[\"message\"]\n          });\n\n          if (data['discount_amount'] && data['discount_type'] && data['type'] == 'success') {\n            $(\"#AppliedCouponCode\").val('');\n            $('#offerCode').val('');\n            $(\"#agentCompanyCodeType\").val(data['code_type']);\n            $(\"#agentCompanyCode\").val(agentCorpCode);\n            $('#discountAmount').val(data['discount_amount']);\n            $('.discountAmount').html(' ₹' + data['discount_amount']);\n            $('#discountSucccessText').show().addClass('d-flex');\n            $('#discountType').val(data['discount_type']);\n            $('#discountValue').val(data['discount_deduct']);\n            $('#discountSucccessAmount').html(data['discount_deduct'] + ' % ');\n            $('#applyCodeButton').html('Applied').removeClass('grey').addClass('green');\n            $('#basic-addon1').html('Apply').addClass('applyOfferButton grey').removeClass('green');\n          } else {\n            $('#agentCompanyCode1').val('');\n            $('#agentCompanyCode').val('');\n            $('#agentCompanyCodeType').val('');\n          }\n\n          calculateAmount();\n        }\n      });\n    }\n  };\n\n  var calculateDiscountAmount = function calculateDiscountAmount() {\n    var property_id = $('#offerCode').attr('data-property-id');\n    var offerCode = $('#offerCode').val();\n    var property_price = $('#totalAmount').val();\n\n    if (offerCode == '') {\n      var sendMsg;\n\n      if ($('#discountAmount').val() > 0) {\n        $('#discountAmount').val('');\n        $('.discountAmount').html(0);\n        $('#discountSucccessText').hide().removeClass('d-flex');\n        $('#discountType').val('');\n        $('#discountValue').val('');\n        $('#discountSucccessAmount').html('');\n        $(\"#AppliedCouponCode\").val('');\n        calculateAmount(); // $('#basic-addon1').html('Apply').addClass('applyOfferButton grey').removeClass('green');\n\n        sendMsg = \"Offer code removed successfully!\";\n      } else {\n        sendMsg = \"Please select offer code!\";\n      }\n\n      Lobibox.notify('error', {\n        position: \"top right\",\n        msg: sendMsg\n      });\n      return;\n    } else {\n      var url = $('#offerCode').attr('data-url');\n      $.ajax({\n        type: \"POST\",\n        url: url,\n        data: {\n          property_id: property_id,\n          property_price: property_price,\n          offerCode: offerCode,\n          _token: $('meta[name=\"csrf-token\"]').attr('content')\n        },\n        beforeSend: function beforeSend() {\n          var _loaderMsg = $('#basic-addon1').attr(\"data-loader\");\n\n          $(\"#loader_msg\").html(_loaderMsg);\n          $(\"#loader\").show();\n        },\n        complete: function complete() {\n          $(\"#loader\").hide();\n        },\n        success: function success(data) {\n          Lobibox.notify(data[\"type\"], {\n            position: \"top right\",\n            msg: data[\"message\"]\n          });\n\n          if (data['discount_amount'] && data['discount_type'] && data['type'] == 'success') {\n            $('#discountSucccessText').show();\n\n            if (!$('#discountSucccessText').hasClass('d-flex')) {\n              $('#discountSucccessText').addClass('d-flex');\n            }\n\n            $('#discountAmount').val(data['discount_amount']);\n            $('.discountAmount').html(' ₹' + data['discount_amount']);\n            $('#discountSucccessText').show().addClass('d-flex');\n            $('#discountType').val(data['discount_type']);\n            $('#discountValue').val(data['discount_deduct']);\n            $('#isGlobalOfferApplied').val(data['is_global_coupon']);\n\n            if (data['discount_type'] == 'Flatrate') {\n              $('#discountSucccessAmount').html(' ₹' + data['discount_deduct']);\n            } else {\n              $('#discountSucccessAmount').html(data['discount_deduct'] + ' % ');\n            }\n\n            $(\"#AppliedCouponCode\").val(offerCode);\n            $('#basic-addon1').html('Applied').removeClass('applyOfferButton grey').addClass('green');\n          } else {\n            $('#offerCode').val('');\n            $(\"#AppliedCouponCode\").val('');\n            $('#discountSucccessText').hide().removeClass('d-flex');\n          }\n\n          $('#applyCodeButton').html('Apply').removeClass('green').addClass('grey');\n          $('#agentCompanyCode1').val('');\n          $('#agentCompanyCode').val('');\n          $('#agentCompanyCodeType').val('');\n          calculateAmount();\n        }\n      });\n    }\n  };\n\n  var calculateAmount = function calculateAmount() {\n    dateDifference();\n    totalGuests();\n    var isGlobalOfferApplied = $('#isGlobalOfferApplied').val();\n    var agentCompanyCode = $('#agentCompanyCode').val();\n\n    if (isRoomType) {\n      totalAmountCal();\n    }\n\n    var totalAmount = $('#totalAmount').val();\n    var discountAmount = $('#discountAmount').val();\n    var discountType = $('#discountType').val();\n    var daysDiff = $('#daysDiff').val();\n\n    if (daysDiff == 0) {\n      $('.daysDiffernceDiv').hide().removeClass('d-flex');\n    } else {\n      $('.daysDiffernceDiv').show().addClass('d-flex');\n    }\n\n    if (daysDiff >= 1) {\n      totalAmount = totalAmount * daysDiff;\n    }\n\n    if (discountType != '' && discountType == 'Percentage') {\n      var discountValue = $('#discountValue').val();\n      discountAmount = totalAmount - totalAmount * ((100 - discountValue) / 100);\n      $('#discountAmount').val(discountAmount);\n      $('.discountAmount').html(' ₹ ' + discountAmount);\n    }\n\n    if (discountType != '' && discountType == 'Flatrate' && discountAmount >= totalAmount) {\n      discountAmount = 0;\n      $('#discountAmount').val(discountAmount);\n      $('.discountAmount').html(' ₹ ' + discountAmount);\n      $('#discountSucccessText').hide().removeClass('d-flex');\n      $('#discountType').val('');\n      $('#discountValue').val('');\n    }\n\n    $('.daysDiffernce').html(daysDiff + ' Days');\n    $('#totalAmount').val(totalAmount);\n    $('.totalAmount').html('₹ ' + totalAmount);\n\n    if (parseInt(discountAmount) > 0) {\n      $('#finalPayableAmount').val(totalAmount - discountAmount);\n      $('.finalPayableAmount').html('₹ ' + (totalAmount - discountAmount));\n    } else {\n      $('#finalPayableAmount').val(totalAmount);\n      $('.finalPayableAmount').html('₹ ' + totalAmount);\n    }\n\n    calculateCommissionAmount();\n    amountType();\n    var propertyCommissionAmount = $('#propertyCommissionAmount').val();\n\n    if (totalAmount <= 0 || isGlobalOfferApplied == 1 && propertyCommissionAmount <= 0 || agentCompanyCode != '' && propertyCommissionAmount <= 0) {\n      if (isGlobalOfferApplied == 1) {\n        sendMsg = 'Offer code removed! Booking partial amount too low.';\n      } else if (agentCompanyCode != '') {\n        sendMsg = 'Agent/Corporate code discount removed! Booking partial amount too low.';\n      } else {\n        sendMsg = 'Offer code removed! Booking amount too low.';\n      }\n\n      if (isCall == 0 && reloadVal == 0 && discountAmount > 0) {\n        removeDiscount(sendMsg);\n      }\n    }\n\n    if (isCall == 0) {\n      reloadVal = 0;\n      $('#addPaymentButton').prop('disabled', true);\n      $('#pills-bookingpayment-tab').addClass('disabled');\n    }\n\n    isCall = 0;\n  };\n\n  var totalAmountCal = function totalAmountCal() {\n    var sum = 0;\n    $(\".quantity__input \").each(function () {\n      sum += +$(this).attr('data-total-amount');\n    });\n    $(\"#totalAmount\").val(sum);\n  };\n\n  var totalGuests = function totalGuests() {\n    if (!isRoomType) {\n      $(\".total_guests\").val($('.quantity_guests ').val());\n      $('.totalGuests').html($('.quantity_guests ').val());\n      return;\n    }\n\n    var sum = 0;\n    $(\".quantity__input \").each(function () {\n      sum += +$(this).val();\n    });\n    $(\".total_guests\").val(sum); // var total_guests = $('.quantity_guests').val();\n\n    var output = sum == 1 ? sum + ' Guest ' : sum + ' Guests ';\n    $('.totalGuests').html(output);\n  };\n\n  var calculateCommissionAmount = function calculateCommissionAmount() {\n    var totalAmount = $('#totalAmount').val();\n    var commission_percent = $('#commPercent').val();\n    var commmission = Math.round(totalAmount * (commission_percent / 100));\n    var isGlobalOfferApplied = $('#isGlobalOfferApplied').val();\n    var discountAmount = $('#discountAmount').val();\n\n    if (isGlobalOfferApplied == 1 && discountAmount > 0 || agentCompanyCode != '') {\n      commmission = commmission - discountAmount;\n    }\n\n    $('#propertyCommissionAmount').val(commmission);\n    $('.propertyCommissionAmountText').html('₹' + commmission);\n  };\n\n  var propertyType = $('#propertyTypeSlug').val();\n  var isRoomType = ['hostel-pg', 'guest-hotel', 'hostel-pg-one-day'].find(function (element) {\n    return element == propertyType;\n  });\n  var isOnlyOneDayType = ['guest-hotel', 'hostel-pg-one-day', 'homestay'].find(function (element) {\n    return element == propertyType;\n  });\n  var isFlatType = propertyType == 'flat';\n  var isHomestay = propertyType == 'homestay';\n  var isHotel = propertyType == 'guest-hotel';\n  var reloadVal = 0;\n  var isCall = 1;\n  calculateAmount(); // 1 = 'hostel-pg'\n  // 2 = 'flat'\n  // 3 = 'guest-hotel'\n  // 4 = 'hostel-pg-one-day'\n  // 5 = 'homestay'\n\n  var nowDate = new Date();\n  var checkindate = $(\".check-in-input\").val();\n  var checkoutdate = $(\".check-out-input\").val();\n  var today = new Date(nowDate.getFullYear(), nowDate.getMonth(), nowDate.getDate(), 0, 0, 0, 0);\n  var checkinDate2;\n  $('.check-in-render').daterangepicker({\n    singleDatePicker: true,\n    startDate: checkindate ? new Date(checkindate) : new Date(),\n    autoApply: true,\n    disabledPast: true,\n    customClass: '',\n    widthSingle: 300,\n    onlyShowCurrentMonth: true,\n    minDate: today,\n    opens: bookingCore.rtl ? 'right' : 'left',\n    locale: {\n      format: \"YYYY-MM-DD\",\n      direction: bookingCore.rtl ? 'rtl' : 'ltr',\n      firstDay: daterangepickerLocale.first_day_of_week\n    }\n  }, function (start, end, label) {\n    $(\".check-in-input\").val(start.format('YYYY-MM-DD'));\n    var start_date = $(\".check-in-input\").val();\n    var end_date = $(\".check-out-input\").val();\n\n    if (start_date > end_date && end_date != '') {\n      end_date = $(\".check-out-input\").val(start_date);\n      start_date = $(\".check-in-input\").val(start_date);\n      $('.check-out-render').html('<i class=\"ri-calendar-line cal-icon calendar-check-in-out-fa\"></i>' + start.format(bookingCore.view_end_date_formate));\n      $('.check-in-render').html('<i class=\"ri-calendar-line cal-icon calendar-check-in-out-fa\"></i>' + start.format(bookingCore.view_end_date_formate));\n    } else {\n      $('.check-in-render').html('<i class=\"ri-calendar-line cal-icon calendar-check-in-out-fa\"></i>' + start.format(bookingCore.view_end_date_formate));\n    }\n\n    if (isOnlyOneDayType) {\n      dateDifference();\n      calculateAmount();\n    }\n  });\n  $('.check-out-render').daterangepicker({\n    singleDatePicker: true,\n    autoApply: true,\n    startDate: checkoutdate ? new Date(checkoutdate) : new Date(),\n    disabledPast: true,\n    customClass: '',\n    widthSingle: 300,\n    onlyShowCurrentMonth: true,\n    minDate: checkindate ? new Date(checkindate) : new Date(),\n    opens: bookingCore.rtl ? 'right' : 'left',\n    locale: {\n      format: \"YYYY-MM-DD\",\n      direction: bookingCore.rtl ? 'rtl' : 'ltr',\n      firstDay: daterangepickerLocale.first_day_of_week\n    }\n  }, function (start, end, label) {\n    $(\".check-out-input\").val(end.format('YYYY-MM-DD'));\n    var start_date = $(\".check-in-input\").val();\n    var end_date = $(\".check-out-input\").val();\n\n    if (end_date < start_date) {\n      start_date = $(\".check-out-input\").val(end_date);\n      end_date = $(\".check-in-input\").val(end_date);\n      $('.check-out-render').html('<i class=\"ri-calendar-line cal-icon calendar-check-in-out-fa\"></i>' + end.format(bookingCore.view_end_date_formate));\n      $('.check-in-render').html('<i class=\"ri-calendar-line cal-icon calendar-check-in-out-fa\"></i>' + end.format(bookingCore.view_end_date_formate));\n    } else {\n      $('.check-out-render').html('<i class=\"ri-calendar-line cal-icon calendar-check-in-out-fa\"></i>' + end.format(bookingCore.view_end_date_formate));\n    }\n\n    if (isOnlyOneDayType) {\n      dateDifference();\n      calculateAmount();\n    }\n  });\n\n  if (isFlatType) {\n    var flatbhk_val = $('.flatbhk').val().replace('bhk', '');\n    $(\".btn-add-guests\").each(function () {\n      var dataClass = $(this).attr('data-input-class');\n      var input = $('.' + dataClass + '');\n      var max_attrval = parseInt(flatbhk_val * 2);\n      $(input).attr('max', max_attrval);\n    });\n  }\n\n  $('body').on('click', '.btn-minus-guests', function (e) {\n    e.stopPropagation();\n    var dataClass = $(this).attr('data-input-class');\n    var input = $('.' + dataClass + '');\n    var min = parseInt(input.attr('min'));\n    var old = parseInt(input.val());\n\n    if (old <= min) {\n      return;\n    }\n\n    input.val(old - 1);\n    calculateAmount();\n  });\n  $('body').on('click', '.btn-add-guests', function (e) {\n    e.stopPropagation();\n    var dataClass = $(this).attr('data-input-class');\n    var input = $('.' + dataClass + '');\n\n    if (isFlatType) {\n      var flatbhk_val = $('.flatbhk').val().replace('bhk', '');\n      var max_attrval = parseInt(flatbhk_val * 2);\n      $(input).attr('max', max_attrval);\n    }\n\n    var max = parseInt(input.attr('max'));\n    var old = parseInt(input.val());\n\n    if (old >= max) {\n      return;\n    }\n\n    input.val(old + 1);\n    calculateAmount();\n  });\n  $('body').on('change', '.room_ac_non_ac_checkbox', function (e) {\n    if ($(this).is(':checked')) {\n      $('.quantity_guests_' + $(this).data('id') + '_' + $(this).data('type')).addClass('box_selected').attr('required', true).attr('min', 1);\n    } else {\n      $('.quantity_guests_' + $(this).data('id') + '_' + $(this).data('type')).removeClass('box_selected').val(0).attr('required', false).attr('min', 0).attr('data-total-amount', 0);\n    }\n\n    calculateAmount();\n  });\n  $('body').on('click', '.btn-minus-guests-multi', function (e) {\n    e.stopPropagation();\n    var dataClass = $(this).attr('data-input-class');\n    var input = $('.' + dataClass + '');\n\n    if (input.hasClass('box_selected')) {\n      var min = parseInt(input.attr('min'));\n      var old = parseInt(input.val());\n\n      if (old <= min) {\n        return;\n      }\n\n      input.val(old - 1);\n      input.attr('data-total-amount', (old - 1) * parseInt(input.attr('data-peramount')));\n    }\n\n    calculateAmount();\n  });\n  $('body').on('click', '.btn-add-guests-multi', function (e) {\n    e.stopPropagation();\n    var dataClass = $(this).attr('data-input-class');\n    var input = $('.' + dataClass + '');\n\n    if (input.hasClass('box_selected')) {\n      var max = parseInt(input.attr('max'));\n      var old = parseInt(input.val());\n\n      if (old >= max) {\n        return;\n      }\n\n      input.val(old + 1);\n      input.attr('data-total-amount', (old + 1) * parseInt(input.attr('data-peramount')));\n    }\n\n    calculateAmount();\n  });\n  $('#agentCompanyCode1').on('keyup', function () {\n    $('#applyCodeButton').html('Apply').removeClass('green').addClass('grey');\n  });\n  $('#offerCode').on('change', function () {\n    calculateDiscountAmount();\n\n    if ($(\"#AppliedCouponCode\").val() == $(this).val() && $(this).val() != '') {\n      $('#basic-addon1').html('Applied').removeClass('grey applyOfferButton').addClass('green ');\n    } else {\n      $('#basic-addon1').html('Apply').addClass('grey applyOfferButton').removeClass('green');\n    }\n  });\n  $(document).on('click', '.applyCodeButton', function () {\n    calculateAgentCorpCodeDiscount();\n    calculateAmount();\n  });\n  $('body').on('click', '#removeCoupon', function () {\n    sendMsg = \"Offer code removed successfully!\";\n    removeDiscount(sendMsg);\n  });\n  $('.paidType').on('change', function () {\n    amountType();\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiJCIsIm9uIiwiY3VzUm91dGUiLCJhdHRyIiwidmFsIiwiY29tcFJvdXRlIiwicHJvcGVydHlfaWQiLCJ1cmwiLCJhamF4IiwidHlwZSIsImRhdGEiLCJkYXRhVHlwZSIsImJlZm9yZVNlbmQiLCJodG1sIiwiX2xvYWRlck1zZyIsInNob3ciLCJzdWNjZXNzIiwiaGlkZSIsIkxvYmlib3giLCJub3RpZnkiLCJwb3NpdGlvbiIsIm1zZyIsImxvY2F0aW9uIiwiaHJlZiIsImVycm9yIiwicmVzcG9uc2VKU09OIiwibWVzc2FnZSIsIndpbmRvdyIsInNpdGVfdXJsIiwiZGF0ZURpZmZlcmVuY2UiLCJzdGFydF9kYXRlIiwiZW5kX2RhdGUiLCJlbmREYXRlIiwiRGF0ZSIsInN0YXJ0RGF0ZSIsImRpZmZUaW1lIiwiTWF0aCIsImFicyIsImRpZmZEYXlzIiwiY2VpbCIsImlzTmFOIiwicmVtb3ZlRGlzY291bnQiLCJzZW5kTXNnIiwicmVsb2FkVmFsIiwicmVtb3ZlQ2xhc3MiLCJhZGRDbGFzcyIsImNhbGN1bGF0ZUFtb3VudCIsImFtb3VudFR5cGUiLCJwYXltZW50X3R5cGUiLCJwYXlBbW91bnQiLCJyZW1haW5pbmdBbW91bnQiLCJpc0NhbGwiLCJwcm9wIiwiY2FsY3VsYXRlQWdlbnRDb3JwQ29kZURpc2NvdW50IiwiYWdlbnRDb3JwQ29kZSIsInByb3BlcnR5X3ByaWNlIiwiYWdlbnRDb3JwQ29kZVVybCIsImFnZW50X2NvcnBfY29kZSIsIl90b2tlbiIsImNvbXBsZXRlIiwiY2FsY3VsYXRlRGlzY291bnRBbW91bnQiLCJvZmZlckNvZGUiLCJoYXNDbGFzcyIsInRvdGFsR3Vlc3RzIiwiaXNHbG9iYWxPZmZlckFwcGxpZWQiLCJhZ2VudENvbXBhbnlDb2RlIiwiaXNSb29tVHlwZSIsInRvdGFsQW1vdW50Q2FsIiwidG90YWxBbW91bnQiLCJkaXNjb3VudEFtb3VudCIsImRpc2NvdW50VHlwZSIsImRheXNEaWZmIiwiZGlzY291bnRWYWx1ZSIsInBhcnNlSW50IiwiY2FsY3VsYXRlQ29tbWlzc2lvbkFtb3VudCIsInByb3BlcnR5Q29tbWlzc2lvbkFtb3VudCIsInN1bSIsImVhY2giLCJvdXRwdXQiLCJjb21taXNzaW9uX3BlcmNlbnQiLCJjb21tbWlzc2lvbiIsInJvdW5kIiwicHJvcGVydHlUeXBlIiwiZmluZCIsImVsZW1lbnQiLCJpc09ubHlPbmVEYXlUeXBlIiwiaXNGbGF0VHlwZSIsImlzSG9tZXN0YXkiLCJpc0hvdGVsIiwibm93RGF0ZSIsImNoZWNraW5kYXRlIiwiY2hlY2tvdXRkYXRlIiwidG9kYXkiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsImNoZWNraW5EYXRlMiIsImRhdGVyYW5nZXBpY2tlciIsInNpbmdsZURhdGVQaWNrZXIiLCJhdXRvQXBwbHkiLCJkaXNhYmxlZFBhc3QiLCJjdXN0b21DbGFzcyIsIndpZHRoU2luZ2xlIiwib25seVNob3dDdXJyZW50TW9udGgiLCJtaW5EYXRlIiwib3BlbnMiLCJib29raW5nQ29yZSIsInJ0bCIsImxvY2FsZSIsImZvcm1hdCIsImRpcmVjdGlvbiIsImZpcnN0RGF5IiwiZGF0ZXJhbmdlcGlja2VyTG9jYWxlIiwiZmlyc3RfZGF5X29mX3dlZWsiLCJzdGFydCIsImVuZCIsImxhYmVsIiwidmlld19lbmRfZGF0ZV9mb3JtYXRlIiwiZmxhdGJoa192YWwiLCJyZXBsYWNlIiwiZGF0YUNsYXNzIiwiaW5wdXQiLCJtYXhfYXR0cnZhbCIsImUiLCJzdG9wUHJvcGFnYXRpb24iLCJtaW4iLCJvbGQiLCJtYXgiLCJpcyJdLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvZnJvbnRlbmQvYm9va2luZy1jb21wYW55LmpzPzM5MzEiXSwic291cmNlc0NvbnRlbnQiOlsiaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2VhcmNocGFnZVwiKSB8fCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInByb3BlcnR5X2RldGFpbHNcIikgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJCb29rTm93QnV0dG9uUGFnZVwiKSkge1xyXG5cclxuICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcuYm9va05vd0J1dHRvbicsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgY3VzUm91dGUgPSAkKCcuY3VzdG9tZXJSb3V0ZScgKyAkKHRoaXMpLmF0dHIoJ2RhdGEtaWQnKSkudmFsKCk7XHJcbiAgICAgICAgdmFyIGNvbXBSb3V0ZSA9ICQoJy5jb21wYW55Um91dGUnICsgJCh0aGlzKS5hdHRyKCdkYXRhLWlkJykpLnZhbCgpO1xyXG4gICAgICAgICQoJyNjdXN0b21lclJvdXRlJykuYXR0cignaHJlZicsIGN1c1JvdXRlKS5hdHRyKCdkYXRhLWlkJywgJCh0aGlzKS5hdHRyKCdkYXRhLWlkJykpLmF0dHIoJ2RhdGEtYWN0aW9uJywgJCh0aGlzKS5hdHRyKCdkYXRhLWFjdGlvbicpKTtcclxuICAgICAgICAkKCcjY29tcGFueVJvdXRlJykuYXR0cignaHJlZicsIGNvbXBSb3V0ZSkuYXR0cignZGF0YS1pZCcsICQodGhpcykuYXR0cignZGF0YS1pZCcpKS5hdHRyKCdkYXRhLWFjdGlvbicsICQodGhpcykuYXR0cignZGF0YS1hY3Rpb24nKSk7XHJcbiAgICB9KTtcclxuXHJcblxyXG4gICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgJyNzY2hlZHVsZU5vd0J1dHRvbicsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgY3VzUm91dGUgPSAkKCcuY3VzdG9tZXJTY2hlZHVsZVJvdXRlJykudmFsKCk7XHJcbiAgICAgICAgdmFyIGNvbXBSb3V0ZSA9ICQoJy5jb21wYW55U2NoZWR1bGVSb3V0ZScpLnZhbCgpO1xyXG4gICAgICAgICQoJyNzY2hlZHVsZUN1c3RvbWVyUm91dGUnKS5hdHRyKCdkYXRhLXVybCcsIGN1c1JvdXRlKS5hdHRyKCdkYXRhLWlkJywgJCh0aGlzKS5hdHRyKCdkYXRhLWlkJykpO1xyXG4gICAgICAgICQoJyNzY2hlZHVsZUNvbXBhbnlSb3V0ZScpLmF0dHIoJ2RhdGEtdXJsJywgY29tcFJvdXRlKS5hdHRyKCdkYXRhLWlkJywgJCh0aGlzKS5hdHRyKCdkYXRhLWlkJykpO1xyXG4gICAgfSk7XHJcblxyXG5cclxuICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcuc3RvcmUtdmlzaXQtY29tcGFueScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgcHJvcGVydHlfaWQgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtaWQnKTtcclxuICAgICAgICB2YXIgdXJsID0gJCh0aGlzKS5hdHRyKCdkYXRhLXVybCcpO1xyXG4gICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgIHR5cGU6IFwiUE9TVFwiLFxyXG4gICAgICAgICAgICB1cmw6IHVybCxcclxuICAgICAgICAgICAgZGF0YTogeyAncHJvcGVydHlfaWQnOiBwcm9wZXJ0eV9pZCB9LFxyXG4gICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxyXG4gICAgICAgICAgICBiZWZvcmVTZW5kOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkKFwiI2xvYWRlcl9tc2dcIikuaHRtbChfbG9hZGVyTXNnKTtcclxuICAgICAgICAgICAgICAgICQoXCIjbG9hZGVyXCIpLnNob3coKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3VjY2VzczogKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgICAgICQoXCIjbG9hZGVyXCIpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgIExvYmlib3gubm90aWZ5KGRhdGFbJ3R5cGUnXSwge1xyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBcInRvcCByaWdodFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIG1zZzogZGF0YVsnbWVzc2FnZSddXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGlmIChkYXRhW1wicmVkaXJlY3QtdXJsXCJdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24uaHJlZiA9IGRhdGFbXCJyZWRpcmVjdC11cmxcIl07XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIGlmIChkYXRhLnJlc3BvbnNlSlNPTi5tZXNzYWdlID09IFwiVW5hdXRoZW50aWNhdGVkLlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgTG9iaWJveC5ub3RpZnkoJ2Vycm9yJywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogXCJ0b3AgcmlnaHRcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgbXNnOiAnTG9naW4gYXMgY29tcGFueSB0byBzY2hlZHVsZSB2aXNpdC4nXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBzaXRlX3VybCArICcvY29tcGFueS9sb2dpbic7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAkKFwiI2xvYWRlclwiKS5oaWRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pXHJcbn1cclxuXHJcblxyXG5cclxuaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYm9va2luZ1BhZ2VDb21wYW55XCIpKSB7XHJcblxyXG4gICAgdmFyIHByb3BlcnR5VHlwZSA9ICQoJyNwcm9wZXJ0eVR5cGVTbHVnJykudmFsKCk7XHJcbiAgICBjb25zdCBpc1Jvb21UeXBlID0gWydob3N0ZWwtcGcnLCAnZ3Vlc3QtaG90ZWwnLCAnaG9zdGVsLXBnLW9uZS1kYXknXS5maW5kKGVsZW1lbnQgPT4gZWxlbWVudCA9PSBwcm9wZXJ0eVR5cGUpO1xyXG4gICAgY29uc3QgaXNPbmx5T25lRGF5VHlwZSA9IFsnZ3Vlc3QtaG90ZWwnLCAnaG9zdGVsLXBnLW9uZS1kYXknLCAnaG9tZXN0YXknXS5maW5kKGVsZW1lbnQgPT4gZWxlbWVudCA9PSBwcm9wZXJ0eVR5cGUpO1xyXG4gICAgY29uc3QgaXNGbGF0VHlwZSA9IHByb3BlcnR5VHlwZSA9PSAnZmxhdCc7XHJcbiAgICBjb25zdCBpc0hvbWVzdGF5ID0gcHJvcGVydHlUeXBlID09ICdob21lc3RheSc7XHJcbiAgICBjb25zdCBpc0hvdGVsID0gcHJvcGVydHlUeXBlID09ICdndWVzdC1ob3RlbCc7XHJcbiAgICB2YXIgcmVsb2FkVmFsID0gMDtcclxuICAgIHZhciBpc0NhbGwgPSAxO1xyXG5cclxuXHJcbiAgICBjYWxjdWxhdGVBbW91bnQoKTtcclxuXHJcbiAgICAvLyAxID0gJ2hvc3RlbC1wZydcclxuICAgIC8vIDIgPSAnZmxhdCdcclxuICAgIC8vIDMgPSAnZ3Vlc3QtaG90ZWwnXHJcbiAgICAvLyA0ID0gJ2hvc3RlbC1wZy1vbmUtZGF5J1xyXG4gICAgLy8gNSA9ICdob21lc3RheSdcclxuXHJcbiAgICB2YXIgbm93RGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICB2YXIgY2hlY2tpbmRhdGUgPSAkKFwiLmNoZWNrLWluLWlucHV0XCIpLnZhbCgpO1xyXG4gICAgdmFyIGNoZWNrb3V0ZGF0ZSA9ICQoXCIuY2hlY2stb3V0LWlucHV0XCIpLnZhbCgpO1xyXG4gICAgdmFyIHRvZGF5ID0gbmV3IERhdGUobm93RGF0ZS5nZXRGdWxsWWVhcigpLCBub3dEYXRlLmdldE1vbnRoKCksIG5vd0RhdGUuZ2V0RGF0ZSgpLCAwLCAwLCAwLCAwKTtcclxuICAgIHZhciBjaGVja2luRGF0ZTI7XHJcblxyXG4gICAgJCgnLmNoZWNrLWluLXJlbmRlcicpLmRhdGVyYW5nZXBpY2tlcih7XHJcbiAgICAgICAgc2luZ2xlRGF0ZVBpY2tlcjogdHJ1ZSxcclxuICAgICAgICBzdGFydERhdGU6IGNoZWNraW5kYXRlID8gbmV3IERhdGUoY2hlY2tpbmRhdGUpIDogbmV3IERhdGUoKSxcclxuICAgICAgICBhdXRvQXBwbHk6IHRydWUsXHJcbiAgICAgICAgZGlzYWJsZWRQYXN0OiB0cnVlLFxyXG4gICAgICAgIGN1c3RvbUNsYXNzOiAnJyxcclxuICAgICAgICB3aWR0aFNpbmdsZTogMzAwLFxyXG4gICAgICAgIG9ubHlTaG93Q3VycmVudE1vbnRoOiB0cnVlLFxyXG4gICAgICAgIG1pbkRhdGU6IHRvZGF5LFxyXG4gICAgICAgIG9wZW5zOiBib29raW5nQ29yZS5ydGwgPyAncmlnaHQnIDogJ2xlZnQnLFxyXG4gICAgICAgIGxvY2FsZToge1xyXG4gICAgICAgICAgICBmb3JtYXQ6IFwiWVlZWS1NTS1ERFwiLFxyXG4gICAgICAgICAgICBkaXJlY3Rpb246IGJvb2tpbmdDb3JlLnJ0bCA/ICdydGwnIDogJ2x0cicsXHJcbiAgICAgICAgICAgIGZpcnN0RGF5OiBkYXRlcmFuZ2VwaWNrZXJMb2NhbGUuZmlyc3RfZGF5X29mX3dlZWtcclxuICAgICAgICB9LFxyXG4gICAgfSwgZnVuY3Rpb24gKHN0YXJ0LCBlbmQsIGxhYmVsKSB7XHJcblxyXG4gICAgICAgICQoXCIuY2hlY2staW4taW5wdXRcIikudmFsKHN0YXJ0LmZvcm1hdCgnWVlZWS1NTS1ERCcpKTtcclxuICAgICAgICB2YXIgc3RhcnRfZGF0ZSA9ICQoXCIuY2hlY2staW4taW5wdXRcIikudmFsKCk7XHJcbiAgICAgICAgdmFyIGVuZF9kYXRlID0gJChcIi5jaGVjay1vdXQtaW5wdXRcIikudmFsKCk7XHJcbiAgICAgICAgaWYgKHN0YXJ0X2RhdGUgPiBlbmRfZGF0ZSAmJiBlbmRfZGF0ZSAhPSAnJykge1xyXG4gICAgICAgICAgICBlbmRfZGF0ZSA9ICQoXCIuY2hlY2stb3V0LWlucHV0XCIpLnZhbChzdGFydF9kYXRlKTtcclxuICAgICAgICAgICAgc3RhcnRfZGF0ZSA9ICQoXCIuY2hlY2staW4taW5wdXRcIikudmFsKHN0YXJ0X2RhdGUpO1xyXG4gICAgICAgICAgICAkKCcuY2hlY2stb3V0LXJlbmRlcicpLmh0bWwoJzxpIGNsYXNzPVwicmktY2FsZW5kYXItbGluZSBjYWwtaWNvbiBjYWxlbmRhci1jaGVjay1pbi1vdXQtZmFcIj48L2k+JyArIHN0YXJ0LmZvcm1hdChib29raW5nQ29yZS52aWV3X2VuZF9kYXRlX2Zvcm1hdGUpKTtcclxuICAgICAgICAgICAgJCgnLmNoZWNrLWluLXJlbmRlcicpLmh0bWwoJzxpIGNsYXNzPVwicmktY2FsZW5kYXItbGluZSBjYWwtaWNvbiBjYWxlbmRhci1jaGVjay1pbi1vdXQtZmFcIj48L2k+JyArIHN0YXJ0LmZvcm1hdChib29raW5nQ29yZS52aWV3X2VuZF9kYXRlX2Zvcm1hdGUpKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAkKCcuY2hlY2staW4tcmVuZGVyJykuaHRtbCgnPGkgY2xhc3M9XCJyaS1jYWxlbmRhci1saW5lIGNhbC1pY29uIGNhbGVuZGFyLWNoZWNrLWluLW91dC1mYVwiPjwvaT4nICsgc3RhcnQuZm9ybWF0KGJvb2tpbmdDb3JlLnZpZXdfZW5kX2RhdGVfZm9ybWF0ZSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXNPbmx5T25lRGF5VHlwZSkge1xyXG4gICAgICAgICAgICBkYXRlRGlmZmVyZW5jZSgpO1xyXG4gICAgICAgICAgICBjYWxjdWxhdGVBbW91bnQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfSk7XHJcblxyXG5cclxuICAgICQoJy5jaGVjay1vdXQtcmVuZGVyJykuZGF0ZXJhbmdlcGlja2VyKHtcclxuICAgICAgICBzaW5nbGVEYXRlUGlja2VyOiB0cnVlLFxyXG4gICAgICAgIGF1dG9BcHBseTogdHJ1ZSxcclxuICAgICAgICBzdGFydERhdGU6IGNoZWNrb3V0ZGF0ZSA/IG5ldyBEYXRlKGNoZWNrb3V0ZGF0ZSkgOiBuZXcgRGF0ZSgpLFxyXG4gICAgICAgIGRpc2FibGVkUGFzdDogdHJ1ZSxcclxuICAgICAgICBjdXN0b21DbGFzczogJycsXHJcbiAgICAgICAgd2lkdGhTaW5nbGU6IDMwMCxcclxuICAgICAgICBvbmx5U2hvd0N1cnJlbnRNb250aDogdHJ1ZSxcclxuICAgICAgICBtaW5EYXRlOiBjaGVja2luZGF0ZSA/IG5ldyBEYXRlKGNoZWNraW5kYXRlKSA6IG5ldyBEYXRlKCksXHJcbiAgICAgICAgb3BlbnM6IGJvb2tpbmdDb3JlLnJ0bCA/ICdyaWdodCcgOiAnbGVmdCcsXHJcbiAgICAgICAgbG9jYWxlOiB7XHJcbiAgICAgICAgICAgIGZvcm1hdDogXCJZWVlZLU1NLUREXCIsXHJcbiAgICAgICAgICAgIGRpcmVjdGlvbjogYm9va2luZ0NvcmUucnRsID8gJ3J0bCcgOiAnbHRyJyxcclxuICAgICAgICAgICAgZmlyc3REYXk6IGRhdGVyYW5nZXBpY2tlckxvY2FsZS5maXJzdF9kYXlfb2Zfd2Vla1xyXG4gICAgICAgIH0sXHJcbiAgICB9LCBmdW5jdGlvbiAoc3RhcnQsIGVuZCwgbGFiZWwpIHtcclxuXHJcbiAgICAgICAgJChcIi5jaGVjay1vdXQtaW5wdXRcIikudmFsKGVuZC5mb3JtYXQoJ1lZWVktTU0tREQnKSk7XHJcbiAgICAgICAgdmFyIHN0YXJ0X2RhdGUgPSAkKFwiLmNoZWNrLWluLWlucHV0XCIpLnZhbCgpO1xyXG4gICAgICAgIHZhciBlbmRfZGF0ZSA9ICQoXCIuY2hlY2stb3V0LWlucHV0XCIpLnZhbCgpO1xyXG4gICAgICAgIGlmIChlbmRfZGF0ZSA8IHN0YXJ0X2RhdGUpIHtcclxuICAgICAgICAgICAgc3RhcnRfZGF0ZSA9ICQoXCIuY2hlY2stb3V0LWlucHV0XCIpLnZhbChlbmRfZGF0ZSk7XHJcbiAgICAgICAgICAgIGVuZF9kYXRlID0gJChcIi5jaGVjay1pbi1pbnB1dFwiKS52YWwoZW5kX2RhdGUpO1xyXG4gICAgICAgICAgICAkKCcuY2hlY2stb3V0LXJlbmRlcicpLmh0bWwoJzxpIGNsYXNzPVwicmktY2FsZW5kYXItbGluZSBjYWwtaWNvbiBjYWxlbmRhci1jaGVjay1pbi1vdXQtZmFcIj48L2k+JyArIGVuZC5mb3JtYXQoYm9va2luZ0NvcmUudmlld19lbmRfZGF0ZV9mb3JtYXRlKSk7XHJcbiAgICAgICAgICAgICQoJy5jaGVjay1pbi1yZW5kZXInKS5odG1sKCc8aSBjbGFzcz1cInJpLWNhbGVuZGFyLWxpbmUgY2FsLWljb24gY2FsZW5kYXItY2hlY2staW4tb3V0LWZhXCI+PC9pPicgKyBlbmQuZm9ybWF0KGJvb2tpbmdDb3JlLnZpZXdfZW5kX2RhdGVfZm9ybWF0ZSkpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICQoJy5jaGVjay1vdXQtcmVuZGVyJykuaHRtbCgnPGkgY2xhc3M9XCJyaS1jYWxlbmRhci1saW5lIGNhbC1pY29uIGNhbGVuZGFyLWNoZWNrLWluLW91dC1mYVwiPjwvaT4nICsgZW5kLmZvcm1hdChib29raW5nQ29yZS52aWV3X2VuZF9kYXRlX2Zvcm1hdGUpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGlzT25seU9uZURheVR5cGUpIHtcclxuICAgICAgICAgICAgZGF0ZURpZmZlcmVuY2UoKTtcclxuICAgICAgICAgICAgY2FsY3VsYXRlQW1vdW50KCk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcblxyXG4gICAgfSk7XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiAgICBpZiAoaXNGbGF0VHlwZSkge1xyXG5cclxuICAgICAgICB2YXIgZmxhdGJoa192YWwgPSAkKCcuZmxhdGJoaycpLnZhbCgpLnJlcGxhY2UoJ2JoaycsICcnKTtcclxuICAgICAgICAkKFwiLmJ0bi1hZGQtZ3Vlc3RzXCIpLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgZGF0YUNsYXNzID0gJCh0aGlzKS5hdHRyKCdkYXRhLWlucHV0LWNsYXNzJyk7XHJcbiAgICAgICAgICAgIHZhciBpbnB1dCA9ICQoJy4nICsgZGF0YUNsYXNzICsgJycpO1xyXG4gICAgICAgICAgICB2YXIgbWF4X2F0dHJ2YWwgPSBwYXJzZUludChmbGF0YmhrX3ZhbCAqIDIpO1xyXG4gICAgICAgICAgICAkKGlucHV0KS5hdHRyKCdtYXgnLCBtYXhfYXR0cnZhbCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG5cclxuXHJcbiAgICAkKCdib2R5Jykub24oJ2NsaWNrJywgJy5idG4tbWludXMtZ3Vlc3RzJywgZnVuY3Rpb24gKGUpIHtcclxuXHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB2YXIgZGF0YUNsYXNzID0gJCh0aGlzKS5hdHRyKCdkYXRhLWlucHV0LWNsYXNzJyk7XHJcbiAgICAgICAgdmFyIGlucHV0ID0gJCgnLicgKyBkYXRhQ2xhc3MgKyAnJyk7XHJcbiAgICAgICAgdmFyIG1pbiA9IHBhcnNlSW50KGlucHV0LmF0dHIoJ21pbicpKTtcclxuICAgICAgICB2YXIgb2xkID0gcGFyc2VJbnQoaW5wdXQudmFsKCkpO1xyXG5cclxuICAgICAgICBpZiAob2xkIDw9IG1pbikge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpbnB1dC52YWwob2xkIC0gMSk7XHJcbiAgICAgICAgY2FsY3VsYXRlQW1vdW50KCk7XHJcblxyXG5cclxuICAgIH0pO1xyXG5cclxuICAgICQoJ2JvZHknKS5vbignY2xpY2snLCAnLmJ0bi1hZGQtZ3Vlc3RzJywgZnVuY3Rpb24gKGUpIHtcclxuXHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB2YXIgZGF0YUNsYXNzID0gJCh0aGlzKS5hdHRyKCdkYXRhLWlucHV0LWNsYXNzJyk7XHJcbiAgICAgICAgdmFyIGlucHV0ID0gJCgnLicgKyBkYXRhQ2xhc3MgKyAnJyk7XHJcbiAgICAgICAgaWYgKGlzRmxhdFR5cGUpIHtcclxuICAgICAgICAgICAgdmFyIGZsYXRiaGtfdmFsID0gJCgnLmZsYXRiaGsnKS52YWwoKS5yZXBsYWNlKCdiaGsnLCAnJyk7XHJcbiAgICAgICAgICAgIHZhciBtYXhfYXR0cnZhbCA9IHBhcnNlSW50KGZsYXRiaGtfdmFsICogMik7XHJcbiAgICAgICAgICAgICQoaW5wdXQpLmF0dHIoJ21heCcsIG1heF9hdHRydmFsKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBtYXggPSBwYXJzZUludChpbnB1dC5hdHRyKCdtYXgnKSk7XHJcbiAgICAgICAgdmFyIG9sZCA9IHBhcnNlSW50KGlucHV0LnZhbCgpKTtcclxuICAgICAgICBpZiAob2xkID49IG1heCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlucHV0LnZhbChvbGQgKyAxKTtcclxuICAgICAgICBjYWxjdWxhdGVBbW91bnQoKTtcclxuXHJcblxyXG4gICAgfSk7XHJcblxyXG5cclxuICAgICQoJ2JvZHknKS5vbignY2hhbmdlJywgJy5yb29tX2FjX25vbl9hY19jaGVja2JveCcsIGZ1bmN0aW9uIChlKSB7XHJcblxyXG4gICAgICAgIGlmICgkKHRoaXMpLmlzKCc6Y2hlY2tlZCcpKSB7XHJcbiAgICAgICAgICAgICQoJy5xdWFudGl0eV9ndWVzdHNfJyArICQodGhpcykuZGF0YSgnaWQnKSArICdfJyArICQodGhpcykuZGF0YSgndHlwZScpKS5hZGRDbGFzcygnYm94X3NlbGVjdGVkJykuYXR0cigncmVxdWlyZWQnLCB0cnVlKS5hdHRyKCdtaW4nLCAxKTtcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgJCgnLnF1YW50aXR5X2d1ZXN0c18nICsgJCh0aGlzKS5kYXRhKCdpZCcpICsgJ18nICsgJCh0aGlzKS5kYXRhKCd0eXBlJykpLnJlbW92ZUNsYXNzKCdib3hfc2VsZWN0ZWQnKS52YWwoMCkuYXR0cigncmVxdWlyZWQnLCBmYWxzZSkuYXR0cignbWluJywgMCkuYXR0cignZGF0YS10b3RhbC1hbW91bnQnLCAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FsY3VsYXRlQW1vdW50KCk7XHJcblxyXG5cclxuICAgIH0pO1xyXG5cclxuICAgICQoJ2JvZHknKS5vbignY2xpY2snLCAnLmJ0bi1taW51cy1ndWVzdHMtbXVsdGknLCBmdW5jdGlvbiAoZSkge1xyXG5cclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIHZhciBkYXRhQ2xhc3MgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtaW5wdXQtY2xhc3MnKTtcclxuICAgICAgICB2YXIgaW5wdXQgPSAkKCcuJyArIGRhdGFDbGFzcyArICcnKTtcclxuICAgICAgICBpZiAoaW5wdXQuaGFzQ2xhc3MoJ2JveF9zZWxlY3RlZCcpKSB7XHJcbiAgICAgICAgICAgIHZhciBtaW4gPSBwYXJzZUludChpbnB1dC5hdHRyKCdtaW4nKSk7XHJcbiAgICAgICAgICAgIHZhciBvbGQgPSBwYXJzZUludChpbnB1dC52YWwoKSk7XHJcbiAgICAgICAgICAgIGlmIChvbGQgPD0gbWluKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaW5wdXQudmFsKG9sZCAtIDEpO1xyXG4gICAgICAgICAgICBpbnB1dC5hdHRyKCdkYXRhLXRvdGFsLWFtb3VudCcsIChvbGQgLSAxKSAqIHBhcnNlSW50KGlucHV0LmF0dHIoJ2RhdGEtcGVyYW1vdW50JykpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FsY3VsYXRlQW1vdW50KCk7XHJcblxyXG4gICAgfSk7XHJcblxyXG5cclxuXHJcbiAgICAkKCdib2R5Jykub24oJ2NsaWNrJywgJy5idG4tYWRkLWd1ZXN0cy1tdWx0aScsIGZ1bmN0aW9uIChlKSB7XHJcblxyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgdmFyIGRhdGFDbGFzcyA9ICQodGhpcykuYXR0cignZGF0YS1pbnB1dC1jbGFzcycpO1xyXG4gICAgICAgIHZhciBpbnB1dCA9ICQoJy4nICsgZGF0YUNsYXNzICsgJycpO1xyXG4gICAgICAgIGlmIChpbnB1dC5oYXNDbGFzcygnYm94X3NlbGVjdGVkJykpIHtcclxuICAgICAgICAgICAgdmFyIG1heCA9IHBhcnNlSW50KGlucHV0LmF0dHIoJ21heCcpKTtcclxuICAgICAgICAgICAgdmFyIG9sZCA9IHBhcnNlSW50KGlucHV0LnZhbCgpKTtcclxuICAgICAgICAgICAgaWYgKG9sZCA+PSBtYXgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpbnB1dC52YWwob2xkICsgMSk7XHJcbiAgICAgICAgICAgIGlucHV0LmF0dHIoJ2RhdGEtdG90YWwtYW1vdW50JywgKG9sZCArIDEpICogcGFyc2VJbnQoaW5wdXQuYXR0cignZGF0YS1wZXJhbW91bnQnKSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYWxjdWxhdGVBbW91bnQoKTtcclxuXHJcblxyXG4gICAgfSk7XHJcblxyXG4gICAgJCgnI2FnZW50Q29tcGFueUNvZGUxJykub24oJ2tleXVwJywgZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAkKCcjYXBwbHlDb2RlQnV0dG9uJykuaHRtbCgnQXBwbHknKS5yZW1vdmVDbGFzcygnZ3JlZW4nKS5hZGRDbGFzcygnZ3JleScpO1xyXG5cclxuICAgIH0pO1xyXG5cclxuXHJcbiAgICAkKCcjb2ZmZXJDb2RlJykub24oJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgY2FsY3VsYXRlRGlzY291bnRBbW91bnQoKTtcclxuICAgICAgICBpZiAoJChcIiNBcHBsaWVkQ291cG9uQ29kZVwiKS52YWwoKSA9PSAkKHRoaXMpLnZhbCgpICYmICQodGhpcykudmFsKCkgIT0gJycpIHtcclxuICAgICAgICAgICAgJCgnI2Jhc2ljLWFkZG9uMScpLmh0bWwoJ0FwcGxpZWQnKS5yZW1vdmVDbGFzcygnZ3JleSBhcHBseU9mZmVyQnV0dG9uJykuYWRkQ2xhc3MoJ2dyZWVuICcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICQoJyNiYXNpYy1hZGRvbjEnKS5odG1sKCdBcHBseScpLmFkZENsYXNzKCdncmV5IGFwcGx5T2ZmZXJCdXR0b24nKS5yZW1vdmVDbGFzcygnZ3JlZW4nKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgIH0pO1xyXG5cclxuXHJcbiAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCAnLmFwcGx5Q29kZUJ1dHRvbicsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBjYWxjdWxhdGVBZ2VudENvcnBDb2RlRGlzY291bnQoKTtcclxuICAgICAgICBjYWxjdWxhdGVBbW91bnQoKTtcclxuICAgIH0pO1xyXG5cclxuICAgICQoJ2JvZHknKS5vbignY2xpY2snLCAnI3JlbW92ZUNvdXBvbicsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBzZW5kTXNnID0gXCJPZmZlciBjb2RlIHJlbW92ZWQgc3VjY2Vzc2Z1bGx5IVwiO1xyXG4gICAgICAgIHJlbW92ZURpc2NvdW50KHNlbmRNc2cpO1xyXG5cclxuICAgIH0pO1xyXG5cclxuICAgICAgIFxyXG4gICAgJCgnLnBhaWRUeXBlJykub24oJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBhbW91bnRUeXBlKCk7XHJcbiAgICB9KTtcclxuXHJcblxyXG4gICAgZnVuY3Rpb24gZGF0ZURpZmZlcmVuY2UoKSB7XHJcblxyXG4gICAgICAgIHZhciBzdGFydF9kYXRlID0gJChcIi5jaGVjay1pbi1pbnB1dFwiKS52YWwoKTtcclxuICAgICAgICB2YXIgZW5kX2RhdGUgPSAkKFwiLmNoZWNrLW91dC1pbnB1dFwiKS52YWwoKTtcclxuICAgICAgICB2YXIgZW5kRGF0ZSA9IG5ldyBEYXRlKGVuZF9kYXRlKTtcclxuICAgICAgICB2YXIgc3RhcnREYXRlID0gbmV3IERhdGUoc3RhcnRfZGF0ZSk7XHJcbiAgICAgICAgdmFyIGRpZmZUaW1lID0gTWF0aC5hYnMoZW5kRGF0ZSAtIHN0YXJ0RGF0ZSk7XHJcbiAgICAgICAgdmFyIGRpZmZEYXlzID0gTWF0aC5jZWlsKGRpZmZUaW1lIC8gKDEwMDAgKiA2MCAqIDYwICogMjQpKTtcclxuICAgICAgICBpZiAoaXNOYU4oZGlmZkRheXMpKSB7XHJcbiAgICAgICAgICAgIGRpZmZEYXlzID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgJCgnI2RheXNEaWZmJykudmFsKGRpZmZEYXlzKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcmVtb3ZlRGlzY291bnQoc2VuZE1zZyA9ICcnKSB7XHJcbiAgICAgICAgcmVsb2FkVmFsID0gMTtcclxuICAgICAgICAkKCcjYWdlbnRDb21wYW55Q29kZTEnKS52YWwoJycpO1xyXG4gICAgICAgICQoJyNhZ2VudENvbXBhbnlDb2RlJykudmFsKCcnKTtcclxuICAgICAgICAkKCcjYWdlbnRDb21wYW55Q29kZVR5cGUnKS52YWwoJycpO1xyXG4gICAgICAgICQoJyNkaXNjb3VudEFtb3VudCcpLnZhbCgnJyk7XHJcbiAgICAgICAgJCgnLmRpc2NvdW50QW1vdW50JykuaHRtbCgwKTtcclxuICAgICAgICAkKCcjZGlzY291bnRTdWNjY2Vzc1RleHQnKS5oaWRlKCkucmVtb3ZlQ2xhc3MoJ2QtZmxleCcpO1xyXG4gICAgICAgICQoJyNkaXNjb3VudFR5cGUnKS52YWwoJycpO1xyXG4gICAgICAgICQoJyNkaXNjb3VudFZhbHVlJykudmFsKCcnKTtcclxuICAgICAgICAkKCcjZGlzY291bnRTdWNjY2Vzc0Ftb3VudCcpLmh0bWwoJycpO1xyXG4gICAgICAgICQoXCIjQXBwbGllZENvdXBvbkNvZGVcIikudmFsKCcnKTtcclxuICAgICAgICAkKCcjb2ZmZXJDb2RlJykudmFsKCcnKTtcclxuICAgICAgICAkKCcjYmFzaWMtYWRkb24xJykuaHRtbCgnQXBwbHknKS5hZGRDbGFzcygnYXBwbHlPZmZlckJ1dHRvbiBncmV5JykucmVtb3ZlQ2xhc3MoJ2dyZWVuJyk7XHJcbiAgICAgICAgJCgnI2FwcGx5Q29kZUJ1dHRvbicpLmh0bWwoJ0FwcGx5JykucmVtb3ZlQ2xhc3MoJ2dyZWVuJykuYWRkQ2xhc3MoJ2dyZXknKTtcclxuICAgICAgICBpZiAoc2VuZE1zZyAhPSAnJykge1xyXG4gICAgICAgICAgICBMb2JpYm94Lm5vdGlmeSgnZXJyb3InLCB7XHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogXCJ0b3AgcmlnaHRcIixcclxuICAgICAgICAgICAgICAgIG1zZzogc2VuZE1zZyxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhbGN1bGF0ZUFtb3VudCgpO1xyXG4gICAgICAgIHJldHVybjtcclxuXHJcbiAgICB9XHJcblxyXG4gXHJcblxyXG4gICAgZnVuY3Rpb24gYW1vdW50VHlwZSgpIHtcclxuICAgICAgICB2YXIgcGF5bWVudF90eXBlID0gJCgnaW5wdXQ6cmFkaW8ucGFpZFR5cGU6Y2hlY2tlZCcpLnZhbCgpO1xyXG4gICAgICAgIHZhciBwYXlBbW91bnQ7XHJcbiAgICAgICAgaWYgKHBheW1lbnRfdHlwZSA9PSAncGFydGlhbCcpIHtcclxuICAgICAgICAgICAgcGF5QW1vdW50ID0gJCgnI3Byb3BlcnR5Q29tbWlzc2lvbkFtb3VudCcpLnZhbCgpO1xyXG4gICAgICAgICAgICByZW1haW5pbmdBbW91bnQgPSAkKCcjdG90YWxBbW91bnQnKS52YWwoKSAtIHBheUFtb3VudDtcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcGF5QW1vdW50ID0gJCgnI2ZpbmFsUGF5YWJsZUFtb3VudCcpLnZhbCgpO1xyXG4gICAgICAgICAgICAkKCcucmVtYWluaW5nQW1vdW50RGl2JykuaGlkZSgpLnJlbW92ZUNsYXNzKCdkLWZsZXgnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgJCgnLmZpbmFsQW1vdW50QWZ0ZXJTZWxlY3Rpb24nKS5odG1sKCfigrknICsgcGF5QW1vdW50KTtcclxuICAgICAgICAkKCcjZmluYWxBbW91bnRBZnRlclNlbGVjdGlvbicpLnZhbChwYXlBbW91bnQpO1xyXG4gICAgICAgIGlmIChpc0NhbGwgPT0gMCkge1xyXG4gICAgICAgICAgICAkKCcjYWRkUGF5bWVudEJ1dHRvbicpLnByb3AoJ2Rpc2FibGVkJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICQoJyNwaWxscy1ib29raW5ncGF5bWVudC10YWInKS5hZGRDbGFzcygnZGlzYWJsZWQnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY2FsY3VsYXRlQWdlbnRDb3JwQ29kZURpc2NvdW50KCkge1xyXG4gICAgICAgIHZhciBhZ2VudENvcnBDb2RlID0gJCgnI2FnZW50Q29tcGFueUNvZGUxJykudmFsKCk7XHJcbiAgICAgICAgdmFyIHByb3BlcnR5X3ByaWNlID0gJCgnI3RvdGFsQW1vdW50JykudmFsKCk7XHJcbiAgICAgICAgaWYgKHByb3BlcnR5X3ByaWNlID09IDAgfHwgYWdlbnRDb3JwQ29kZSA9PSAnJykge1xyXG4gICAgICAgICAgICBzZW5kTXNnID0gcHJvcGVydHlfcHJpY2UgPT0gMCA/IFwiUHJvcGVydHkgYW1vdW50IG11c3QgYmUgZ3JlYXRlciB0aGFuIHplcm8hXCIgOiAnUGxlYXNlIGluc2VydCBBZ2VudC9Db3Jwb3JhdGUgY29kZSEnO1xyXG4gICAgICAgICAgICBMb2JpYm94Lm5vdGlmeSgnZXJyb3InLCB7XHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogXCJ0b3AgcmlnaHRcIixcclxuICAgICAgICAgICAgICAgIG1zZzogc2VuZE1zZyxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGFnZW50Q29ycENvZGVVcmwgPSAkKCcjYXBwbHlDb2RlQnV0dG9uJykuZGF0YSgndXJsJyk7XHJcbiAgICAgICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBcIlBPU1RcIixcclxuICAgICAgICAgICAgICAgIHVybDogYWdlbnRDb3JwQ29kZVVybCxcclxuICAgICAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgICAgICBhZ2VudF9jb3JwX2NvZGU6IGFnZW50Q29ycENvZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlfcHJpY2U6IHByb3BlcnR5X3ByaWNlLFxyXG4gICAgICAgICAgICAgICAgICAgIF90b2tlbjogJCgnbWV0YVtuYW1lPVwiY3NyZi10b2tlblwiXScpLmF0dHIoJ2NvbnRlbnQnKSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBiZWZvcmVTZW5kOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9sb2FkZXJNc2cgPSAkKHRoaXMpLmF0dHIoXCJkYXRhLWxvYWRlclwiKTtcclxuICAgICAgICAgICAgICAgICAgICAkKFwiI2xvYWRlcl9tc2dcIikuaHRtbChfbG9hZGVyTXNnKTtcclxuICAgICAgICAgICAgICAgICAgICAkKFwiI2xvYWRlclwiKS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkKFwiI2xvYWRlclwiKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICBMb2JpYm94Lm5vdGlmeShkYXRhW1widHlwZVwiXSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogXCJ0b3AgcmlnaHRcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgbXNnOiBkYXRhW1wibWVzc2FnZVwiXSxcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVsnZGlzY291bnRfYW1vdW50J10gJiYgZGF0YVsnZGlzY291bnRfdHlwZSddICYmIGRhdGFbJ3R5cGUnXSA9PSAnc3VjY2VzcycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJChcIiNBcHBsaWVkQ291cG9uQ29kZVwiKS52YWwoJycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcjb2ZmZXJDb2RlJykudmFsKCcnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoXCIjYWdlbnRDb21wYW55Q29kZVR5cGVcIikudmFsKGRhdGFbJ2NvZGVfdHlwZSddKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJChcIiNhZ2VudENvbXBhbnlDb2RlXCIpLnZhbChhZ2VudENvcnBDb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2Rpc2NvdW50QW1vdW50JykudmFsKGRhdGFbJ2Rpc2NvdW50X2Ftb3VudCddKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmRpc2NvdW50QW1vdW50JykuaHRtbCgnIOKCuScgKyBkYXRhWydkaXNjb3VudF9hbW91bnQnXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNkaXNjb3VudFN1Y2NjZXNzVGV4dCcpLnNob3coKS5hZGRDbGFzcygnZC1mbGV4Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNkaXNjb3VudFR5cGUnKS52YWwoZGF0YVsnZGlzY291bnRfdHlwZSddKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2Rpc2NvdW50VmFsdWUnKS52YWwoZGF0YVsnZGlzY291bnRfZGVkdWN0J10pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcjZGlzY291bnRTdWNjY2Vzc0Ftb3VudCcpLmh0bWwoZGF0YVsnZGlzY291bnRfZGVkdWN0J10gKyAnICUgJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNhcHBseUNvZGVCdXR0b24nKS5odG1sKCdBcHBsaWVkJykucmVtb3ZlQ2xhc3MoJ2dyZXknKS5hZGRDbGFzcygnZ3JlZW4nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2Jhc2ljLWFkZG9uMScpLmh0bWwoJ0FwcGx5JykuYWRkQ2xhc3MoJ2FwcGx5T2ZmZXJCdXR0b24gZ3JleScpLnJlbW92ZUNsYXNzKCdncmVlbicpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNhZ2VudENvbXBhbnlDb2RlMScpLnZhbCgnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNhZ2VudENvbXBhbnlDb2RlJykudmFsKCcnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2FnZW50Q29tcGFueUNvZGVUeXBlJykudmFsKCcnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNhbGN1bGF0ZUFtb3VudCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuXHJcblxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZURpc2NvdW50QW1vdW50KCkge1xyXG5cclxuICAgICAgICB2YXIgcHJvcGVydHlfaWQgPSAkKCcjb2ZmZXJDb2RlJykuYXR0cignZGF0YS1wcm9wZXJ0eS1pZCcpO1xyXG4gICAgICAgIHZhciBvZmZlckNvZGUgPSAkKCcjb2ZmZXJDb2RlJykudmFsKCk7XHJcbiAgICAgICAgdmFyIHByb3BlcnR5X3ByaWNlID0gJCgnI3RvdGFsQW1vdW50JykudmFsKCk7XHJcbiAgICAgICAgaWYgKG9mZmVyQ29kZSA9PSAnJykge1xyXG4gICAgICAgICAgICB2YXIgc2VuZE1zZztcclxuICAgICAgICAgICAgaWYgKCQoJyNkaXNjb3VudEFtb3VudCcpLnZhbCgpID4gMCkge1xyXG4gICAgICAgICAgICAgICAgJCgnI2Rpc2NvdW50QW1vdW50JykudmFsKCcnKTtcclxuICAgICAgICAgICAgICAgICQoJy5kaXNjb3VudEFtb3VudCcpLmh0bWwoMCk7XHJcbiAgICAgICAgICAgICAgICAkKCcjZGlzY291bnRTdWNjY2Vzc1RleHQnKS5oaWRlKCkucmVtb3ZlQ2xhc3MoJ2QtZmxleCcpO1xyXG4gICAgICAgICAgICAgICAgJCgnI2Rpc2NvdW50VHlwZScpLnZhbCgnJyk7XHJcbiAgICAgICAgICAgICAgICAkKCcjZGlzY291bnRWYWx1ZScpLnZhbCgnJyk7XHJcbiAgICAgICAgICAgICAgICAkKCcjZGlzY291bnRTdWNjY2Vzc0Ftb3VudCcpLmh0bWwoJycpO1xyXG4gICAgICAgICAgICAgICAgJChcIiNBcHBsaWVkQ291cG9uQ29kZVwiKS52YWwoJycpO1xyXG4gICAgICAgICAgICAgICAgY2FsY3VsYXRlQW1vdW50KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gJCgnI2Jhc2ljLWFkZG9uMScpLmh0bWwoJ0FwcGx5JykuYWRkQ2xhc3MoJ2FwcGx5T2ZmZXJCdXR0b24gZ3JleScpLnJlbW92ZUNsYXNzKCdncmVlbicpO1xyXG4gICAgICAgICAgICAgICAgc2VuZE1zZyA9IFwiT2ZmZXIgY29kZSByZW1vdmVkIHN1Y2Nlc3NmdWxseSFcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHNlbmRNc2cgPSBcIlBsZWFzZSBzZWxlY3Qgb2ZmZXIgY29kZSFcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBMb2JpYm94Lm5vdGlmeSgnZXJyb3InLCB7XHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogXCJ0b3AgcmlnaHRcIixcclxuICAgICAgICAgICAgICAgIG1zZzogc2VuZE1zZyxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgdmFyIHVybCA9ICQoJyNvZmZlckNvZGUnKS5hdHRyKCdkYXRhLXVybCcpO1xyXG4gICAgICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICAgICAgdHlwZTogXCJQT1NUXCIsXHJcbiAgICAgICAgICAgICAgICB1cmw6IHVybCxcclxuICAgICAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pZDogcHJvcGVydHlfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlfcHJpY2U6IHByb3BlcnR5X3ByaWNlLFxyXG4gICAgICAgICAgICAgICAgICAgIG9mZmVyQ29kZTogb2ZmZXJDb2RlLFxyXG4gICAgICAgICAgICAgICAgICAgIF90b2tlbjogJCgnbWV0YVtuYW1lPVwiY3NyZi10b2tlblwiXScpLmF0dHIoJ2NvbnRlbnQnKSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBiZWZvcmVTZW5kOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9sb2FkZXJNc2cgPSAkKCcjYmFzaWMtYWRkb24xJykuYXR0cihcImRhdGEtbG9hZGVyXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICQoXCIjbG9hZGVyX21zZ1wiKS5odG1sKF9sb2FkZXJNc2cpO1xyXG4gICAgICAgICAgICAgICAgICAgICQoXCIjbG9hZGVyXCIpLnNob3coKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICQoXCIjbG9hZGVyXCIpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIExvYmlib3gubm90aWZ5KGRhdGFbXCJ0eXBlXCJdLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBcInRvcCByaWdodFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtc2c6IGRhdGFbXCJtZXNzYWdlXCJdLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhWydkaXNjb3VudF9hbW91bnQnXSAmJiBkYXRhWydkaXNjb3VudF90eXBlJ10gJiYgZGF0YVsndHlwZSddID09ICdzdWNjZXNzJykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2Rpc2NvdW50U3VjY2Nlc3NUZXh0Jykuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISQoJyNkaXNjb3VudFN1Y2NjZXNzVGV4dCcpLmhhc0NsYXNzKCdkLWZsZXgnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2Rpc2NvdW50U3VjY2Nlc3NUZXh0JykuYWRkQ2xhc3MoJ2QtZmxleCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcjZGlzY291bnRBbW91bnQnKS52YWwoZGF0YVsnZGlzY291bnRfYW1vdW50J10pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcuZGlzY291bnRBbW91bnQnKS5odG1sKCcg4oK5JyArIGRhdGFbJ2Rpc2NvdW50X2Ftb3VudCddKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2Rpc2NvdW50U3VjY2Nlc3NUZXh0Jykuc2hvdygpLmFkZENsYXNzKCdkLWZsZXgnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2Rpc2NvdW50VHlwZScpLnZhbChkYXRhWydkaXNjb3VudF90eXBlJ10pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcjZGlzY291bnRWYWx1ZScpLnZhbChkYXRhWydkaXNjb3VudF9kZWR1Y3QnXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNpc0dsb2JhbE9mZmVyQXBwbGllZCcpLnZhbChkYXRhWydpc19nbG9iYWxfY291cG9uJ10pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVsnZGlzY291bnRfdHlwZSddID09ICdGbGF0cmF0ZScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJyNkaXNjb3VudFN1Y2NjZXNzQW1vdW50JykuaHRtbCgnIOKCuScgKyBkYXRhWydkaXNjb3VudF9kZWR1Y3QnXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcjZGlzY291bnRTdWNjY2Vzc0Ftb3VudCcpLmh0bWwoZGF0YVsnZGlzY291bnRfZGVkdWN0J10gKyAnICUgJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoXCIjQXBwbGllZENvdXBvbkNvZGVcIikudmFsKG9mZmVyQ29kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNiYXNpYy1hZGRvbjEnKS5odG1sKCdBcHBsaWVkJykucmVtb3ZlQ2xhc3MoJ2FwcGx5T2ZmZXJCdXR0b24gZ3JleScpLmFkZENsYXNzKCdncmVlbicpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNvZmZlckNvZGUnKS52YWwoJycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKFwiI0FwcGxpZWRDb3Vwb25Db2RlXCIpLnZhbCgnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNkaXNjb3VudFN1Y2NjZXNzVGV4dCcpLmhpZGUoKS5yZW1vdmVDbGFzcygnZC1mbGV4Jyk7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnI2FwcGx5Q29kZUJ1dHRvbicpLmh0bWwoJ0FwcGx5JykucmVtb3ZlQ2xhc3MoJ2dyZWVuJykuYWRkQ2xhc3MoJ2dyZXknKTtcclxuICAgICAgICAgICAgICAgICAgICAkKCcjYWdlbnRDb21wYW55Q29kZTEnKS52YWwoJycpO1xyXG4gICAgICAgICAgICAgICAgICAgICQoJyNhZ2VudENvbXBhbnlDb2RlJykudmFsKCcnKTtcclxuICAgICAgICAgICAgICAgICAgICAkKCcjYWdlbnRDb21wYW55Q29kZVR5cGUnKS52YWwoJycpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGN1bGF0ZUFtb3VudCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZUFtb3VudCgpIHtcclxuICAgICAgICBkYXRlRGlmZmVyZW5jZSgpO1xyXG4gICAgICAgIHRvdGFsR3Vlc3RzKCk7XHJcbiAgICAgICAgdmFyIGlzR2xvYmFsT2ZmZXJBcHBsaWVkID0gJCgnI2lzR2xvYmFsT2ZmZXJBcHBsaWVkJykudmFsKCk7XHJcbiAgICAgICAgdmFyIGFnZW50Q29tcGFueUNvZGUgPSAkKCcjYWdlbnRDb21wYW55Q29kZScpLnZhbCgpO1xyXG4gICAgICAgIGlmIChpc1Jvb21UeXBlKSB7XHJcbiAgICAgICAgICAgIHRvdGFsQW1vdW50Q2FsKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciB0b3RhbEFtb3VudCA9ICQoJyN0b3RhbEFtb3VudCcpLnZhbCgpO1xyXG4gICAgICAgIHZhciBkaXNjb3VudEFtb3VudCA9ICQoJyNkaXNjb3VudEFtb3VudCcpLnZhbCgpO1xyXG4gICAgICAgIHZhciBkaXNjb3VudFR5cGUgPSAkKCcjZGlzY291bnRUeXBlJykudmFsKCk7XHJcbiAgICAgICAgdmFyIGRheXNEaWZmID0gJCgnI2RheXNEaWZmJykudmFsKCk7XHJcbiAgICAgICAgaWYgKGRheXNEaWZmID09IDApIHtcclxuICAgICAgICAgICAgJCgnLmRheXNEaWZmZXJuY2VEaXYnKS5oaWRlKCkucmVtb3ZlQ2xhc3MoJ2QtZmxleCcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICQoJy5kYXlzRGlmZmVybmNlRGl2Jykuc2hvdygpLmFkZENsYXNzKCdkLWZsZXgnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChkYXlzRGlmZiA+PSAxKSB7XHJcbiAgICAgICAgICAgIHRvdGFsQW1vdW50ID0gdG90YWxBbW91bnQgKiBkYXlzRGlmZjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGRpc2NvdW50VHlwZSAhPSAnJyAmJiBkaXNjb3VudFR5cGUgPT0gJ1BlcmNlbnRhZ2UnKSB7XHJcbiAgICAgICAgICAgIHZhciBkaXNjb3VudFZhbHVlID0gJCgnI2Rpc2NvdW50VmFsdWUnKS52YWwoKTtcclxuICAgICAgICAgICAgZGlzY291bnRBbW91bnQgPSB0b3RhbEFtb3VudCAtICh0b3RhbEFtb3VudCAqICgoMTAwIC0gZGlzY291bnRWYWx1ZSkgLyAxMDApKTtcclxuXHJcbiAgICAgICAgICAgICQoJyNkaXNjb3VudEFtb3VudCcpLnZhbChkaXNjb3VudEFtb3VudCk7XHJcbiAgICAgICAgICAgICQoJy5kaXNjb3VudEFtb3VudCcpLmh0bWwoJyDigrkgJyArIGRpc2NvdW50QW1vdW50KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChkaXNjb3VudFR5cGUgIT0gJycgJiYgZGlzY291bnRUeXBlID09ICdGbGF0cmF0ZScgJiYgZGlzY291bnRBbW91bnQgPj0gdG90YWxBbW91bnQpIHtcclxuICAgICAgICAgICAgZGlzY291bnRBbW91bnQgPSAwO1xyXG4gICAgICAgICAgICAkKCcjZGlzY291bnRBbW91bnQnKS52YWwoZGlzY291bnRBbW91bnQpO1xyXG4gICAgICAgICAgICAkKCcuZGlzY291bnRBbW91bnQnKS5odG1sKCcg4oK5ICcgKyBkaXNjb3VudEFtb3VudCk7XHJcbiAgICAgICAgICAgICQoJyNkaXNjb3VudFN1Y2NjZXNzVGV4dCcpLmhpZGUoKS5yZW1vdmVDbGFzcygnZC1mbGV4Jyk7XHJcbiAgICAgICAgICAgICQoJyNkaXNjb3VudFR5cGUnKS52YWwoJycpO1xyXG4gICAgICAgICAgICAkKCcjZGlzY291bnRWYWx1ZScpLnZhbCgnJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkKCcuZGF5c0RpZmZlcm5jZScpLmh0bWwoZGF5c0RpZmYgKyAnIERheXMnKTtcclxuICAgICAgICAkKCcjdG90YWxBbW91bnQnKS52YWwodG90YWxBbW91bnQpO1xyXG4gICAgICAgICQoJy50b3RhbEFtb3VudCcpLmh0bWwoJ+KCuSAnICsgdG90YWxBbW91bnQpO1xyXG4gICAgICAgIGlmIChwYXJzZUludChkaXNjb3VudEFtb3VudCkgPiAwKSB7XHJcbiAgICAgICAgICAgICQoJyNmaW5hbFBheWFibGVBbW91bnQnKS52YWwodG90YWxBbW91bnQgLSBkaXNjb3VudEFtb3VudCk7XHJcbiAgICAgICAgICAgICQoJy5maW5hbFBheWFibGVBbW91bnQnKS5odG1sKCfigrkgJyArICh0b3RhbEFtb3VudCAtIGRpc2NvdW50QW1vdW50KSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgJCgnI2ZpbmFsUGF5YWJsZUFtb3VudCcpLnZhbCh0b3RhbEFtb3VudCk7XHJcbiAgICAgICAgICAgICQoJy5maW5hbFBheWFibGVBbW91bnQnKS5odG1sKCfigrkgJyArIHRvdGFsQW1vdW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FsY3VsYXRlQ29tbWlzc2lvbkFtb3VudCgpO1xyXG4gICAgICAgIGFtb3VudFR5cGUoKTtcclxuICAgICAgICB2YXIgcHJvcGVydHlDb21taXNzaW9uQW1vdW50ID0gJCgnI3Byb3BlcnR5Q29tbWlzc2lvbkFtb3VudCcpLnZhbCgpO1xyXG4gICAgICAgIGlmICgodG90YWxBbW91bnQgPD0gMCkgfHwgKGlzR2xvYmFsT2ZmZXJBcHBsaWVkID09IDEgJiYgcHJvcGVydHlDb21taXNzaW9uQW1vdW50IDw9IDApIHx8IChhZ2VudENvbXBhbnlDb2RlICE9ICcnICYmIHByb3BlcnR5Q29tbWlzc2lvbkFtb3VudCA8PSAwKSkge1xyXG5cclxuICAgICAgICAgICAgaWYgKGlzR2xvYmFsT2ZmZXJBcHBsaWVkID09IDEpIHtcclxuICAgICAgICAgICAgICAgIHNlbmRNc2cgPSAnT2ZmZXIgY29kZSByZW1vdmVkISBCb29raW5nIHBhcnRpYWwgYW1vdW50IHRvbyBsb3cuJztcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChhZ2VudENvbXBhbnlDb2RlICE9ICcnKSB7XHJcbiAgICAgICAgICAgICAgICBzZW5kTXNnID0gJ0FnZW50L0NvcnBvcmF0ZSBjb2RlIGRpc2NvdW50IHJlbW92ZWQhIEJvb2tpbmcgcGFydGlhbCBhbW91bnQgdG9vIGxvdy4nO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc2VuZE1zZyA9ICdPZmZlciBjb2RlIHJlbW92ZWQhIEJvb2tpbmcgYW1vdW50IHRvbyBsb3cuJztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGlzQ2FsbCA9PSAwICYmIHJlbG9hZFZhbCA9PSAwICYmIGRpc2NvdW50QW1vdW50ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlRGlzY291bnQoc2VuZE1zZyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpc0NhbGwgPT0gMCkge1xyXG4gICAgICAgICAgICByZWxvYWRWYWwgPSAwO1xyXG4gICAgICAgICAgICAkKCcjYWRkUGF5bWVudEJ1dHRvbicpLnByb3AoJ2Rpc2FibGVkJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICQoJyNwaWxscy1ib29raW5ncGF5bWVudC10YWInKS5hZGRDbGFzcygnZGlzYWJsZWQnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaXNDYWxsID0gMDtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdG90YWxBbW91bnRDYWwoKSB7XHJcblxyXG4gICAgICAgIHZhciBzdW0gPSAwO1xyXG4gICAgICAgICQoXCIucXVhbnRpdHlfX2lucHV0IFwiKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgc3VtICs9ICskKHRoaXMpLmF0dHIoJ2RhdGEtdG90YWwtYW1vdW50Jyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJChcIiN0b3RhbEFtb3VudFwiKS52YWwoc3VtKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB0b3RhbEd1ZXN0cygpIHtcclxuXHJcbiAgICAgICAgaWYgKCFpc1Jvb21UeXBlKSB7XHJcbiAgICAgICAgICAgICQoXCIudG90YWxfZ3Vlc3RzXCIpLnZhbCgkKCcucXVhbnRpdHlfZ3Vlc3RzICcpLnZhbCgpKTtcclxuICAgICAgICAgICAgJCgnLnRvdGFsR3Vlc3RzJykuaHRtbCgkKCcucXVhbnRpdHlfZ3Vlc3RzICcpLnZhbCgpKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgc3VtID0gMDtcclxuICAgICAgICAkKFwiLnF1YW50aXR5X19pbnB1dCBcIikuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHN1bSArPSArJCh0aGlzKS52YWwoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAkKFwiLnRvdGFsX2d1ZXN0c1wiKS52YWwoc3VtKTtcclxuICAgICAgICAvLyB2YXIgdG90YWxfZ3Vlc3RzID0gJCgnLnF1YW50aXR5X2d1ZXN0cycpLnZhbCgpO1xyXG4gICAgICAgIHZhciBvdXRwdXQgPSBzdW0gPT0gMSA/IHN1bSArICcgR3Vlc3QgJyA6IHN1bSArICcgR3Vlc3RzICc7XHJcbiAgICAgICAgJCgnLnRvdGFsR3Vlc3RzJykuaHRtbChvdXRwdXQpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZUNvbW1pc3Npb25BbW91bnQoKSB7XHJcblxyXG5cclxuICAgICAgICB2YXIgdG90YWxBbW91bnQgPSAkKCcjdG90YWxBbW91bnQnKS52YWwoKTtcclxuICAgICAgICB2YXIgY29tbWlzc2lvbl9wZXJjZW50ID0gJCgnI2NvbW1QZXJjZW50JykudmFsKCk7XHJcbiAgICAgICAgdmFyIGNvbW1taXNzaW9uID0gTWF0aC5yb3VuZCh0b3RhbEFtb3VudCAqIChjb21taXNzaW9uX3BlcmNlbnQgLyAxMDApKTtcclxuICAgICAgICB2YXIgaXNHbG9iYWxPZmZlckFwcGxpZWQgPSAkKCcjaXNHbG9iYWxPZmZlckFwcGxpZWQnKS52YWwoKTtcclxuICAgICAgICB2YXIgZGlzY291bnRBbW91bnQgPSAkKCcjZGlzY291bnRBbW91bnQnKS52YWwoKTtcclxuICAgICAgICBpZiAoKGlzR2xvYmFsT2ZmZXJBcHBsaWVkID09IDEgJiYgZGlzY291bnRBbW91bnQgPiAwKSB8fCBhZ2VudENvbXBhbnlDb2RlICE9ICcnKSB7XHJcbiAgICAgICAgICAgIGNvbW1taXNzaW9uID0gY29tbW1pc3Npb24gLSBkaXNjb3VudEFtb3VudDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICQoJyNwcm9wZXJ0eUNvbW1pc3Npb25BbW91bnQnKS52YWwoY29tbW1pc3Npb24pO1xyXG4gICAgICAgICQoJy5wcm9wZXJ0eUNvbW1pc3Npb25BbW91bnRUZXh0JykuaHRtbCgn4oK5JyArIGNvbW1taXNzaW9uKTtcclxuICAgIH1cclxufSJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsUUFBUSxDQUFDQyxjQUFULENBQXdCLFlBQXhCLEtBQXlDRCxRQUFRLENBQUNDLGNBQVQsQ0FBd0Isa0JBQXhCLENBQXpDLElBQXdGRCxRQUFRLENBQUNDLGNBQVQsQ0FBd0IsbUJBQXhCLENBQTVGLEVBQTBJO0VBRXRJQyxDQUFDLENBQUNGLFFBQUQsQ0FBRCxDQUFZRyxFQUFaLENBQWUsT0FBZixFQUF3QixnQkFBeEIsRUFBMEMsWUFBWTtJQUNsRCxJQUFJQyxRQUFRLEdBQUdGLENBQUMsQ0FBQyxtQkFBbUJBLENBQUMsQ0FBQyxJQUFELENBQUQsQ0FBUUcsSUFBUixDQUFhLFNBQWIsQ0FBcEIsQ0FBRCxDQUE4Q0MsR0FBOUMsRUFBZjtJQUNBLElBQUlDLFNBQVMsR0FBR0wsQ0FBQyxDQUFDLGtCQUFrQkEsQ0FBQyxDQUFDLElBQUQsQ0FBRCxDQUFRRyxJQUFSLENBQWEsU0FBYixDQUFuQixDQUFELENBQTZDQyxHQUE3QyxFQUFoQjtJQUNBSixDQUFDLENBQUMsZ0JBQUQsQ0FBRCxDQUFvQkcsSUFBcEIsQ0FBeUIsTUFBekIsRUFBaUNELFFBQWpDLEVBQTJDQyxJQUEzQyxDQUFnRCxTQUFoRCxFQUEyREgsQ0FBQyxDQUFDLElBQUQsQ0FBRCxDQUFRRyxJQUFSLENBQWEsU0FBYixDQUEzRCxFQUFvRkEsSUFBcEYsQ0FBeUYsYUFBekYsRUFBd0dILENBQUMsQ0FBQyxJQUFELENBQUQsQ0FBUUcsSUFBUixDQUFhLGFBQWIsQ0FBeEc7SUFDQUgsQ0FBQyxDQUFDLGVBQUQsQ0FBRCxDQUFtQkcsSUFBbkIsQ0FBd0IsTUFBeEIsRUFBZ0NFLFNBQWhDLEVBQTJDRixJQUEzQyxDQUFnRCxTQUFoRCxFQUEyREgsQ0FBQyxDQUFDLElBQUQsQ0FBRCxDQUFRRyxJQUFSLENBQWEsU0FBYixDQUEzRCxFQUFvRkEsSUFBcEYsQ0FBeUYsYUFBekYsRUFBd0dILENBQUMsQ0FBQyxJQUFELENBQUQsQ0FBUUcsSUFBUixDQUFhLGFBQWIsQ0FBeEc7RUFDSCxDQUxEO0VBUUFILENBQUMsQ0FBQ0YsUUFBRCxDQUFELENBQVlHLEVBQVosQ0FBZSxPQUFmLEVBQXdCLG9CQUF4QixFQUE4QyxZQUFZO0lBQ3RELElBQUlDLFFBQVEsR0FBR0YsQ0FBQyxDQUFDLHdCQUFELENBQUQsQ0FBNEJJLEdBQTVCLEVBQWY7SUFDQSxJQUFJQyxTQUFTLEdBQUdMLENBQUMsQ0FBQyx1QkFBRCxDQUFELENBQTJCSSxHQUEzQixFQUFoQjtJQUNBSixDQUFDLENBQUMsd0JBQUQsQ0FBRCxDQUE0QkcsSUFBNUIsQ0FBaUMsVUFBakMsRUFBNkNELFFBQTdDLEVBQXVEQyxJQUF2RCxDQUE0RCxTQUE1RCxFQUF1RUgsQ0FBQyxDQUFDLElBQUQsQ0FBRCxDQUFRRyxJQUFSLENBQWEsU0FBYixDQUF2RTtJQUNBSCxDQUFDLENBQUMsdUJBQUQsQ0FBRCxDQUEyQkcsSUFBM0IsQ0FBZ0MsVUFBaEMsRUFBNENFLFNBQTVDLEVBQXVERixJQUF2RCxDQUE0RCxTQUE1RCxFQUF1RUgsQ0FBQyxDQUFDLElBQUQsQ0FBRCxDQUFRRyxJQUFSLENBQWEsU0FBYixDQUF2RTtFQUNILENBTEQ7RUFRQUgsQ0FBQyxDQUFDRixRQUFELENBQUQsQ0FBWUcsRUFBWixDQUFlLE9BQWYsRUFBd0Isc0JBQXhCLEVBQWdELFlBQVk7SUFDeEQsSUFBSUssV0FBVyxHQUFHTixDQUFDLENBQUMsSUFBRCxDQUFELENBQVFHLElBQVIsQ0FBYSxTQUFiLENBQWxCO0lBQ0EsSUFBSUksR0FBRyxHQUFHUCxDQUFDLENBQUMsSUFBRCxDQUFELENBQVFHLElBQVIsQ0FBYSxVQUFiLENBQVY7SUFDQUgsQ0FBQyxDQUFDUSxJQUFGLENBQU87TUFDSEMsSUFBSSxFQUFFLE1BREg7TUFFSEYsR0FBRyxFQUFFQSxHQUZGO01BR0hHLElBQUksRUFBRTtRQUFFLGVBQWVKO01BQWpCLENBSEg7TUFJSEssUUFBUSxFQUFFLE1BSlA7TUFLSEMsVUFBVSxFQUFFLHNCQUFZO1FBQ3BCWixDQUFDLENBQUMsYUFBRCxDQUFELENBQWlCYSxJQUFqQixDQUFzQkMsVUFBdEI7UUFDQWQsQ0FBQyxDQUFDLFNBQUQsQ0FBRCxDQUFhZSxJQUFiO01BQ0gsQ0FSRTtNQVNIQyxPQUFPLEVBQUUsaUJBQUNOLElBQUQsRUFBVTtRQUNmVixDQUFDLENBQUMsU0FBRCxDQUFELENBQWFpQixJQUFiO1FBQ0FDLE9BQU8sQ0FBQ0MsTUFBUixDQUFlVCxJQUFJLENBQUMsTUFBRCxDQUFuQixFQUE2QjtVQUN6QlUsUUFBUSxFQUFFLFdBRGU7VUFFekJDLEdBQUcsRUFBRVgsSUFBSSxDQUFDLFNBQUQ7UUFGZ0IsQ0FBN0I7O1FBSUEsSUFBSUEsSUFBSSxDQUFDLGNBQUQsQ0FBUixFQUEwQjtVQUN0QlksUUFBUSxDQUFDQyxJQUFULEdBQWdCYixJQUFJLENBQUMsY0FBRCxDQUFwQjtRQUNIO01BRUosQ0FuQkU7TUFvQkhjLEtBQUssRUFBRSxlQUFVZCxJQUFWLEVBQWdCO1FBQ25CLElBQUlBLElBQUksQ0FBQ2UsWUFBTCxDQUFrQkMsT0FBbEIsSUFBNkIsa0JBQWpDLEVBQXFEO1VBQ2pEUixPQUFPLENBQUNDLE1BQVIsQ0FBZSxPQUFmLEVBQXdCO1lBQ3BCQyxRQUFRLEVBQUUsV0FEVTtZQUVwQkMsR0FBRyxFQUFFO1VBRmUsQ0FBeEI7VUFJQU0sTUFBTSxDQUFDTCxRQUFQLENBQWdCQyxJQUFoQixHQUF1QkssUUFBUSxHQUFHLGdCQUFsQztRQUNIOztRQUNENUIsQ0FBQyxDQUFDLFNBQUQsQ0FBRCxDQUFhaUIsSUFBYjtNQUNIO0lBN0JFLENBQVA7RUErQkgsQ0FsQ0Q7QUFtQ0g7O0FBSUQsSUFBSW5CLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixvQkFBeEIsQ0FBSixFQUFtRDtFQUFBLElBdVB0QzhCLGNBdlBzQyxHQXVQL0MsU0FBU0EsY0FBVCxHQUEwQjtJQUV0QixJQUFJQyxVQUFVLEdBQUc5QixDQUFDLENBQUMsaUJBQUQsQ0FBRCxDQUFxQkksR0FBckIsRUFBakI7SUFDQSxJQUFJMkIsUUFBUSxHQUFHL0IsQ0FBQyxDQUFDLGtCQUFELENBQUQsQ0FBc0JJLEdBQXRCLEVBQWY7SUFDQSxJQUFJNEIsT0FBTyxHQUFHLElBQUlDLElBQUosQ0FBU0YsUUFBVCxDQUFkO0lBQ0EsSUFBSUcsU0FBUyxHQUFHLElBQUlELElBQUosQ0FBU0gsVUFBVCxDQUFoQjtJQUNBLElBQUlLLFFBQVEsR0FBR0MsSUFBSSxDQUFDQyxHQUFMLENBQVNMLE9BQU8sR0FBR0UsU0FBbkIsQ0FBZjtJQUNBLElBQUlJLFFBQVEsR0FBR0YsSUFBSSxDQUFDRyxJQUFMLENBQVVKLFFBQVEsSUFBSSxPQUFPLEVBQVAsR0FBWSxFQUFaLEdBQWlCLEVBQXJCLENBQWxCLENBQWY7O0lBQ0EsSUFBSUssS0FBSyxDQUFDRixRQUFELENBQVQsRUFBcUI7TUFDakJBLFFBQVEsR0FBRyxDQUFYO0lBQ0g7O0lBQ0R0QyxDQUFDLENBQUMsV0FBRCxDQUFELENBQWVJLEdBQWYsQ0FBbUJrQyxRQUFuQjtFQUVILENBcFE4Qzs7RUFBQSxJQXNRdENHLGNBdFFzQyxHQXNRL0MsU0FBU0EsY0FBVCxHQUFzQztJQUFBLElBQWRDLE9BQWMsdUVBQUosRUFBSTtJQUNsQ0MsU0FBUyxHQUFHLENBQVo7SUFDQTNDLENBQUMsQ0FBQyxvQkFBRCxDQUFELENBQXdCSSxHQUF4QixDQUE0QixFQUE1QjtJQUNBSixDQUFDLENBQUMsbUJBQUQsQ0FBRCxDQUF1QkksR0FBdkIsQ0FBMkIsRUFBM0I7SUFDQUosQ0FBQyxDQUFDLHVCQUFELENBQUQsQ0FBMkJJLEdBQTNCLENBQStCLEVBQS9CO0lBQ0FKLENBQUMsQ0FBQyxpQkFBRCxDQUFELENBQXFCSSxHQUFyQixDQUF5QixFQUF6QjtJQUNBSixDQUFDLENBQUMsaUJBQUQsQ0FBRCxDQUFxQmEsSUFBckIsQ0FBMEIsQ0FBMUI7SUFDQWIsQ0FBQyxDQUFDLHVCQUFELENBQUQsQ0FBMkJpQixJQUEzQixHQUFrQzJCLFdBQWxDLENBQThDLFFBQTlDO0lBQ0E1QyxDQUFDLENBQUMsZUFBRCxDQUFELENBQW1CSSxHQUFuQixDQUF1QixFQUF2QjtJQUNBSixDQUFDLENBQUMsZ0JBQUQsQ0FBRCxDQUFvQkksR0FBcEIsQ0FBd0IsRUFBeEI7SUFDQUosQ0FBQyxDQUFDLHlCQUFELENBQUQsQ0FBNkJhLElBQTdCLENBQWtDLEVBQWxDO0lBQ0FiLENBQUMsQ0FBQyxvQkFBRCxDQUFELENBQXdCSSxHQUF4QixDQUE0QixFQUE1QjtJQUNBSixDQUFDLENBQUMsWUFBRCxDQUFELENBQWdCSSxHQUFoQixDQUFvQixFQUFwQjtJQUNBSixDQUFDLENBQUMsZUFBRCxDQUFELENBQW1CYSxJQUFuQixDQUF3QixPQUF4QixFQUFpQ2dDLFFBQWpDLENBQTBDLHVCQUExQyxFQUFtRUQsV0FBbkUsQ0FBK0UsT0FBL0U7SUFDQTVDLENBQUMsQ0FBQyxrQkFBRCxDQUFELENBQXNCYSxJQUF0QixDQUEyQixPQUEzQixFQUFvQytCLFdBQXBDLENBQWdELE9BQWhELEVBQXlEQyxRQUF6RCxDQUFrRSxNQUFsRTs7SUFDQSxJQUFJSCxPQUFPLElBQUksRUFBZixFQUFtQjtNQUNmeEIsT0FBTyxDQUFDQyxNQUFSLENBQWUsT0FBZixFQUF3QjtRQUNwQkMsUUFBUSxFQUFFLFdBRFU7UUFFcEJDLEdBQUcsRUFBRXFCO01BRmUsQ0FBeEI7SUFJSDs7SUFDREksZUFBZTtJQUNmO0VBRUgsQ0E5UjhDOztFQUFBLElBa1N0Q0MsVUFsU3NDLEdBa1MvQyxTQUFTQSxVQUFULEdBQXNCO0lBQ2xCLElBQUlDLFlBQVksR0FBR2hELENBQUMsQ0FBQyw4QkFBRCxDQUFELENBQWtDSSxHQUFsQyxFQUFuQjtJQUNBLElBQUk2QyxTQUFKOztJQUNBLElBQUlELFlBQVksSUFBSSxTQUFwQixFQUErQjtNQUMzQkMsU0FBUyxHQUFHakQsQ0FBQyxDQUFDLDJCQUFELENBQUQsQ0FBK0JJLEdBQS9CLEVBQVo7TUFDQThDLGVBQWUsR0FBR2xELENBQUMsQ0FBQyxjQUFELENBQUQsQ0FBa0JJLEdBQWxCLEtBQTBCNkMsU0FBNUM7SUFFSCxDQUpELE1BSU87TUFDSEEsU0FBUyxHQUFHakQsQ0FBQyxDQUFDLHFCQUFELENBQUQsQ0FBeUJJLEdBQXpCLEVBQVo7TUFDQUosQ0FBQyxDQUFDLHFCQUFELENBQUQsQ0FBeUJpQixJQUF6QixHQUFnQzJCLFdBQWhDLENBQTRDLFFBQTVDO0lBQ0g7O0lBQ0Q1QyxDQUFDLENBQUMsNEJBQUQsQ0FBRCxDQUFnQ2EsSUFBaEMsQ0FBcUMsTUFBTW9DLFNBQTNDO0lBQ0FqRCxDQUFDLENBQUMsNEJBQUQsQ0FBRCxDQUFnQ0ksR0FBaEMsQ0FBb0M2QyxTQUFwQzs7SUFDQSxJQUFJRSxNQUFNLElBQUksQ0FBZCxFQUFpQjtNQUNibkQsQ0FBQyxDQUFDLG1CQUFELENBQUQsQ0FBdUJvRCxJQUF2QixDQUE0QixVQUE1QixFQUF3QyxJQUF4QztNQUNBcEQsQ0FBQyxDQUFDLDJCQUFELENBQUQsQ0FBK0I2QyxRQUEvQixDQUF3QyxVQUF4QztJQUNIO0VBQ0osQ0FuVDhDOztFQUFBLElBcVR0Q1EsOEJBclRzQyxHQXFUL0MsU0FBU0EsOEJBQVQsR0FBMEM7SUFDdEMsSUFBSUMsYUFBYSxHQUFHdEQsQ0FBQyxDQUFDLG9CQUFELENBQUQsQ0FBd0JJLEdBQXhCLEVBQXBCO0lBQ0EsSUFBSW1ELGNBQWMsR0FBR3ZELENBQUMsQ0FBQyxjQUFELENBQUQsQ0FBa0JJLEdBQWxCLEVBQXJCOztJQUNBLElBQUltRCxjQUFjLElBQUksQ0FBbEIsSUFBdUJELGFBQWEsSUFBSSxFQUE1QyxFQUFnRDtNQUM1Q1osT0FBTyxHQUFHYSxjQUFjLElBQUksQ0FBbEIsR0FBc0IsNENBQXRCLEdBQXFFLHFDQUEvRTtNQUNBckMsT0FBTyxDQUFDQyxNQUFSLENBQWUsT0FBZixFQUF3QjtRQUNwQkMsUUFBUSxFQUFFLFdBRFU7UUFFcEJDLEdBQUcsRUFBRXFCO01BRmUsQ0FBeEI7SUFJSCxDQU5ELE1BTU87TUFDSCxJQUFJYyxnQkFBZ0IsR0FBR3hELENBQUMsQ0FBQyxrQkFBRCxDQUFELENBQXNCVSxJQUF0QixDQUEyQixLQUEzQixDQUF2QjtNQUNBVixDQUFDLENBQUNRLElBQUYsQ0FBTztRQUNIQyxJQUFJLEVBQUUsTUFESDtRQUVIRixHQUFHLEVBQUVpRCxnQkFGRjtRQUdIOUMsSUFBSSxFQUFFO1VBQ0YrQyxlQUFlLEVBQUVILGFBRGY7VUFFRkMsY0FBYyxFQUFFQSxjQUZkO1VBR0ZHLE1BQU0sRUFBRTFELENBQUMsQ0FBQyx5QkFBRCxDQUFELENBQTZCRyxJQUE3QixDQUFrQyxTQUFsQztRQUhOLENBSEg7UUFRSFMsVUFBVSxFQUFFLHNCQUFZO1VBQ3BCLElBQUlFLFVBQVUsR0FBR2QsQ0FBQyxDQUFDLElBQUQsQ0FBRCxDQUFRRyxJQUFSLENBQWEsYUFBYixDQUFqQjs7VUFDQUgsQ0FBQyxDQUFDLGFBQUQsQ0FBRCxDQUFpQmEsSUFBakIsQ0FBc0JDLFVBQXRCO1VBQ0FkLENBQUMsQ0FBQyxTQUFELENBQUQsQ0FBYWUsSUFBYjtRQUNILENBWkU7UUFhSDRDLFFBQVEsRUFBRSxvQkFBWTtVQUNsQjNELENBQUMsQ0FBQyxTQUFELENBQUQsQ0FBYWlCLElBQWI7UUFDSCxDQWZFO1FBZ0JIRCxPQUFPLEVBQUUsaUJBQVVOLElBQVYsRUFBZ0I7VUFDckJRLE9BQU8sQ0FBQ0MsTUFBUixDQUFlVCxJQUFJLENBQUMsTUFBRCxDQUFuQixFQUE2QjtZQUN6QlUsUUFBUSxFQUFFLFdBRGU7WUFFekJDLEdBQUcsRUFBRVgsSUFBSSxDQUFDLFNBQUQ7VUFGZ0IsQ0FBN0I7O1VBSUEsSUFBSUEsSUFBSSxDQUFDLGlCQUFELENBQUosSUFBMkJBLElBQUksQ0FBQyxlQUFELENBQS9CLElBQW9EQSxJQUFJLENBQUMsTUFBRCxDQUFKLElBQWdCLFNBQXhFLEVBQW1GO1lBQy9FVixDQUFDLENBQUMsb0JBQUQsQ0FBRCxDQUF3QkksR0FBeEIsQ0FBNEIsRUFBNUI7WUFDQUosQ0FBQyxDQUFDLFlBQUQsQ0FBRCxDQUFnQkksR0FBaEIsQ0FBb0IsRUFBcEI7WUFFQUosQ0FBQyxDQUFDLHVCQUFELENBQUQsQ0FBMkJJLEdBQTNCLENBQStCTSxJQUFJLENBQUMsV0FBRCxDQUFuQztZQUNBVixDQUFDLENBQUMsbUJBQUQsQ0FBRCxDQUF1QkksR0FBdkIsQ0FBMkJrRCxhQUEzQjtZQUNBdEQsQ0FBQyxDQUFDLGlCQUFELENBQUQsQ0FBcUJJLEdBQXJCLENBQXlCTSxJQUFJLENBQUMsaUJBQUQsQ0FBN0I7WUFDQVYsQ0FBQyxDQUFDLGlCQUFELENBQUQsQ0FBcUJhLElBQXJCLENBQTBCLE9BQU9ILElBQUksQ0FBQyxpQkFBRCxDQUFyQztZQUNBVixDQUFDLENBQUMsdUJBQUQsQ0FBRCxDQUEyQmUsSUFBM0IsR0FBa0M4QixRQUFsQyxDQUEyQyxRQUEzQztZQUNBN0MsQ0FBQyxDQUFDLGVBQUQsQ0FBRCxDQUFtQkksR0FBbkIsQ0FBdUJNLElBQUksQ0FBQyxlQUFELENBQTNCO1lBQ0FWLENBQUMsQ0FBQyxnQkFBRCxDQUFELENBQW9CSSxHQUFwQixDQUF3Qk0sSUFBSSxDQUFDLGlCQUFELENBQTVCO1lBQ0FWLENBQUMsQ0FBQyx5QkFBRCxDQUFELENBQTZCYSxJQUE3QixDQUFrQ0gsSUFBSSxDQUFDLGlCQUFELENBQUosR0FBMEIsS0FBNUQ7WUFDQVYsQ0FBQyxDQUFDLGtCQUFELENBQUQsQ0FBc0JhLElBQXRCLENBQTJCLFNBQTNCLEVBQXNDK0IsV0FBdEMsQ0FBa0QsTUFBbEQsRUFBMERDLFFBQTFELENBQW1FLE9BQW5FO1lBQ0E3QyxDQUFDLENBQUMsZUFBRCxDQUFELENBQW1CYSxJQUFuQixDQUF3QixPQUF4QixFQUFpQ2dDLFFBQWpDLENBQTBDLHVCQUExQyxFQUFtRUQsV0FBbkUsQ0FBK0UsT0FBL0U7VUFDSCxDQWRELE1BY087WUFDSDVDLENBQUMsQ0FBQyxvQkFBRCxDQUFELENBQXdCSSxHQUF4QixDQUE0QixFQUE1QjtZQUNBSixDQUFDLENBQUMsbUJBQUQsQ0FBRCxDQUF1QkksR0FBdkIsQ0FBMkIsRUFBM0I7WUFDQUosQ0FBQyxDQUFDLHVCQUFELENBQUQsQ0FBMkJJLEdBQTNCLENBQStCLEVBQS9CO1VBQ0g7O1VBRUQwQyxlQUFlO1FBQ2xCO01BMUNFLENBQVA7SUE2Q0g7RUFJSixDQWpYOEM7O0VBQUEsSUFtWHRDYyx1QkFuWHNDLEdBbVgvQyxTQUFTQSx1QkFBVCxHQUFtQztJQUUvQixJQUFJdEQsV0FBVyxHQUFHTixDQUFDLENBQUMsWUFBRCxDQUFELENBQWdCRyxJQUFoQixDQUFxQixrQkFBckIsQ0FBbEI7SUFDQSxJQUFJMEQsU0FBUyxHQUFHN0QsQ0FBQyxDQUFDLFlBQUQsQ0FBRCxDQUFnQkksR0FBaEIsRUFBaEI7SUFDQSxJQUFJbUQsY0FBYyxHQUFHdkQsQ0FBQyxDQUFDLGNBQUQsQ0FBRCxDQUFrQkksR0FBbEIsRUFBckI7O0lBQ0EsSUFBSXlELFNBQVMsSUFBSSxFQUFqQixFQUFxQjtNQUNqQixJQUFJbkIsT0FBSjs7TUFDQSxJQUFJMUMsQ0FBQyxDQUFDLGlCQUFELENBQUQsQ0FBcUJJLEdBQXJCLEtBQTZCLENBQWpDLEVBQW9DO1FBQ2hDSixDQUFDLENBQUMsaUJBQUQsQ0FBRCxDQUFxQkksR0FBckIsQ0FBeUIsRUFBekI7UUFDQUosQ0FBQyxDQUFDLGlCQUFELENBQUQsQ0FBcUJhLElBQXJCLENBQTBCLENBQTFCO1FBQ0FiLENBQUMsQ0FBQyx1QkFBRCxDQUFELENBQTJCaUIsSUFBM0IsR0FBa0MyQixXQUFsQyxDQUE4QyxRQUE5QztRQUNBNUMsQ0FBQyxDQUFDLGVBQUQsQ0FBRCxDQUFtQkksR0FBbkIsQ0FBdUIsRUFBdkI7UUFDQUosQ0FBQyxDQUFDLGdCQUFELENBQUQsQ0FBb0JJLEdBQXBCLENBQXdCLEVBQXhCO1FBQ0FKLENBQUMsQ0FBQyx5QkFBRCxDQUFELENBQTZCYSxJQUE3QixDQUFrQyxFQUFsQztRQUNBYixDQUFDLENBQUMsb0JBQUQsQ0FBRCxDQUF3QkksR0FBeEIsQ0FBNEIsRUFBNUI7UUFDQTBDLGVBQWUsR0FSaUIsQ0FVaEM7O1FBQ0FKLE9BQU8sR0FBRyxrQ0FBVjtNQUNILENBWkQsTUFhSztRQUNEQSxPQUFPLEdBQUcsMkJBQVY7TUFDSDs7TUFDRHhCLE9BQU8sQ0FBQ0MsTUFBUixDQUFlLE9BQWYsRUFBd0I7UUFDcEJDLFFBQVEsRUFBRSxXQURVO1FBRXBCQyxHQUFHLEVBQUVxQjtNQUZlLENBQXhCO01BSUE7SUFDSCxDQXZCRCxNQXVCTztNQUVILElBQUluQyxHQUFHLEdBQUdQLENBQUMsQ0FBQyxZQUFELENBQUQsQ0FBZ0JHLElBQWhCLENBQXFCLFVBQXJCLENBQVY7TUFDQUgsQ0FBQyxDQUFDUSxJQUFGLENBQU87UUFDSEMsSUFBSSxFQUFFLE1BREg7UUFFSEYsR0FBRyxFQUFFQSxHQUZGO1FBR0hHLElBQUksRUFBRTtVQUNGSixXQUFXLEVBQUVBLFdBRFg7VUFFRmlELGNBQWMsRUFBRUEsY0FGZDtVQUdGTSxTQUFTLEVBQUVBLFNBSFQ7VUFJRkgsTUFBTSxFQUFFMUQsQ0FBQyxDQUFDLHlCQUFELENBQUQsQ0FBNkJHLElBQTdCLENBQWtDLFNBQWxDO1FBSk4sQ0FISDtRQVNIUyxVQUFVLEVBQUUsc0JBQVk7VUFDcEIsSUFBSUUsVUFBVSxHQUFHZCxDQUFDLENBQUMsZUFBRCxDQUFELENBQW1CRyxJQUFuQixDQUF3QixhQUF4QixDQUFqQjs7VUFDQUgsQ0FBQyxDQUFDLGFBQUQsQ0FBRCxDQUFpQmEsSUFBakIsQ0FBc0JDLFVBQXRCO1VBQ0FkLENBQUMsQ0FBQyxTQUFELENBQUQsQ0FBYWUsSUFBYjtRQUNILENBYkU7UUFjSDRDLFFBQVEsRUFBRSxvQkFBWTtVQUNsQjNELENBQUMsQ0FBQyxTQUFELENBQUQsQ0FBYWlCLElBQWI7UUFDSCxDQWhCRTtRQWlCSEQsT0FBTyxFQUFFLGlCQUFVTixJQUFWLEVBQWdCO1VBQ3JCUSxPQUFPLENBQUNDLE1BQVIsQ0FBZVQsSUFBSSxDQUFDLE1BQUQsQ0FBbkIsRUFBNkI7WUFDekJVLFFBQVEsRUFBRSxXQURlO1lBRXpCQyxHQUFHLEVBQUVYLElBQUksQ0FBQyxTQUFEO1VBRmdCLENBQTdCOztVQUlBLElBQUlBLElBQUksQ0FBQyxpQkFBRCxDQUFKLElBQTJCQSxJQUFJLENBQUMsZUFBRCxDQUEvQixJQUFvREEsSUFBSSxDQUFDLE1BQUQsQ0FBSixJQUFnQixTQUF4RSxFQUFtRjtZQUUvRVYsQ0FBQyxDQUFDLHVCQUFELENBQUQsQ0FBMkJlLElBQTNCOztZQUNBLElBQUksQ0FBQ2YsQ0FBQyxDQUFDLHVCQUFELENBQUQsQ0FBMkI4RCxRQUEzQixDQUFvQyxRQUFwQyxDQUFMLEVBQW9EO2NBQ2hEOUQsQ0FBQyxDQUFDLHVCQUFELENBQUQsQ0FBMkI2QyxRQUEzQixDQUFvQyxRQUFwQztZQUNIOztZQUVEN0MsQ0FBQyxDQUFDLGlCQUFELENBQUQsQ0FBcUJJLEdBQXJCLENBQXlCTSxJQUFJLENBQUMsaUJBQUQsQ0FBN0I7WUFDQVYsQ0FBQyxDQUFDLGlCQUFELENBQUQsQ0FBcUJhLElBQXJCLENBQTBCLE9BQU9ILElBQUksQ0FBQyxpQkFBRCxDQUFyQztZQUNBVixDQUFDLENBQUMsdUJBQUQsQ0FBRCxDQUEyQmUsSUFBM0IsR0FBa0M4QixRQUFsQyxDQUEyQyxRQUEzQztZQUNBN0MsQ0FBQyxDQUFDLGVBQUQsQ0FBRCxDQUFtQkksR0FBbkIsQ0FBdUJNLElBQUksQ0FBQyxlQUFELENBQTNCO1lBQ0FWLENBQUMsQ0FBQyxnQkFBRCxDQUFELENBQW9CSSxHQUFwQixDQUF3Qk0sSUFBSSxDQUFDLGlCQUFELENBQTVCO1lBQ0FWLENBQUMsQ0FBQyx1QkFBRCxDQUFELENBQTJCSSxHQUEzQixDQUErQk0sSUFBSSxDQUFDLGtCQUFELENBQW5DOztZQUNBLElBQUlBLElBQUksQ0FBQyxlQUFELENBQUosSUFBeUIsVUFBN0IsRUFBeUM7Y0FDckNWLENBQUMsQ0FBQyx5QkFBRCxDQUFELENBQTZCYSxJQUE3QixDQUFrQyxPQUFPSCxJQUFJLENBQUMsaUJBQUQsQ0FBN0M7WUFDSCxDQUZELE1BRU87Y0FDSFYsQ0FBQyxDQUFDLHlCQUFELENBQUQsQ0FBNkJhLElBQTdCLENBQWtDSCxJQUFJLENBQUMsaUJBQUQsQ0FBSixHQUEwQixLQUE1RDtZQUNIOztZQUVEVixDQUFDLENBQUMsb0JBQUQsQ0FBRCxDQUF3QkksR0FBeEIsQ0FBNEJ5RCxTQUE1QjtZQUNBN0QsQ0FBQyxDQUFDLGVBQUQsQ0FBRCxDQUFtQmEsSUFBbkIsQ0FBd0IsU0FBeEIsRUFBbUMrQixXQUFuQyxDQUErQyx1QkFBL0MsRUFBd0VDLFFBQXhFLENBQWlGLE9BQWpGO1VBQ0gsQ0FyQkQsTUFxQk87WUFDSDdDLENBQUMsQ0FBQyxZQUFELENBQUQsQ0FBZ0JJLEdBQWhCLENBQW9CLEVBQXBCO1lBQ0FKLENBQUMsQ0FBQyxvQkFBRCxDQUFELENBQXdCSSxHQUF4QixDQUE0QixFQUE1QjtZQUNBSixDQUFDLENBQUMsdUJBQUQsQ0FBRCxDQUEyQmlCLElBQTNCLEdBQWtDMkIsV0FBbEMsQ0FBOEMsUUFBOUM7VUFHSDs7VUFDRDVDLENBQUMsQ0FBQyxrQkFBRCxDQUFELENBQXNCYSxJQUF0QixDQUEyQixPQUEzQixFQUFvQytCLFdBQXBDLENBQWdELE9BQWhELEVBQXlEQyxRQUF6RCxDQUFrRSxNQUFsRTtVQUNBN0MsQ0FBQyxDQUFDLG9CQUFELENBQUQsQ0FBd0JJLEdBQXhCLENBQTRCLEVBQTVCO1VBQ0FKLENBQUMsQ0FBQyxtQkFBRCxDQUFELENBQXVCSSxHQUF2QixDQUEyQixFQUEzQjtVQUNBSixDQUFDLENBQUMsdUJBQUQsQ0FBRCxDQUEyQkksR0FBM0IsQ0FBK0IsRUFBL0I7VUFDQTBDLGVBQWU7UUFDbEI7TUF2REUsQ0FBUDtJQXlESDtFQUVKLENBN2M4Qzs7RUFBQSxJQStjdENBLGVBL2NzQyxHQStjL0MsU0FBU0EsZUFBVCxHQUEyQjtJQUN2QmpCLGNBQWM7SUFDZGtDLFdBQVc7SUFDWCxJQUFJQyxvQkFBb0IsR0FBR2hFLENBQUMsQ0FBQyx1QkFBRCxDQUFELENBQTJCSSxHQUEzQixFQUEzQjtJQUNBLElBQUk2RCxnQkFBZ0IsR0FBR2pFLENBQUMsQ0FBQyxtQkFBRCxDQUFELENBQXVCSSxHQUF2QixFQUF2Qjs7SUFDQSxJQUFJOEQsVUFBSixFQUFnQjtNQUNaQyxjQUFjO0lBQ2pCOztJQUNELElBQUlDLFdBQVcsR0FBR3BFLENBQUMsQ0FBQyxjQUFELENBQUQsQ0FBa0JJLEdBQWxCLEVBQWxCO0lBQ0EsSUFBSWlFLGNBQWMsR0FBR3JFLENBQUMsQ0FBQyxpQkFBRCxDQUFELENBQXFCSSxHQUFyQixFQUFyQjtJQUNBLElBQUlrRSxZQUFZLEdBQUd0RSxDQUFDLENBQUMsZUFBRCxDQUFELENBQW1CSSxHQUFuQixFQUFuQjtJQUNBLElBQUltRSxRQUFRLEdBQUd2RSxDQUFDLENBQUMsV0FBRCxDQUFELENBQWVJLEdBQWYsRUFBZjs7SUFDQSxJQUFJbUUsUUFBUSxJQUFJLENBQWhCLEVBQW1CO01BQ2Z2RSxDQUFDLENBQUMsbUJBQUQsQ0FBRCxDQUF1QmlCLElBQXZCLEdBQThCMkIsV0FBOUIsQ0FBMEMsUUFBMUM7SUFDSCxDQUZELE1BRU87TUFDSDVDLENBQUMsQ0FBQyxtQkFBRCxDQUFELENBQXVCZSxJQUF2QixHQUE4QjhCLFFBQTlCLENBQXVDLFFBQXZDO0lBQ0g7O0lBRUQsSUFBSTBCLFFBQVEsSUFBSSxDQUFoQixFQUFtQjtNQUNmSCxXQUFXLEdBQUdBLFdBQVcsR0FBR0csUUFBNUI7SUFDSDs7SUFDRCxJQUFJRCxZQUFZLElBQUksRUFBaEIsSUFBc0JBLFlBQVksSUFBSSxZQUExQyxFQUF3RDtNQUNwRCxJQUFJRSxhQUFhLEdBQUd4RSxDQUFDLENBQUMsZ0JBQUQsQ0FBRCxDQUFvQkksR0FBcEIsRUFBcEI7TUFDQWlFLGNBQWMsR0FBR0QsV0FBVyxHQUFJQSxXQUFXLElBQUksQ0FBQyxNQUFNSSxhQUFQLElBQXdCLEdBQTVCLENBQTNDO01BRUF4RSxDQUFDLENBQUMsaUJBQUQsQ0FBRCxDQUFxQkksR0FBckIsQ0FBeUJpRSxjQUF6QjtNQUNBckUsQ0FBQyxDQUFDLGlCQUFELENBQUQsQ0FBcUJhLElBQXJCLENBQTBCLFFBQVF3RCxjQUFsQztJQUNIOztJQUVELElBQUlDLFlBQVksSUFBSSxFQUFoQixJQUFzQkEsWUFBWSxJQUFJLFVBQXRDLElBQW9ERCxjQUFjLElBQUlELFdBQTFFLEVBQXVGO01BQ25GQyxjQUFjLEdBQUcsQ0FBakI7TUFDQXJFLENBQUMsQ0FBQyxpQkFBRCxDQUFELENBQXFCSSxHQUFyQixDQUF5QmlFLGNBQXpCO01BQ0FyRSxDQUFDLENBQUMsaUJBQUQsQ0FBRCxDQUFxQmEsSUFBckIsQ0FBMEIsUUFBUXdELGNBQWxDO01BQ0FyRSxDQUFDLENBQUMsdUJBQUQsQ0FBRCxDQUEyQmlCLElBQTNCLEdBQWtDMkIsV0FBbEMsQ0FBOEMsUUFBOUM7TUFDQTVDLENBQUMsQ0FBQyxlQUFELENBQUQsQ0FBbUJJLEdBQW5CLENBQXVCLEVBQXZCO01BQ0FKLENBQUMsQ0FBQyxnQkFBRCxDQUFELENBQW9CSSxHQUFwQixDQUF3QixFQUF4QjtJQUNIOztJQUVESixDQUFDLENBQUMsZ0JBQUQsQ0FBRCxDQUFvQmEsSUFBcEIsQ0FBeUIwRCxRQUFRLEdBQUcsT0FBcEM7SUFDQXZFLENBQUMsQ0FBQyxjQUFELENBQUQsQ0FBa0JJLEdBQWxCLENBQXNCZ0UsV0FBdEI7SUFDQXBFLENBQUMsQ0FBQyxjQUFELENBQUQsQ0FBa0JhLElBQWxCLENBQXVCLE9BQU91RCxXQUE5Qjs7SUFDQSxJQUFJSyxRQUFRLENBQUNKLGNBQUQsQ0FBUixHQUEyQixDQUEvQixFQUFrQztNQUM5QnJFLENBQUMsQ0FBQyxxQkFBRCxDQUFELENBQXlCSSxHQUF6QixDQUE2QmdFLFdBQVcsR0FBR0MsY0FBM0M7TUFDQXJFLENBQUMsQ0FBQyxxQkFBRCxDQUFELENBQXlCYSxJQUF6QixDQUE4QixRQUFRdUQsV0FBVyxHQUFHQyxjQUF0QixDQUE5QjtJQUNILENBSEQsTUFHTztNQUNIckUsQ0FBQyxDQUFDLHFCQUFELENBQUQsQ0FBeUJJLEdBQXpCLENBQTZCZ0UsV0FBN0I7TUFDQXBFLENBQUMsQ0FBQyxxQkFBRCxDQUFELENBQXlCYSxJQUF6QixDQUE4QixPQUFPdUQsV0FBckM7SUFDSDs7SUFDRE0seUJBQXlCO0lBQ3pCM0IsVUFBVTtJQUNWLElBQUk0Qix3QkFBd0IsR0FBRzNFLENBQUMsQ0FBQywyQkFBRCxDQUFELENBQStCSSxHQUEvQixFQUEvQjs7SUFDQSxJQUFLZ0UsV0FBVyxJQUFJLENBQWhCLElBQXVCSixvQkFBb0IsSUFBSSxDQUF4QixJQUE2Qlcsd0JBQXdCLElBQUksQ0FBaEYsSUFBdUZWLGdCQUFnQixJQUFJLEVBQXBCLElBQTBCVSx3QkFBd0IsSUFBSSxDQUFqSixFQUFxSjtNQUVqSixJQUFJWCxvQkFBb0IsSUFBSSxDQUE1QixFQUErQjtRQUMzQnRCLE9BQU8sR0FBRyxxREFBVjtNQUNILENBRkQsTUFFTyxJQUFJdUIsZ0JBQWdCLElBQUksRUFBeEIsRUFBNEI7UUFDL0J2QixPQUFPLEdBQUcsd0VBQVY7TUFDSCxDQUZNLE1BR0Y7UUFDREEsT0FBTyxHQUFHLDZDQUFWO01BQ0g7O01BRUQsSUFBSVMsTUFBTSxJQUFJLENBQVYsSUFBZVIsU0FBUyxJQUFJLENBQTVCLElBQWlDMEIsY0FBYyxHQUFHLENBQXRELEVBQXlEO1FBQ3JENUIsY0FBYyxDQUFDQyxPQUFELENBQWQ7TUFDSDtJQUVKOztJQUNELElBQUlTLE1BQU0sSUFBSSxDQUFkLEVBQWlCO01BQ2JSLFNBQVMsR0FBRyxDQUFaO01BQ0EzQyxDQUFDLENBQUMsbUJBQUQsQ0FBRCxDQUF1Qm9ELElBQXZCLENBQTRCLFVBQTVCLEVBQXdDLElBQXhDO01BQ0FwRCxDQUFDLENBQUMsMkJBQUQsQ0FBRCxDQUErQjZDLFFBQS9CLENBQXdDLFVBQXhDO0lBQ0g7O0lBQ0RNLE1BQU0sR0FBRyxDQUFUO0VBRUgsQ0F6aEI4Qzs7RUFBQSxJQTJoQnRDZ0IsY0EzaEJzQyxHQTJoQi9DLFNBQVNBLGNBQVQsR0FBMEI7SUFFdEIsSUFBSVMsR0FBRyxHQUFHLENBQVY7SUFDQTVFLENBQUMsQ0FBQyxtQkFBRCxDQUFELENBQXVCNkUsSUFBdkIsQ0FBNEIsWUFBWTtNQUNwQ0QsR0FBRyxJQUFJLENBQUM1RSxDQUFDLENBQUMsSUFBRCxDQUFELENBQVFHLElBQVIsQ0FBYSxtQkFBYixDQUFSO0lBQ0gsQ0FGRDtJQUdBSCxDQUFDLENBQUMsY0FBRCxDQUFELENBQWtCSSxHQUFsQixDQUFzQndFLEdBQXRCO0VBQ0gsQ0FsaUI4Qzs7RUFBQSxJQW9pQnRDYixXQXBpQnNDLEdBb2lCL0MsU0FBU0EsV0FBVCxHQUF1QjtJQUVuQixJQUFJLENBQUNHLFVBQUwsRUFBaUI7TUFDYmxFLENBQUMsQ0FBQyxlQUFELENBQUQsQ0FBbUJJLEdBQW5CLENBQXVCSixDQUFDLENBQUMsbUJBQUQsQ0FBRCxDQUF1QkksR0FBdkIsRUFBdkI7TUFDQUosQ0FBQyxDQUFDLGNBQUQsQ0FBRCxDQUFrQmEsSUFBbEIsQ0FBdUJiLENBQUMsQ0FBQyxtQkFBRCxDQUFELENBQXVCSSxHQUF2QixFQUF2QjtNQUNBO0lBQ0g7O0lBQ0QsSUFBSXdFLEdBQUcsR0FBRyxDQUFWO0lBQ0E1RSxDQUFDLENBQUMsbUJBQUQsQ0FBRCxDQUF1QjZFLElBQXZCLENBQTRCLFlBQVk7TUFDcENELEdBQUcsSUFBSSxDQUFDNUUsQ0FBQyxDQUFDLElBQUQsQ0FBRCxDQUFRSSxHQUFSLEVBQVI7SUFDSCxDQUZEO0lBR0FKLENBQUMsQ0FBQyxlQUFELENBQUQsQ0FBbUJJLEdBQW5CLENBQXVCd0UsR0FBdkIsRUFYbUIsQ0FZbkI7O0lBQ0EsSUFBSUUsTUFBTSxHQUFHRixHQUFHLElBQUksQ0FBUCxHQUFXQSxHQUFHLEdBQUcsU0FBakIsR0FBNkJBLEdBQUcsR0FBRyxVQUFoRDtJQUNBNUUsQ0FBQyxDQUFDLGNBQUQsQ0FBRCxDQUFrQmEsSUFBbEIsQ0FBdUJpRSxNQUF2QjtFQUNILENBbmpCOEM7O0VBQUEsSUFxakJ0Q0oseUJBcmpCc0MsR0FxakIvQyxTQUFTQSx5QkFBVCxHQUFxQztJQUdqQyxJQUFJTixXQUFXLEdBQUdwRSxDQUFDLENBQUMsY0FBRCxDQUFELENBQWtCSSxHQUFsQixFQUFsQjtJQUNBLElBQUkyRSxrQkFBa0IsR0FBRy9FLENBQUMsQ0FBQyxjQUFELENBQUQsQ0FBa0JJLEdBQWxCLEVBQXpCO0lBQ0EsSUFBSTRFLFdBQVcsR0FBRzVDLElBQUksQ0FBQzZDLEtBQUwsQ0FBV2IsV0FBVyxJQUFJVyxrQkFBa0IsR0FBRyxHQUF6QixDQUF0QixDQUFsQjtJQUNBLElBQUlmLG9CQUFvQixHQUFHaEUsQ0FBQyxDQUFDLHVCQUFELENBQUQsQ0FBMkJJLEdBQTNCLEVBQTNCO0lBQ0EsSUFBSWlFLGNBQWMsR0FBR3JFLENBQUMsQ0FBQyxpQkFBRCxDQUFELENBQXFCSSxHQUFyQixFQUFyQjs7SUFDQSxJQUFLNEQsb0JBQW9CLElBQUksQ0FBeEIsSUFBNkJLLGNBQWMsR0FBRyxDQUEvQyxJQUFxREosZ0JBQWdCLElBQUksRUFBN0UsRUFBaUY7TUFDN0VlLFdBQVcsR0FBR0EsV0FBVyxHQUFHWCxjQUE1QjtJQUNIOztJQUVEckUsQ0FBQyxDQUFDLDJCQUFELENBQUQsQ0FBK0JJLEdBQS9CLENBQW1DNEUsV0FBbkM7SUFDQWhGLENBQUMsQ0FBQywrQkFBRCxDQUFELENBQW1DYSxJQUFuQyxDQUF3QyxNQUFNbUUsV0FBOUM7RUFDSCxDQW5rQjhDOztFQUUvQyxJQUFJRSxZQUFZLEdBQUdsRixDQUFDLENBQUMsbUJBQUQsQ0FBRCxDQUF1QkksR0FBdkIsRUFBbkI7RUFDQSxJQUFNOEQsVUFBVSxHQUFHLENBQUMsV0FBRCxFQUFjLGFBQWQsRUFBNkIsbUJBQTdCLEVBQWtEaUIsSUFBbEQsQ0FBdUQsVUFBQUMsT0FBTztJQUFBLE9BQUlBLE9BQU8sSUFBSUYsWUFBZjtFQUFBLENBQTlELENBQW5CO0VBQ0EsSUFBTUcsZ0JBQWdCLEdBQUcsQ0FBQyxhQUFELEVBQWdCLG1CQUFoQixFQUFxQyxVQUFyQyxFQUFpREYsSUFBakQsQ0FBc0QsVUFBQUMsT0FBTztJQUFBLE9BQUlBLE9BQU8sSUFBSUYsWUFBZjtFQUFBLENBQTdELENBQXpCO0VBQ0EsSUFBTUksVUFBVSxHQUFHSixZQUFZLElBQUksTUFBbkM7RUFDQSxJQUFNSyxVQUFVLEdBQUdMLFlBQVksSUFBSSxVQUFuQztFQUNBLElBQU1NLE9BQU8sR0FBR04sWUFBWSxJQUFJLGFBQWhDO0VBQ0EsSUFBSXZDLFNBQVMsR0FBRyxDQUFoQjtFQUNBLElBQUlRLE1BQU0sR0FBRyxDQUFiO0VBR0FMLGVBQWUsR0FaZ0MsQ0FjL0M7RUFDQTtFQUNBO0VBQ0E7RUFDQTs7RUFFQSxJQUFJMkMsT0FBTyxHQUFHLElBQUl4RCxJQUFKLEVBQWQ7RUFDQSxJQUFJeUQsV0FBVyxHQUFHMUYsQ0FBQyxDQUFDLGlCQUFELENBQUQsQ0FBcUJJLEdBQXJCLEVBQWxCO0VBQ0EsSUFBSXVGLFlBQVksR0FBRzNGLENBQUMsQ0FBQyxrQkFBRCxDQUFELENBQXNCSSxHQUF0QixFQUFuQjtFQUNBLElBQUl3RixLQUFLLEdBQUcsSUFBSTNELElBQUosQ0FBU3dELE9BQU8sQ0FBQ0ksV0FBUixFQUFULEVBQWdDSixPQUFPLENBQUNLLFFBQVIsRUFBaEMsRUFBb0RMLE9BQU8sQ0FBQ00sT0FBUixFQUFwRCxFQUF1RSxDQUF2RSxFQUEwRSxDQUExRSxFQUE2RSxDQUE3RSxFQUFnRixDQUFoRixDQUFaO0VBQ0EsSUFBSUMsWUFBSjtFQUVBaEcsQ0FBQyxDQUFDLGtCQUFELENBQUQsQ0FBc0JpRyxlQUF0QixDQUFzQztJQUNsQ0MsZ0JBQWdCLEVBQUUsSUFEZ0I7SUFFbENoRSxTQUFTLEVBQUV3RCxXQUFXLEdBQUcsSUFBSXpELElBQUosQ0FBU3lELFdBQVQsQ0FBSCxHQUEyQixJQUFJekQsSUFBSixFQUZmO0lBR2xDa0UsU0FBUyxFQUFFLElBSHVCO0lBSWxDQyxZQUFZLEVBQUUsSUFKb0I7SUFLbENDLFdBQVcsRUFBRSxFQUxxQjtJQU1sQ0MsV0FBVyxFQUFFLEdBTnFCO0lBT2xDQyxvQkFBb0IsRUFBRSxJQVBZO0lBUWxDQyxPQUFPLEVBQUVaLEtBUnlCO0lBU2xDYSxLQUFLLEVBQUVDLFdBQVcsQ0FBQ0MsR0FBWixHQUFrQixPQUFsQixHQUE0QixNQVREO0lBVWxDQyxNQUFNLEVBQUU7TUFDSkMsTUFBTSxFQUFFLFlBREo7TUFFSkMsU0FBUyxFQUFFSixXQUFXLENBQUNDLEdBQVosR0FBa0IsS0FBbEIsR0FBMEIsS0FGakM7TUFHSkksUUFBUSxFQUFFQyxxQkFBcUIsQ0FBQ0M7SUFINUI7RUFWMEIsQ0FBdEMsRUFlRyxVQUFVQyxLQUFWLEVBQWlCQyxHQUFqQixFQUFzQkMsS0FBdEIsRUFBNkI7SUFFNUJwSCxDQUFDLENBQUMsaUJBQUQsQ0FBRCxDQUFxQkksR0FBckIsQ0FBeUI4RyxLQUFLLENBQUNMLE1BQU4sQ0FBYSxZQUFiLENBQXpCO0lBQ0EsSUFBSS9FLFVBQVUsR0FBRzlCLENBQUMsQ0FBQyxpQkFBRCxDQUFELENBQXFCSSxHQUFyQixFQUFqQjtJQUNBLElBQUkyQixRQUFRLEdBQUcvQixDQUFDLENBQUMsa0JBQUQsQ0FBRCxDQUFzQkksR0FBdEIsRUFBZjs7SUFDQSxJQUFJMEIsVUFBVSxHQUFHQyxRQUFiLElBQXlCQSxRQUFRLElBQUksRUFBekMsRUFBNkM7TUFDekNBLFFBQVEsR0FBRy9CLENBQUMsQ0FBQyxrQkFBRCxDQUFELENBQXNCSSxHQUF0QixDQUEwQjBCLFVBQTFCLENBQVg7TUFDQUEsVUFBVSxHQUFHOUIsQ0FBQyxDQUFDLGlCQUFELENBQUQsQ0FBcUJJLEdBQXJCLENBQXlCMEIsVUFBekIsQ0FBYjtNQUNBOUIsQ0FBQyxDQUFDLG1CQUFELENBQUQsQ0FBdUJhLElBQXZCLENBQTRCLHVFQUF1RXFHLEtBQUssQ0FBQ0wsTUFBTixDQUFhSCxXQUFXLENBQUNXLHFCQUF6QixDQUFuRztNQUNBckgsQ0FBQyxDQUFDLGtCQUFELENBQUQsQ0FBc0JhLElBQXRCLENBQTJCLHVFQUF1RXFHLEtBQUssQ0FBQ0wsTUFBTixDQUFhSCxXQUFXLENBQUNXLHFCQUF6QixDQUFsRztJQUNILENBTEQsTUFLTztNQUNIckgsQ0FBQyxDQUFDLGtCQUFELENBQUQsQ0FBc0JhLElBQXRCLENBQTJCLHVFQUF1RXFHLEtBQUssQ0FBQ0wsTUFBTixDQUFhSCxXQUFXLENBQUNXLHFCQUF6QixDQUFsRztJQUNIOztJQUNELElBQUloQyxnQkFBSixFQUFzQjtNQUNsQnhELGNBQWM7TUFDZGlCLGVBQWU7SUFDbEI7RUFFSixDQWpDRDtFQW9DQTlDLENBQUMsQ0FBQyxtQkFBRCxDQUFELENBQXVCaUcsZUFBdkIsQ0FBdUM7SUFDbkNDLGdCQUFnQixFQUFFLElBRGlCO0lBRW5DQyxTQUFTLEVBQUUsSUFGd0I7SUFHbkNqRSxTQUFTLEVBQUV5RCxZQUFZLEdBQUcsSUFBSTFELElBQUosQ0FBUzBELFlBQVQsQ0FBSCxHQUE0QixJQUFJMUQsSUFBSixFQUhoQjtJQUluQ21FLFlBQVksRUFBRSxJQUpxQjtJQUtuQ0MsV0FBVyxFQUFFLEVBTHNCO0lBTW5DQyxXQUFXLEVBQUUsR0FOc0I7SUFPbkNDLG9CQUFvQixFQUFFLElBUGE7SUFRbkNDLE9BQU8sRUFBRWQsV0FBVyxHQUFHLElBQUl6RCxJQUFKLENBQVN5RCxXQUFULENBQUgsR0FBMkIsSUFBSXpELElBQUosRUFSWjtJQVNuQ3dFLEtBQUssRUFBRUMsV0FBVyxDQUFDQyxHQUFaLEdBQWtCLE9BQWxCLEdBQTRCLE1BVEE7SUFVbkNDLE1BQU0sRUFBRTtNQUNKQyxNQUFNLEVBQUUsWUFESjtNQUVKQyxTQUFTLEVBQUVKLFdBQVcsQ0FBQ0MsR0FBWixHQUFrQixLQUFsQixHQUEwQixLQUZqQztNQUdKSSxRQUFRLEVBQUVDLHFCQUFxQixDQUFDQztJQUg1QjtFQVYyQixDQUF2QyxFQWVHLFVBQVVDLEtBQVYsRUFBaUJDLEdBQWpCLEVBQXNCQyxLQUF0QixFQUE2QjtJQUU1QnBILENBQUMsQ0FBQyxrQkFBRCxDQUFELENBQXNCSSxHQUF0QixDQUEwQitHLEdBQUcsQ0FBQ04sTUFBSixDQUFXLFlBQVgsQ0FBMUI7SUFDQSxJQUFJL0UsVUFBVSxHQUFHOUIsQ0FBQyxDQUFDLGlCQUFELENBQUQsQ0FBcUJJLEdBQXJCLEVBQWpCO0lBQ0EsSUFBSTJCLFFBQVEsR0FBRy9CLENBQUMsQ0FBQyxrQkFBRCxDQUFELENBQXNCSSxHQUF0QixFQUFmOztJQUNBLElBQUkyQixRQUFRLEdBQUdELFVBQWYsRUFBMkI7TUFDdkJBLFVBQVUsR0FBRzlCLENBQUMsQ0FBQyxrQkFBRCxDQUFELENBQXNCSSxHQUF0QixDQUEwQjJCLFFBQTFCLENBQWI7TUFDQUEsUUFBUSxHQUFHL0IsQ0FBQyxDQUFDLGlCQUFELENBQUQsQ0FBcUJJLEdBQXJCLENBQXlCMkIsUUFBekIsQ0FBWDtNQUNBL0IsQ0FBQyxDQUFDLG1CQUFELENBQUQsQ0FBdUJhLElBQXZCLENBQTRCLHVFQUF1RXNHLEdBQUcsQ0FBQ04sTUFBSixDQUFXSCxXQUFXLENBQUNXLHFCQUF2QixDQUFuRztNQUNBckgsQ0FBQyxDQUFDLGtCQUFELENBQUQsQ0FBc0JhLElBQXRCLENBQTJCLHVFQUF1RXNHLEdBQUcsQ0FBQ04sTUFBSixDQUFXSCxXQUFXLENBQUNXLHFCQUF2QixDQUFsRztJQUNILENBTEQsTUFLTztNQUNIckgsQ0FBQyxDQUFDLG1CQUFELENBQUQsQ0FBdUJhLElBQXZCLENBQTRCLHVFQUF1RXNHLEdBQUcsQ0FBQ04sTUFBSixDQUFXSCxXQUFXLENBQUNXLHFCQUF2QixDQUFuRztJQUNIOztJQUNELElBQUloQyxnQkFBSixFQUFzQjtNQUNsQnhELGNBQWM7TUFDZGlCLGVBQWU7SUFDbEI7RUFJSixDQW5DRDs7RUEwQ0EsSUFBSXdDLFVBQUosRUFBZ0I7SUFFWixJQUFJZ0MsV0FBVyxHQUFHdEgsQ0FBQyxDQUFDLFVBQUQsQ0FBRCxDQUFjSSxHQUFkLEdBQW9CbUgsT0FBcEIsQ0FBNEIsS0FBNUIsRUFBbUMsRUFBbkMsQ0FBbEI7SUFDQXZILENBQUMsQ0FBQyxpQkFBRCxDQUFELENBQXFCNkUsSUFBckIsQ0FBMEIsWUFBWTtNQUNsQyxJQUFJMkMsU0FBUyxHQUFHeEgsQ0FBQyxDQUFDLElBQUQsQ0FBRCxDQUFRRyxJQUFSLENBQWEsa0JBQWIsQ0FBaEI7TUFDQSxJQUFJc0gsS0FBSyxHQUFHekgsQ0FBQyxDQUFDLE1BQU13SCxTQUFOLEdBQWtCLEVBQW5CLENBQWI7TUFDQSxJQUFJRSxXQUFXLEdBQUdqRCxRQUFRLENBQUM2QyxXQUFXLEdBQUcsQ0FBZixDQUExQjtNQUNBdEgsQ0FBQyxDQUFDeUgsS0FBRCxDQUFELENBQVN0SCxJQUFULENBQWMsS0FBZCxFQUFxQnVILFdBQXJCO0lBQ0gsQ0FMRDtFQU1IOztFQUlEMUgsQ0FBQyxDQUFDLE1BQUQsQ0FBRCxDQUFVQyxFQUFWLENBQWEsT0FBYixFQUFzQixtQkFBdEIsRUFBMkMsVUFBVTBILENBQVYsRUFBYTtJQUVwREEsQ0FBQyxDQUFDQyxlQUFGO0lBQ0EsSUFBSUosU0FBUyxHQUFHeEgsQ0FBQyxDQUFDLElBQUQsQ0FBRCxDQUFRRyxJQUFSLENBQWEsa0JBQWIsQ0FBaEI7SUFDQSxJQUFJc0gsS0FBSyxHQUFHekgsQ0FBQyxDQUFDLE1BQU13SCxTQUFOLEdBQWtCLEVBQW5CLENBQWI7SUFDQSxJQUFJSyxHQUFHLEdBQUdwRCxRQUFRLENBQUNnRCxLQUFLLENBQUN0SCxJQUFOLENBQVcsS0FBWCxDQUFELENBQWxCO0lBQ0EsSUFBSTJILEdBQUcsR0FBR3JELFFBQVEsQ0FBQ2dELEtBQUssQ0FBQ3JILEdBQU4sRUFBRCxDQUFsQjs7SUFFQSxJQUFJMEgsR0FBRyxJQUFJRCxHQUFYLEVBQWdCO01BQ1o7SUFDSDs7SUFFREosS0FBSyxDQUFDckgsR0FBTixDQUFVMEgsR0FBRyxHQUFHLENBQWhCO0lBQ0FoRixlQUFlO0VBR2xCLENBaEJEO0VBa0JBOUMsQ0FBQyxDQUFDLE1BQUQsQ0FBRCxDQUFVQyxFQUFWLENBQWEsT0FBYixFQUFzQixpQkFBdEIsRUFBeUMsVUFBVTBILENBQVYsRUFBYTtJQUVsREEsQ0FBQyxDQUFDQyxlQUFGO0lBQ0EsSUFBSUosU0FBUyxHQUFHeEgsQ0FBQyxDQUFDLElBQUQsQ0FBRCxDQUFRRyxJQUFSLENBQWEsa0JBQWIsQ0FBaEI7SUFDQSxJQUFJc0gsS0FBSyxHQUFHekgsQ0FBQyxDQUFDLE1BQU13SCxTQUFOLEdBQWtCLEVBQW5CLENBQWI7O0lBQ0EsSUFBSWxDLFVBQUosRUFBZ0I7TUFDWixJQUFJZ0MsV0FBVyxHQUFHdEgsQ0FBQyxDQUFDLFVBQUQsQ0FBRCxDQUFjSSxHQUFkLEdBQW9CbUgsT0FBcEIsQ0FBNEIsS0FBNUIsRUFBbUMsRUFBbkMsQ0FBbEI7TUFDQSxJQUFJRyxXQUFXLEdBQUdqRCxRQUFRLENBQUM2QyxXQUFXLEdBQUcsQ0FBZixDQUExQjtNQUNBdEgsQ0FBQyxDQUFDeUgsS0FBRCxDQUFELENBQVN0SCxJQUFULENBQWMsS0FBZCxFQUFxQnVILFdBQXJCO0lBQ0g7O0lBRUQsSUFBSUssR0FBRyxHQUFHdEQsUUFBUSxDQUFDZ0QsS0FBSyxDQUFDdEgsSUFBTixDQUFXLEtBQVgsQ0FBRCxDQUFsQjtJQUNBLElBQUkySCxHQUFHLEdBQUdyRCxRQUFRLENBQUNnRCxLQUFLLENBQUNySCxHQUFOLEVBQUQsQ0FBbEI7O0lBQ0EsSUFBSTBILEdBQUcsSUFBSUMsR0FBWCxFQUFnQjtNQUNaO0lBQ0g7O0lBQ0ROLEtBQUssQ0FBQ3JILEdBQU4sQ0FBVTBILEdBQUcsR0FBRyxDQUFoQjtJQUNBaEYsZUFBZTtFQUdsQixDQXBCRDtFQXVCQTlDLENBQUMsQ0FBQyxNQUFELENBQUQsQ0FBVUMsRUFBVixDQUFhLFFBQWIsRUFBdUIsMEJBQXZCLEVBQW1ELFVBQVUwSCxDQUFWLEVBQWE7SUFFNUQsSUFBSTNILENBQUMsQ0FBQyxJQUFELENBQUQsQ0FBUWdJLEVBQVIsQ0FBVyxVQUFYLENBQUosRUFBNEI7TUFDeEJoSSxDQUFDLENBQUMsc0JBQXNCQSxDQUFDLENBQUMsSUFBRCxDQUFELENBQVFVLElBQVIsQ0FBYSxJQUFiLENBQXRCLEdBQTJDLEdBQTNDLEdBQWlEVixDQUFDLENBQUMsSUFBRCxDQUFELENBQVFVLElBQVIsQ0FBYSxNQUFiLENBQWxELENBQUQsQ0FBeUVtQyxRQUF6RSxDQUFrRixjQUFsRixFQUFrRzFDLElBQWxHLENBQXVHLFVBQXZHLEVBQW1ILElBQW5ILEVBQXlIQSxJQUF6SCxDQUE4SCxLQUE5SCxFQUFxSSxDQUFySTtJQUVILENBSEQsTUFHTztNQUNISCxDQUFDLENBQUMsc0JBQXNCQSxDQUFDLENBQUMsSUFBRCxDQUFELENBQVFVLElBQVIsQ0FBYSxJQUFiLENBQXRCLEdBQTJDLEdBQTNDLEdBQWlEVixDQUFDLENBQUMsSUFBRCxDQUFELENBQVFVLElBQVIsQ0FBYSxNQUFiLENBQWxELENBQUQsQ0FBeUVrQyxXQUF6RSxDQUFxRixjQUFyRixFQUFxR3hDLEdBQXJHLENBQXlHLENBQXpHLEVBQTRHRCxJQUE1RyxDQUFpSCxVQUFqSCxFQUE2SCxLQUE3SCxFQUFvSUEsSUFBcEksQ0FBeUksS0FBekksRUFBZ0osQ0FBaEosRUFBbUpBLElBQW5KLENBQXdKLG1CQUF4SixFQUE2SyxDQUE3SztJQUNIOztJQUNEMkMsZUFBZTtFQUdsQixDQVhEO0VBYUE5QyxDQUFDLENBQUMsTUFBRCxDQUFELENBQVVDLEVBQVYsQ0FBYSxPQUFiLEVBQXNCLHlCQUF0QixFQUFpRCxVQUFVMEgsQ0FBVixFQUFhO0lBRTFEQSxDQUFDLENBQUNDLGVBQUY7SUFDQSxJQUFJSixTQUFTLEdBQUd4SCxDQUFDLENBQUMsSUFBRCxDQUFELENBQVFHLElBQVIsQ0FBYSxrQkFBYixDQUFoQjtJQUNBLElBQUlzSCxLQUFLLEdBQUd6SCxDQUFDLENBQUMsTUFBTXdILFNBQU4sR0FBa0IsRUFBbkIsQ0FBYjs7SUFDQSxJQUFJQyxLQUFLLENBQUMzRCxRQUFOLENBQWUsY0FBZixDQUFKLEVBQW9DO01BQ2hDLElBQUkrRCxHQUFHLEdBQUdwRCxRQUFRLENBQUNnRCxLQUFLLENBQUN0SCxJQUFOLENBQVcsS0FBWCxDQUFELENBQWxCO01BQ0EsSUFBSTJILEdBQUcsR0FBR3JELFFBQVEsQ0FBQ2dELEtBQUssQ0FBQ3JILEdBQU4sRUFBRCxDQUFsQjs7TUFDQSxJQUFJMEgsR0FBRyxJQUFJRCxHQUFYLEVBQWdCO1FBQ1o7TUFDSDs7TUFDREosS0FBSyxDQUFDckgsR0FBTixDQUFVMEgsR0FBRyxHQUFHLENBQWhCO01BQ0FMLEtBQUssQ0FBQ3RILElBQU4sQ0FBVyxtQkFBWCxFQUFnQyxDQUFDMkgsR0FBRyxHQUFHLENBQVAsSUFBWXJELFFBQVEsQ0FBQ2dELEtBQUssQ0FBQ3RILElBQU4sQ0FBVyxnQkFBWCxDQUFELENBQXBEO0lBQ0g7O0lBQ0QyQyxlQUFlO0VBRWxCLENBaEJEO0VBb0JBOUMsQ0FBQyxDQUFDLE1BQUQsQ0FBRCxDQUFVQyxFQUFWLENBQWEsT0FBYixFQUFzQix1QkFBdEIsRUFBK0MsVUFBVTBILENBQVYsRUFBYTtJQUV4REEsQ0FBQyxDQUFDQyxlQUFGO0lBQ0EsSUFBSUosU0FBUyxHQUFHeEgsQ0FBQyxDQUFDLElBQUQsQ0FBRCxDQUFRRyxJQUFSLENBQWEsa0JBQWIsQ0FBaEI7SUFDQSxJQUFJc0gsS0FBSyxHQUFHekgsQ0FBQyxDQUFDLE1BQU13SCxTQUFOLEdBQWtCLEVBQW5CLENBQWI7O0lBQ0EsSUFBSUMsS0FBSyxDQUFDM0QsUUFBTixDQUFlLGNBQWYsQ0FBSixFQUFvQztNQUNoQyxJQUFJaUUsR0FBRyxHQUFHdEQsUUFBUSxDQUFDZ0QsS0FBSyxDQUFDdEgsSUFBTixDQUFXLEtBQVgsQ0FBRCxDQUFsQjtNQUNBLElBQUkySCxHQUFHLEdBQUdyRCxRQUFRLENBQUNnRCxLQUFLLENBQUNySCxHQUFOLEVBQUQsQ0FBbEI7O01BQ0EsSUFBSTBILEdBQUcsSUFBSUMsR0FBWCxFQUFnQjtRQUNaO01BQ0g7O01BQ0ROLEtBQUssQ0FBQ3JILEdBQU4sQ0FBVTBILEdBQUcsR0FBRyxDQUFoQjtNQUNBTCxLQUFLLENBQUN0SCxJQUFOLENBQVcsbUJBQVgsRUFBZ0MsQ0FBQzJILEdBQUcsR0FBRyxDQUFQLElBQVlyRCxRQUFRLENBQUNnRCxLQUFLLENBQUN0SCxJQUFOLENBQVcsZ0JBQVgsQ0FBRCxDQUFwRDtJQUNIOztJQUNEMkMsZUFBZTtFQUdsQixDQWpCRDtFQW1CQTlDLENBQUMsQ0FBQyxvQkFBRCxDQUFELENBQXdCQyxFQUF4QixDQUEyQixPQUEzQixFQUFvQyxZQUFZO0lBRTVDRCxDQUFDLENBQUMsa0JBQUQsQ0FBRCxDQUFzQmEsSUFBdEIsQ0FBMkIsT0FBM0IsRUFBb0MrQixXQUFwQyxDQUFnRCxPQUFoRCxFQUF5REMsUUFBekQsQ0FBa0UsTUFBbEU7RUFFSCxDQUpEO0VBT0E3QyxDQUFDLENBQUMsWUFBRCxDQUFELENBQWdCQyxFQUFoQixDQUFtQixRQUFuQixFQUE2QixZQUFZO0lBRXJDMkQsdUJBQXVCOztJQUN2QixJQUFJNUQsQ0FBQyxDQUFDLG9CQUFELENBQUQsQ0FBd0JJLEdBQXhCLE1BQWlDSixDQUFDLENBQUMsSUFBRCxDQUFELENBQVFJLEdBQVIsRUFBakMsSUFBa0RKLENBQUMsQ0FBQyxJQUFELENBQUQsQ0FBUUksR0FBUixNQUFpQixFQUF2RSxFQUEyRTtNQUN2RUosQ0FBQyxDQUFDLGVBQUQsQ0FBRCxDQUFtQmEsSUFBbkIsQ0FBd0IsU0FBeEIsRUFBbUMrQixXQUFuQyxDQUErQyx1QkFBL0MsRUFBd0VDLFFBQXhFLENBQWlGLFFBQWpGO0lBQ0gsQ0FGRCxNQUVPO01BQ0g3QyxDQUFDLENBQUMsZUFBRCxDQUFELENBQW1CYSxJQUFuQixDQUF3QixPQUF4QixFQUFpQ2dDLFFBQWpDLENBQTBDLHVCQUExQyxFQUFtRUQsV0FBbkUsQ0FBK0UsT0FBL0U7SUFDSDtFQUdKLENBVkQ7RUFhQTVDLENBQUMsQ0FBQ0YsUUFBRCxDQUFELENBQVlHLEVBQVosQ0FBZSxPQUFmLEVBQXdCLGtCQUF4QixFQUE0QyxZQUFZO0lBQ3BEb0QsOEJBQThCO0lBQzlCUCxlQUFlO0VBQ2xCLENBSEQ7RUFLQTlDLENBQUMsQ0FBQyxNQUFELENBQUQsQ0FBVUMsRUFBVixDQUFhLE9BQWIsRUFBc0IsZUFBdEIsRUFBdUMsWUFBWTtJQUMvQ3lDLE9BQU8sR0FBRyxrQ0FBVjtJQUNBRCxjQUFjLENBQUNDLE9BQUQsQ0FBZDtFQUVILENBSkQ7RUFPQTFDLENBQUMsQ0FBQyxXQUFELENBQUQsQ0FBZUMsRUFBZixDQUFrQixRQUFsQixFQUE0QixZQUFZO0lBQ3BDOEMsVUFBVTtFQUNiLENBRkQ7QUFrVkgiLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvZnJvbnRlbmQvYm9va2luZy1jb21wYW55LmpzLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/frontend/booking-company.js\n");

/***/ }),

/***/ "./resources/js/frontend/booking.js":
/*!******************************************!*\
  !*** ./resources/js/frontend/booking.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("var _require = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\"),\n    data = _require.data;\n\nif (document.getElementById(\"doNotReverseThisPage\")) {\n  $(document).ready(function () {\n    setTimeout(myStopFunction, 1);\n\n    function myStopFunction() {\n      document.body.click();\n      $('#doNotReverseThisPage').trigger('click');\n      $(document).click();\n      window.history.pushState(null, null, window.location.href);\n\n      window.onpopstate = function () {\n        window.history.go(1);\n      };\n    }\n  });\n}\n\nif (document.getElementById(\"myBookingVendorPageShow\") || document.getElementById(\"bookingSuccesspage\") || document.getElementById(\"bookingShowpage\")) {\n  var initMap = function initMap() {\n    lat = $(\"#lat\").val();\n    long = $(\"#long\").val();\n    place_name = $(\"#map_location\").val();\n    var latlong = new google.maps.LatLng(lat, long);\n    var myOptions = {\n      center: latlong,\n      zoom: 16,\n      mapTypeControl: true,\n      navigationControlOptions: {\n        style: google.maps.NavigationControlStyle.SMALL\n      }\n    };\n    var map = new google.maps.Map(document.getElementById(\"embedMap\"), myOptions);\n    var marker = new google.maps.Marker({\n      position: latlong,\n      map: map,\n      title: place_name,\n      url: \"https://maps.google.com?q=\" + lat + \",\" + long,\n      icon: mapMarkerImage\n    });\n    google.maps.event.addListener(marker, 'click', function () {\n      window.open(marker.url, '_blank');\n    });\n  };\n\n  $('.printDetailsBooking').css('cursor', 'pointer');\n  $(document).on('click', '.printDetailsBooking', function (e) {\n    e.preventDefault();\n    window.print();\n  });\n  google.maps.event.addDomListener(window, 'load', initMap);\n}\n\nif (document.getElementById(\"bookingpage\")) {\n  var dateDifference = function dateDifference() {\n    var start_date = $(\".check-in-input\").val();\n    var end_date = $(\".check-out-input\").val();\n    var endDate = new Date(end_date);\n    var startDate = new Date(start_date);\n    var diffTime = Math.abs(endDate - startDate);\n    var diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n\n    if (isNaN(diffDays)) {\n      diffDays = 0;\n    }\n\n    $('#daysDiff').val(diffDays); // return diffDays;\n  };\n\n  var removeDiscount = function removeDiscount() {\n    var sendMsg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    reloadVal = 1;\n    $('#agentCompanyCode1').val('');\n    $('#agentCompanyCode').val('');\n    $('#agentCompanyCodeType').val('');\n    $('#discountAmount').val('');\n    $('.discountAmount').html(0);\n    $('#discountSucccessText').hide().removeClass('d-flex');\n    $('#discountType').val('');\n    $('#discountValue').val('');\n    $('#discountSucccessAmount').html('');\n    $(\"#AppliedCouponCode\").val('');\n    $('#offerCode').val('');\n    $('#basic-addon1').html('Apply').addClass('applyOfferButton grey').removeClass('green');\n    $('#applyCodeButton').html('Apply').removeClass('green').addClass('grey');\n\n    if (sendMsg != '') {\n      Lobibox.notify('error', {\n        position: \"top right\",\n        msg: sendMsg\n      });\n    }\n\n    calculateAmount();\n    return;\n  };\n\n  var calculateAgentCorpCodeDiscount = function calculateAgentCorpCodeDiscount() {\n    var agentCorpCode = $('#agentCompanyCode1').val();\n    var property_price = $('#totalAmount').val();\n\n    if (property_price == 0 || agentCorpCode == '') {\n      sendMsg = property_price == 0 ? \"Property amount must be greater than zero!\" : 'Please insert Agent/Corporate code!';\n      Lobibox.notify('error', {\n        position: \"top right\",\n        msg: sendMsg\n      });\n    } else {\n      var agentCorpCodeUrl = $('#applyCodeButton').data('url');\n      $.ajax({\n        type: \"POST\",\n        url: agentCorpCodeUrl,\n        data: {\n          agent_corp_code: agentCorpCode,\n          property_price: property_price,\n          _token: $('meta[name=\"csrf-token\"]').attr('content')\n        },\n        beforeSend: function beforeSend() {\n          var _loaderMsg = $(this).attr(\"data-loader\");\n\n          $(\"#loader_msg\").html(_loaderMsg);\n          $(\"#loader\").show();\n        },\n        complete: function complete() {\n          $(\"#loader\").hide();\n        },\n        success: function success(data) {\n          Lobibox.notify(data[\"type\"], {\n            position: \"top right\",\n            msg: data[\"message\"]\n          });\n\n          if (data['discount_amount'] && data['discount_type'] && data['type'] == 'success') {\n            $(\"#AppliedCouponCode\").val('');\n            $('#offerCode').val('');\n            $(\"#agentCompanyCodeType\").val(data['code_type']);\n            $(\"#agentCompanyCode\").val(agentCorpCode);\n            $('#discountAmount').val(data['discount_amount']);\n            $('.discountAmount').html(' ₹' + data['discount_amount']);\n            $('#discountSucccessText').show().addClass('d-flex');\n            $('#discountType').val(data['discount_type']);\n            $('#discountValue').val(data['discount_deduct']);\n            $('#discountSucccessAmount').html(data['discount_deduct'] + ' % ');\n            $('#applyCodeButton').html('Applied').removeClass('grey').addClass('green');\n            $('#basic-addon1').html('Apply').addClass('applyOfferButton grey').removeClass('green');\n          } else {\n            $('#agentCompanyCode1').val('');\n            $('#agentCompanyCode').val('');\n            $('#agentCompanyCodeType').val('');\n          }\n\n          calculateAmount();\n        }\n      });\n    }\n  };\n\n  var calculateDiscountAmount = function calculateDiscountAmount() {\n    var property_id = $('#offerCode').attr('data-property-id');\n    var offerCode = $('#offerCode').val();\n    var property_price = $('#totalAmount').val();\n\n    if (offerCode == '') {\n      var sendMsg;\n\n      if ($('#discountAmount').val() > 0) {\n        $('#discountAmount').val('');\n        $('.discountAmount').html(0);\n        $('#discountSucccessText').hide().removeClass('d-flex');\n        $('#discountType').val('');\n        $('#discountValue').val('');\n        $('#discountSucccessAmount').html('');\n        $(\"#AppliedCouponCode\").val('');\n        calculateAmount(); // $('#basic-addon1').html('Apply').addClass('applyOfferButton grey').removeClass('green');\n\n        sendMsg = \"Offer code removed successfully!\";\n      } else {\n        sendMsg = \"Please insert offer code!\";\n      }\n\n      Lobibox.notify('error', {\n        position: \"top right\",\n        msg: sendMsg\n      });\n      return;\n    } else {\n      var url = $('#offerCode').attr('data-url');\n      $.ajax({\n        type: \"POST\",\n        url: url,\n        data: {\n          property_id: property_id,\n          property_price: property_price,\n          offerCode: offerCode,\n          _token: $('meta[name=\"csrf-token\"]').attr('content')\n        },\n        beforeSend: function beforeSend() {\n          var _loaderMsg = $('#basic-addon1').attr(\"data-loader\");\n\n          $(\"#loader_msg\").html(_loaderMsg);\n          $(\"#loader\").show();\n        },\n        complete: function complete() {\n          $(\"#loader\").hide();\n        },\n        success: function success(data) {\n          Lobibox.notify(data[\"type\"], {\n            position: \"top right\",\n            msg: data[\"message\"]\n          });\n\n          if (data['discount_amount'] && data['discount_type'] && data['type'] == 'success') {\n            $('#discountSucccessText').show();\n\n            if (!$('#discountSucccessText').hasClass('d-flex')) {\n              $('#discountSucccessText').addClass('d-flex');\n            }\n\n            $('#discountAmount').val(data['discount_amount']);\n            $('.discountAmount').html(' ₹' + data['discount_amount']);\n            $('#discountSucccessText').show().addClass('d-flex');\n            $('#discountType').val(data['discount_type']);\n            $('#discountValue').val(data['discount_deduct']);\n            $('#isGlobalOfferApplied').val(data['is_global_coupon']);\n\n            if (data['discount_type'] == 'Flatrate') {\n              $('#discountSucccessAmount').html(' ₹' + data['discount_deduct']);\n            } else {\n              $('#discountSucccessAmount').html(data['discount_deduct'] + ' % ');\n            }\n\n            $(\"#AppliedCouponCode\").val(offerCode);\n            $('#basic-addon1').html('Applied').removeClass('applyOfferButton grey').addClass('green');\n          } else {\n            $('#offerCode').val('');\n            $(\"#AppliedCouponCode\").val('');\n            $('#discountSucccessText').hide().removeClass('d-flex');\n          }\n\n          $('#applyCodeButton').html('Apply').removeClass('green').addClass('grey');\n          $('#agentCompanyCode1').val('');\n          $('#agentCompanyCode').val('');\n          $('#agentCompanyCodeType').val('');\n          calculateAmount();\n        }\n      });\n    }\n  };\n\n  var calculateAmount = function calculateAmount() {\n    dateDifference();\n    var isGlobalOfferApplied = $('#isGlobalOfferApplied').val();\n    var agentCompanyCode = $('#agentCompanyCode').val();\n    var selected_room_amount = $('#selectedPerRoomAmount').val();\n    $('.selectedPerRoomAmount').html(' ₹' + selected_room_amount);\n    var discountAmount = $('#discountAmount').val();\n    var discountType = $('#discountType').val();\n    var daysDiff = $('#daysDiff').val();\n\n    if (daysDiff == 0) {\n      $('.daysDiffernceDiv').hide().removeClass('d-flex');\n    } else {\n      $('.daysDiffernceDiv').show().addClass('d-flex');\n    }\n\n    var total_guests = $('.quantity_guests').val();\n    var totalAmount;\n\n    if (isFlatType || isHomestay || isHotel) {\n      totalAmount = selected_room_amount;\n    } else {\n      totalAmount = selected_room_amount * total_guests;\n    }\n\n    if (daysDiff >= 1) {\n      totalAmount = totalAmount * daysDiff;\n    }\n\n    if (discountType != '' && discountType == 'Percentage') {\n      var discountValue = $('#discountValue').val();\n      discountAmount = totalAmount - totalAmount * ((100 - discountValue) / 100);\n      $('#discountAmount').val(discountAmount);\n      $('.discountAmount').html(' ₹' + discountAmount);\n    }\n\n    if (discountType != '' && discountType == 'Flatrate' && discountAmount >= totalAmount) {\n      discountAmount = 0;\n      $('#discountAmount').val(discountAmount);\n      $('.discountAmount').html(' ₹' + discountAmount);\n      $('#discountSucccessText').hide().removeClass('d-flex');\n      $('#discountType').val('');\n      $('#discountValue').val('');\n    }\n\n    $('.daysDiffernce').html(daysDiff + ' Days');\n    $('#totalAmount').val(totalAmount);\n    $('.totalAmount').html('₹' + totalAmount);\n\n    if (parseInt(discountAmount) > 0) {\n      $('#finalPayableAmount').val(totalAmount - discountAmount);\n      $('.finalPayableAmount').html('₹' + (totalAmount - discountAmount));\n    } else {\n      $('#finalPayableAmount').val(totalAmount);\n      $('.finalPayableAmount').html('₹' + totalAmount);\n    }\n\n    calculateCommissionAmount();\n    amountType();\n    var propertyCommissionAmount = $('#propertyCommissionAmount').val();\n\n    if (totalAmount <= 0 || isGlobalOfferApplied == 1 && propertyCommissionAmount <= 0 || agentCompanyCode != '' && propertyCommissionAmount <= 0) {\n      if (isGlobalOfferApplied == 1) {\n        sendMsg = 'Offer code removed! Booking partial amount too low.';\n      } else if (agentCompanyCode != '') {\n        sendMsg = 'Agent/Corporate code discount removed! Booking partial amount too low.';\n      } else {\n        sendMsg = 'Offer code removed! Booking amount too low.';\n      }\n\n      if (isCall == 0 && reloadVal == 0 && discountAmount > 0) {\n        removeDiscount(sendMsg);\n      }\n    }\n\n    if (isCall == 0) {\n      reloadVal = 0;\n      $('#addPaymentButton').prop('disabled', true);\n      $('#pills-bookingpayment-tab').addClass('disabled');\n    }\n\n    isCall = 0;\n  };\n\n  var amountType = function amountType() {\n    var payment_type = $('input:radio.paidType:checked').val();\n    var payAmount;\n\n    if (payment_type == 'partial') {\n      payAmount = $('#propertyCommissionAmount').val();\n      remainingAmount = $('#totalAmount').val() - payAmount;\n    } else {\n      payAmount = $('#finalPayableAmount').val();\n      $('.remainingAmountDiv').hide().removeClass('d-flex');\n    }\n\n    $('.finalAmountAfterSelection').html('₹' + payAmount);\n    $('#finalAmountAfterSelection').val(payAmount);\n\n    if (isCall == 0) {\n      $('#addPaymentButton').prop('disabled', true);\n      $('#pills-bookingpayment-tab').addClass('disabled');\n    }\n  };\n\n  var getAcNonAcOptionsRadio = function getAcNonAcOptionsRadio() {\n    var room_id = $('option:selected', '#roomTypeVal').attr(\"data-id\");\n    var url = $('#roomTypeVal').attr('data-url');\n    $.ajax({\n      type: \"POST\",\n      url: url,\n      data: {\n        room_id: room_id,\n        _token: $('meta[name=\"csrf-token\"]').attr('content')\n      },\n      beforeSend: function beforeSend() {\n        $(\"#loader_msg\").html('Please wait getting room data.');\n        $(\"#loader\").show();\n      },\n      complete: function complete() {\n        $(\"#loader\").hide();\n      },\n      success: function success(response) {\n        if ($('#RoomTypeAc').is(':checked')) {\n          $('#selectedPerRoomAmount').val(response['ac_amount']);\n        }\n\n        if ($('#RoomTypeNonAc').is(':checked')) {\n          $('#selectedPerRoomAmount').val(response['non_ac_amount']);\n        }\n\n        if (isOnlyGuestType) {\n          $('.selectedPerRoomAmount').html('₹' + $('#selectedPerRoomAmount').val());\n        }\n\n        calculateAmount();\n      }\n    });\n  };\n\n  var getAcNonAcOptions = function getAcNonAcOptions() {\n    var room_id = $('option:selected', '#roomTypeVal').attr(\"data-id\");\n\n    if (room_id) {\n      var url = $('#roomTypeVal').attr('data-url');\n      $.ajax({\n        type: \"POST\",\n        url: url,\n        data: {\n          room_id: room_id,\n          _token: $('meta[name=\"csrf-token\"]').attr('content')\n        },\n        beforeSend: function beforeSend() {\n          $(\"#loader_msg\").html('Please wait getting room data.');\n          $(\"#loader\").show();\n        },\n        complete: function complete() {\n          $(\"#loader\").hide();\n        },\n        success: function success(response) {\n          $('#roomOccupancyType').val(response['room_type']);\n          $('#radiobuttonRowAcType').show();\n\n          if (response['is_ac'] != 0 && response['is_non_ac'] != 0) {\n            $('#RoomTypeAcDiv').show();\n            $('#RoomTypeNonAcDiv').show();\n\n            if (document.getElementById(\"bookingpageedit\")) {\n              var roomSubType = $('input:radio.roomCoolType:checked').val();\n\n              if (roomSubType == 'AC') {\n                $('#selectedPerRoomAmount').val(response['ac_amount']);\n              } else {\n                $('#selectedPerRoomAmount').val(response['non_ac_amount']);\n              }\n            } else {\n              $('#RoomTypeAc').prop('checked', true);\n              $('#selectedPerRoomAmount').val(response['ac_amount']);\n            }\n          } else if (response['is_ac'] != 0) {\n            $('#RoomTypeAcDiv').show();\n            $('#RoomTypeNonAcDiv').hide();\n            $('#RoomTypeAc').prop('checked', true);\n            $('#RoomTypeNonAc').prop('checked', false);\n            $('#selectedPerRoomAmount').val(response['ac_amount']);\n          } else {\n            $('#RoomTypeNonAcDiv').show();\n            $('#RoomTypeAcDiv').hide();\n            $('#RoomTypeNonAc').prop('checked', true);\n            $('#RoomTypeAc').prop('checked', false);\n            $('#selectedPerRoomAmount').val(response['non_ac_amount']);\n          }\n\n          if (isOnlyGuestType) {\n            $('.selectedPerRoomAmount').html('₹' + $('#selectedPerRoomAmount').val());\n          }\n\n          calculateAmount();\n        }\n      });\n    } else {\n      $('#selectedPerRoomAmount').val(0);\n      $('#radiobuttonRowAcType').hide();\n      $('#RoomTypeAcDiv').hide();\n      $('#RoomTypeNonAcDiv').hide();\n      $('#RoomTypeAc').prop('checked', false);\n      $('#RoomTypeNonAc').prop('checked', false);\n    }\n  };\n\n  var totalGuests = function totalGuests() {\n    if (isOnlyGuestType) {\n      var total_guests = $('.quantity_guests').val();\n      var output = total_guests == 1 ? total_guests + ' Guest ' : total_guests + ' Guests ';\n    } else {\n      var adults = $('.quantity_adult').val() == 1 ? +$('.quantity_adult').val() + ' Adult - ' : +$('.quantity_adult').val() + ' Adults - ';\n      var children = $('.quantity_children').val() == 1 ? ' ' + $('.quantity_children').val() + ' Child' : ' ' + $('.quantity_children').val() + ' Children';\n      var output = adults + children;\n    }\n\n    $('.totalGuests').html(output);\n  };\n\n  var calculateCommissionAmount = function calculateCommissionAmount() {\n    var totalAmount = $('#totalAmount').val();\n    var commission_percent = $('#commPercent').val();\n    var commmission = Math.round(totalAmount * (commission_percent / 100));\n    var isGlobalOfferApplied = $('#isGlobalOfferApplied').val();\n    var discountAmount = $('#discountAmount').val();\n    var agentCompanyCode = $('#agentCompanyCode').val();\n\n    if (isGlobalOfferApplied == 1 && discountAmount > 0 || agentCompanyCode != '') {\n      commmission = commmission - discountAmount;\n    }\n\n    $('#propertyCommissionAmount').val(commmission);\n    $('.propertyCommissionAmountText').html('₹' + commmission);\n  };\n  /****End Guest Selectors***/\n\n\n  // 1 = 'hostel-pg'\n  // 2 = 'flat'\n  // 3 = 'guest-hotel'\n  // 4 = 'hostel-pg-one-day'\n  // 5 = 'homestay'\n  var propertyType = $('#propertyTypeSlug').val();\n  var isOnlyGuestType = ['hostel-pg', 'hostel-pg-one-day', 'homestay'].find(function (element) {\n    return element == propertyType;\n  });\n  var isRoomType = ['hostel-pg', 'guest-hotel', 'hostel-pg-one-day'].find(function (element) {\n    return element == propertyType;\n  });\n  var isOnlyOneDayType = ['guest-hotel', 'hostel-pg-one-day', 'homestay'].find(function (element) {\n    return element == propertyType;\n  });\n  var isFlatType = propertyType == 'flat';\n  var isHomestay = propertyType == 'homestay';\n  var isHotel = propertyType == 'guest-hotel';\n  var nowDate = new Date();\n  var checkindate = $(\".check-in-input\").val();\n  var checkoutdate = $(\".check-out-input\").val();\n  var today = new Date(nowDate.getFullYear(), nowDate.getMonth(), nowDate.getDate(), 0, 0, 0, 0);\n  var checkinDate2, sendMsg;\n  var reloadVal = 0;\n  var isCall = 1;\n  $(\".check-in-renders\").daterangepicker({\n    singleDatePicker: true,\n    autoApply: true,\n    startDate: checkindate ? new Date(checkindate) : new Date(),\n    disabledPast: true,\n    customClass: \"\",\n    widthSingle: 300,\n    onlyShowCurrentMonth: true,\n    minDate: today,\n    opens: bookingCore.rtl ? \"right\" : \"left\",\n    locale: {\n      format: \"YYYY-MM-DD\",\n      direction: bookingCore.rtl ? \"rtl\" : \"ltr\",\n      firstDay: daterangepickerLocale.first_day_of_week\n    }\n  }, function (start, end, label) {\n    $(\".check-in-input\").val(start.format(\"YYYY-MM-DD\"));\n    var start_date = $(\".check-in-input\").val();\n    var end_date = $(\".check-out-input\").val();\n\n    if (start_date > end_date && end_date != \"\") {\n      $(\".check-out-input\").val(start_date);\n      $(\".check-in-input\").val(start_date);\n      $(\".check-out-renders\").html('<i class=\"ri-calendar-line cal-icon mr-1 calendar-check-in-out-fa\"></i>' + start.format(bookingCore.view_end_date_formate));\n      $(\".check-in-renders\").html('<i class=\"ri-calendar-line cal-icon mr-1 calendar-check-in-out-fa\"></i>' + start.format(bookingCore.view_end_date_formate));\n    } else {\n      $(\".check-in-renders\").html('<i class=\"ri-calendar-line cal-icon mr-1 calendar-check-in-out-fa\"></i>' + start.format(bookingCore.view_end_date_formate));\n    }\n\n    checkinDate2 = new Date(start_date);\n    checkindate = new Date(checkinDate2.getFullYear(), checkinDate2.getMonth(), checkinDate2.getDate(), 0, 0, 0, 0);\n    checkOutDate(checkindate);\n\n    if (isOnlyOneDayType) {\n      setTimeout(function () {\n        dateDifference();\n        calculateAmount();\n      }, 1000);\n    }\n  });\n\n  var checkOutDate = function checkOutDate(checkInDate) {\n    $(\".check-out-renders\").daterangepicker({\n      singleDatePicker: true,\n      startDate: checkoutdate ? new Date(checkoutdate) : new Date(),\n      autoApply: true,\n      disabledPast: true,\n      customClass: \"\",\n      widthSingle: 300,\n      onlyShowCurrentMonth: true,\n      minDate: checkindate ? new Date(checkindate) : new Date(),\n      opens: bookingCore.rtl ? \"right\" : \"left\",\n      locale: {\n        format: \"YYYY-MM-DD\",\n        direction: bookingCore.rtl ? \"rtl\" : \"ltr\",\n        firstDay: checkInDate ? checkInDate : daterangepickerLocale.first_day_of_week\n      }\n    }, function (start, end, label) {\n      $(\".check-out-input\").val(end.format(\"YYYY-MM-DD\"));\n      var start_date = $(\".check-in-input\").val();\n      var end_date = $(\".check-out-input\").val();\n\n      if (end_date < start_date) {\n        $(\".check-out-input\").val(end_date);\n        $(\".check-in-input\").val(end_date);\n        $(\".check-out-renders\").html('<i class=\"ri-calendar-line cal-icon mr-1 calendar-check-in-out-fa\"></i>' + end.format(bookingCore.view_end_date_formate));\n        $(\".check-in-renders\").html('<i class=\"ri-calendar-line cal-icon mr-1 calendar-check-in-out-fa\"></i>' + end.format(bookingCore.view_end_date_formate));\n      } else {\n        $(\".check-out-renders\").html('<i class=\"ri-calendar-line cal-icon mr-1 calendar-check-in-out-fa\"></i>' + end.format(bookingCore.view_end_date_formate));\n      }\n\n      if (isOnlyOneDayType) {\n        dateDifference();\n        calculateAmount();\n      }\n    });\n  };\n\n  checkOutDate(new Date());\n  totalGuests();\n  /****For Guest Selectors***/\n\n  if (isRoomType) {\n    getAcNonAcOptions();\n  } else {\n    calculateAmount();\n  }\n\n  $('body').on('click', '.btn-minus-guests', function (e) {\n    e.stopPropagation();\n    var dataClass = $(this).attr('data-input-class');\n    var input = $('.' + dataClass + '');\n    var min = parseInt(input.attr('min'));\n    var old = parseInt(input.val());\n\n    if (old <= min) {\n      return;\n    }\n\n    input.val(old - 1);\n    totalGuests();\n    calculateAmount();\n  });\n\n  if (isFlatType) {\n    var flatbhk_val = $('.flatbhk').val().replace('bhk', '');\n    $(\".btn-add-guests\").each(function () {\n      var dataClass = $(this).attr('data-input-class');\n      var input = $('.' + dataClass + '');\n      var max_attrval = parseInt(flatbhk_val * 2);\n      $(input).attr('max', max_attrval);\n    });\n  }\n\n  $('body').on('click', '.btn-add-guests', function (e) {\n    e.stopPropagation();\n    var dataClass = $(this).attr('data-input-class');\n    var input = $('.' + dataClass + '');\n\n    if (isFlatType) {\n      var flatbhk_val = $('.flatbhk').val().replace('bhk', '');\n      var max_attrval = parseInt(flatbhk_val * 2);\n      $(input).attr('max', max_attrval);\n    }\n\n    if (isHotel) {\n      var max_attrval = 2;\n      $(input).attr('max', max_attrval);\n    }\n\n    var max = parseInt(input.attr('max'));\n    var old = parseInt(input.val());\n\n    if (old >= max) {\n      return;\n    }\n\n    input.val(old + 1);\n    totalGuests();\n    calculateAmount();\n  });\n  $('body').on('change', '#roomTypeVal', function () {\n    getAcNonAcOptions();\n  });\n  $('body').on('change', '.roomCoolType', function () {\n    getAcNonAcOptionsRadio();\n  });\n  $('#offerCode').on('change', function () {\n    calculateDiscountAmount();\n\n    if ($(\"#AppliedCouponCode\").val() == $(this).val() && $(this).val() != '') {\n      $('#basic-addon1').html('Applied').removeClass('grey applyOfferButton').addClass('green ');\n    } else {\n      $('#basic-addon1').html('Apply').addClass('grey applyOfferButton').removeClass('green');\n    }\n  });\n  $('.paidType').on('change', function () {\n    amountType();\n  });\n  $('#agentCompanyCode1').on('keyup', function () {\n    $('#applyCodeButton').html('Apply').removeClass('green').addClass('grey');\n  });\n  $(document).on('click', '.applyCodeButton', function () {\n    calculateAgentCorpCodeDiscount();\n    calculateAmount();\n    return;\n  });\n  $('body').on('click', '#removeCoupon', function () {\n    sendMsg = \"Offer code removed successfully!\";\n    removeDiscount(sendMsg);\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/frontend/booking.js\n");

/***/ }),

/***/ "./resources/js/frontend/custom.js":
/*!*****************************************!*\
  !*** ./resources/js/frontend/custom.js ***!
  \*****************************************/
/***/ (() => {

eval("if (document.getElementById(\"landingpage\") || document.getElementById(\"searchpage\") || document.getElementById(\"bookingpage\") || document.getElementById(\"visitpage\")) {\n  $(document).ready(function () {\n    var nowDate = new Date();\n    var checkindate = $(\".check-in-input\").val();\n    var checkoutdate = $(\".check-out-input\").val();\n    var checkinDate2;\n    var today = new Date(nowDate.getFullYear(), nowDate.getMonth(), nowDate.getDate(), 0, 0, 0, 0);\n    $(\".check-in-render\").daterangepicker({\n      singleDatePicker: true,\n      autoApply: true,\n      startDate: checkindate ? new Date(checkindate) : new Date(),\n      disabledPast: true,\n      customClass: \"\",\n      widthSingle: 300,\n      onlyShowCurrentMonth: true,\n      minDate: today,\n      opens: bookingCore.rtl ? \"right\" : \"left\",\n      locale: {\n        format: \"YYYY-MM-DD\",\n        direction: bookingCore.rtl ? \"rtl\" : \"ltr\",\n        firstDay: daterangepickerLocale.first_day_of_week\n      }\n    }, function (start, end, label) {\n      $(\".check-in-input\").val(start.format(\"YYYY-MM-DD\"));\n      var start_date = $(\".check-in-input\").val();\n      var end_date = $(\".check-out-input\").val();\n\n      if (start_date > end_date && end_date != \"\") {\n        $(\".check-out-input\").val(start_date);\n        $(\".check-in-input\").val(start_date);\n        $(\".check-out-render\").html('<i class=\"ri-calendar-line cal-icon mr-1 calendar-check-in-out-fa\"></i>' + start.format(bookingCore.view_end_date_formate));\n        $(\".check-in-render\").html('<i class=\"ri-calendar-line cal-icon mr-1 calendar-check-in-out-fa\"></i>' + start.format(bookingCore.view_end_date_formate));\n      } else {\n        $(\".check-in-render\").html('<i class=\"ri-calendar-line cal-icon mr-1 calendar-check-in-out-fa\"></i>' + start.format(bookingCore.view_end_date_formate));\n      }\n\n      checkinDate2 = new Date(start_date);\n      checkindate = new Date(checkinDate2.getFullYear(), checkinDate2.getMonth(), checkinDate2.getDate(), 0, 0, 0, 0);\n      checkOutDate(checkindate);\n    });\n\n    var checkOutDate = function checkOutDate(checkInDate) {\n      $(\".check-out-render\").daterangepicker({\n        singleDatePicker: true,\n        startDate: checkoutdate ? new Date(checkoutdate) : new Date(),\n        autoApply: true,\n        disabledPast: true,\n        customClass: \"\",\n        widthSingle: 300,\n        onlyShowCurrentMonth: true,\n        minDate: checkInDate ? checkInDate : today,\n        opens: bookingCore.rtl ? \"right\" : \"left\",\n        locale: {\n          format: \"YYYY-MM-DD\",\n          direction: bookingCore.rtl ? \"rtl\" : \"ltr\",\n          firstDay: checkInDate ? checkInDate : daterangepickerLocale.first_day_of_week\n        }\n      }, function (start, end, label) {\n        // console.log(checkindate);\n        // alert(checkindate);\n        $(\".check-out-input\").val(end.format(\"YYYY-MM-DD\"));\n        var start_date = $(\".check-in-input\").val();\n        var end_date = $(\".check-out-input\").val();\n\n        if (end_date < start_date) {\n          $(\".check-out-input\").val(end_date);\n          $(\".check-in-input\").val(end_date);\n          $(\".check-out-render\").html('<i class=\"ri-calendar-line cal-icon mr-1 calendar-check-in-out-fa\"></i>' + end.format(bookingCore.view_end_date_formate));\n          $(\".check-in-render\").html('<i class=\"ri-calendar-line cal-icon mr-1 calendar-check-in-out-fa\"></i>' + end.format(bookingCore.view_end_date_formate));\n        } else {\n          $(\".check-out-render\").html('<i class=\"ri-calendar-line cal-icon mr-1 calendar-check-in-out-fa\"></i>' + end.format(bookingCore.view_end_date_formate));\n        }\n      });\n    };\n\n    checkOutDate(new Date());\n    /****For Hotel Adults & children ***/\n\n    $(\".select-adults-dropdown .btn-minus\").click(function (e) {\n      e.stopPropagation();\n      var parent = $(this).closest(\".select-adults\");\n      var input = parent.find(\".select-adults-dropdown [name=\" + $(this).data(\"input\") + \"]\");\n      var min = parseInt(input.attr(\"min\"));\n      var old = parseInt(input.val());\n\n      if (old <= min) {\n        return;\n      }\n\n      input.val(old - 1);\n      updateAdultsCountText(parent);\n    });\n    $(\".select-adults-dropdown .btn-add\").click(function (e) {\n      e.stopPropagation();\n      var parent = $(this).closest(\".select-adults\");\n      var input = parent.find(\".select-adults-dropdown [name=\" + $(this).data(\"input\") + \"]\");\n      var max = parseInt(input.attr(\"max\"));\n      var old = parseInt(input.val());\n\n      if (old >= max) {\n        return;\n      }\n\n      input.val(old + 1);\n      updateAdultsCountText(parent);\n    });\n    $(\".select-adults-dropdown input\").keyup(function (e) {\n      var parent = $(this).closest(\".select-adults\");\n      updateAdultsCountText(parent);\n    });\n    $(\".select-adults-dropdown input\").change(function (e) {\n      var parent = $(this).closest(\".select-adults\");\n      updateAdultsCountText(parent);\n    });\n\n    function updateAdultsCountText(parent) {\n      var adults = parseInt(parent.find(\"[name=adults]\").val());\n      var children = parseInt(parent.find(\"[name=children]\").val());\n      var adultsHtml = parent.find(\".render .adults .multi\").data(\"html\");\n      parent.find(\".render .adults .multi\").html(adultsHtml.replace(\":count\", adults));\n\n      if (document.getElementById(\"searchpage\")) {\n        var hotelMinadulthtml = parent.find(\".render .adults .one\").data(\"hoteladulthtml\");\n        parent.find(\".render .adults .one\").html(hotelMinadulthtml.replace(\":count\", adults));\n      }\n\n      var childrenHtml = parent.find(\".render .children .multi\").data(\"html\");\n      parent.find(\".render .children .multi\").html(childrenHtml.replace(\":count\", children));\n\n      if (adults > 1) {\n        parent.find(\".render .adults .multi\").removeClass(\"d-none\");\n        parent.find(\".render .adults .one\").addClass(\"d-none\");\n      } else {\n        parent.find(\".render .adults .multi\").addClass(\"d-none\");\n        parent.find(\".render .adults .one\").removeClass(\"d-none\");\n      }\n\n      if (children > 1) {\n        parent.find(\".render .children .multi\").removeClass(\"d-none\");\n        parent.find(\".render .children .one\").addClass(\"d-none\");\n      } else {\n        parent.find(\".render .children .multi\").addClass(\"d-none\");\n        parent.find(\".render .children .one\").removeClass(\"d-none\").html(parent.find(\".render .children .one\").data(\"html\").replace(\":count\", children));\n      }\n    }\n    /****End Hotel Adults & children ***/\n\n    /****For Flat Adults & children ***/\n\n\n    $(\".select-flat-adults-dropdown .btn-minus\").click(function (e) {\n      e.stopPropagation();\n      var parent = $(this).closest(\".select-flat-adults\");\n      var input = parent.find(\".select-flat-adults-dropdown [name=\" + $(this).data(\"input\") + \"]\");\n      var min = parseInt(input.attr(\"min\"));\n      var old = parseInt(input.val());\n\n      if (old <= min) {\n        return;\n      }\n\n      input.val(old - 1);\n      updateFlatAdultsCountText(parent);\n    });\n    $(\".select-flat-adults-dropdown .btn-add\").click(function (e) {\n      e.stopPropagation();\n      var flatbhk_val = $(\".flatbhk\").val();\n\n      if (flatbhk_val != \"\") {\n        var max_attrval = parseInt(flatbhk_val * 2);\n        var parent = $(this).closest(\".select-flat-adults\");\n        var input = parent.find(\".select-flat-adults-dropdown [name=\" + $(this).data(\"input\") + \"]\");\n        $(input).attr(\"max\", max_attrval);\n        var max = parseInt(input.attr(\"max\"));\n        var old = parseInt(input.val());\n\n        if (old >= max) {\n          return;\n        }\n\n        input.val(old + 1);\n        updateFlatAdultsCountText(parent);\n      } else {\n        $(\".flat-options\").show();\n        return;\n      }\n    });\n    $(\".select-flat-adults-dropdown input\").keyup(function (e) {\n      var parent = $(this).closest(\".select-flat-adults\");\n      updateFlatAdultsCountText(parent);\n    });\n    $(\".select-flat-adults-dropdown input\").change(function (e) {\n      var parent = $(this).closest(\".select-flat-adults\");\n      updateFlatAdultsCountText(parent);\n    });\n\n    function updateFlatAdultsCountText(parent) {\n      var adults = parseInt(parent.find(\"[name=adults]\").val());\n      var children = parseInt(parent.find(\"[name=children]\").val());\n      var adultsHtml = parent.find(\".render .adults .multi\").data(\"html\");\n      parent.find(\".render .adults .multi\").html(adultsHtml.replace(\":count\", adults));\n\n      if (document.getElementById(\"searchpage\")) {\n        var flatMinadulthtml = parent.find(\".render .adults .one\").data(\"flatadulthtml\");\n        parent.find(\".render .adults .one\").html(flatMinadulthtml.replace(\":count\", adults));\n      }\n\n      var childrenHtml = parent.find(\".render .children .multi\").data(\"html\");\n      parent.find(\".render .children .multi\").html(childrenHtml.replace(\":count\", children));\n\n      if (adults > 1) {\n        parent.find(\".render .adults .multi\").removeClass(\"d-none\");\n        parent.find(\".render .adults .one\").addClass(\"d-none\");\n      } else {\n        parent.find(\".render .adults .multi\").addClass(\"d-none\");\n        parent.find(\".render .adults .one\").removeClass(\"d-none\");\n      }\n\n      if (children > 1) {\n        parent.find(\".render .children .multi\").removeClass(\"d-none\");\n        parent.find(\".render .children .one\").addClass(\"d-none\");\n      } else {\n        parent.find(\".render .children .multi\").addClass(\"d-none\");\n        parent.find(\".render .children .one\").removeClass(\"d-none\").html(parent.find(\".render .children .one\").data(\"html\").replace(\":count\", children));\n      }\n    }\n    /****End Flat Adults & children ***/\n\n    /****For Guest Selectors***/\n\n\n    $(\".guests-dropdown .btn-minus\").click(function (e) {\n      e.stopPropagation();\n      var parent = $(this).closest(\".select-guests\");\n      var input = parent.find(\".guests-dropdown [name=\" + $(this).data(\"input\") + \"]\");\n      var min = parseInt(input.attr(\"min\"));\n      var old = parseInt(input.val());\n\n      if (old <= min) {\n        return;\n      }\n\n      input.val(old - 1);\n      updateGuestCountText(parent);\n    });\n    $(\".guests-dropdown .btn-add\").click(function (e) {\n      e.stopPropagation();\n      var parent = $(this).closest(\".select-guests\");\n      var input = parent.find(\".guests-dropdown [name=\" + $(this).data(\"input\") + \"]\");\n      var max = parseInt(input.attr(\"max\"));\n      var old = parseInt(input.val());\n\n      if (old >= max) {\n        return;\n      }\n\n      input.val(old + 1);\n      updateGuestCountText(parent);\n    });\n    $(\".guests-dropdown input\").keyup(function (e) {\n      var parent = $(this).closest(\".select-guests\");\n      updateGuestCountText(parent);\n    });\n    $(\".guests-dropdown input\").change(function (e) {\n      var parent = $(this).closest(\".select-guests\");\n      updateGuestCountText(parent);\n    });\n\n    function updateGuestCountText(parent) {\n      var guests = parseInt(parent.find(\"[name=guests]\").val());\n      var guestsHtml = parent.find(\".render .guests .multi\").data(\"html\");\n      parent.find(\".render .guests .multi\").html(guestsHtml.replace(\":count\", guests));\n\n      if (document.getElementById(\"searchpage\")) {\n        var guestsMinHtml = parent.find(\".render .guests .one\").data(\"gusethtml\");\n        parent.find(\".render .guests .one\").html(guestsMinHtml.replace(\":count\", guests));\n      }\n\n      if (guests > 1) {\n        parent.find(\".render .guests .multi\").removeClass(\"d-none\");\n        parent.find(\".render .guests .one\").addClass(\"d-none\");\n      } else {\n        parent.find(\".render .guests .multi\").addClass(\"d-none\");\n        parent.find(\".render .guests .one\").removeClass(\"d-none\");\n      }\n    }\n    /****End Guest Selectors***/\n\n  });\n}\n\nif (document.getElementById(\"landingpage\")) {\n  $(document).ready(function () {\n    $(\".cityList .city-carousel\").owlCarousel({\n      loop: _SliderCityIsLoop,\n      autoWidth: true,\n      items: 4,\n      autoplay: true,\n      autoplayTimeout: 3000,\n      smartSpeed: 3000,\n      margin: 0,\n      nav: false,\n      responsive: {\n        0: {\n          items: 3\n        },\n        600: {\n          items: 2\n        },\n        1000: {\n          items: 4\n        }\n      }\n    });\n    $(\".dealofthe_day .owl-carousel\").owlCarousel({\n      items: 4,\n      loop: false,\n      margin: 15,\n      nav: false,\n      autoplay: true,\n      autoplayTimeout: 3000,\n      smartSpeed: 3000,\n      responsive: {\n        0: {\n          items: 1\n        },\n        768: {\n          items: 2\n        },\n        1000: {\n          items: 4\n        }\n      }\n    });\n    $(\".customer_trust .owl-carousel\").owlCarousel({\n      items: _SliderCoountForTrust,\n      responsive: {\n        480: {\n          items: 1\n        },\n        // from zero to 480 screen width 4 items\n        768: {\n          items: 1\n        },\n        // from 480 screen widthto 768 6 items\n        1024: {\n          items: 1 // from 768 screen width to 1024 8 items\n\n        }\n      },\n      autoplay: false,\n      margin: 10,\n      nav: true,\n      dots: false,\n      loop: false\n    });\n    $(\".add_Slider .owl-carousel\").owlCarousel({\n      loop: false,\n      margin: 20,\n      nav: false,\n      item: 2,\n      autoplay: true,\n      autoplayTimeout: 7000,\n      lazyLoad: true,\n      responsive: {\n        0: {\n          items: 1\n        },\n        600: {\n          items: 2\n        },\n        1000: {\n          items: 2\n        }\n      }\n    });\n    $(\".feature_property .owl-carousel\").owlCarousel({\n      margin: 30,\n      loop: false,\n      nav: false,\n      item: 4,\n      autoplay: false,\n      autoplayTimeout: 7000,\n      lazyLoad: true,\n      responsive: {\n        0: {\n          items: 1\n        },\n        600: {\n          items: 2\n        },\n        1000: {\n          items: 4\n        }\n      }\n    });\n  });\n} //key frame js\n\n\n$(document).ready(function () {\n  var keyslide = $(\".key_features .owl-carousel\");\n  keyslide.owlCarousel({\n    margin: 30,\n    loop: true,\n    nav: false,\n    item: 5,\n    autoplay: true,\n    autoplayTimeout: 7000,\n    lazyLoad: true,\n    responsive: {\n      0: {\n        items: 1\n      },\n      768: {\n        items: 2\n      },\n      1000: {\n        items: 5\n      }\n    }\n  }); // Custom Button\n\n  $(\".customNextBtn\").click(function () {\n    keyslide.trigger(\"next.owl.carousel\");\n  });\n  $(\".customPreviousBtn\").click(function () {\n    keyslide.trigger(\"prev.owl.carousel\");\n  });\n});\n\nif (document.getElementById(\"brandSlider_script\")) {\n  $(\".brandSlider .owl-carousel\").owlCarousel({\n    margin: 30,\n    loop: true,\n    nav: false,\n    item: 8,\n    autoplay: true,\n    autoplayTimeout: 2500,\n    lazyLoad: true,\n    smartSpeed: 2500,\n    responsive: {\n      0: {\n        items: 3\n      },\n      768: {\n        items: 5\n      },\n      1000: {\n        items: 8\n      }\n    }\n  });\n}\n\nif (document.getElementById(\"propertyownerlandingpage\")) {\n  $(\".customer_trust .owl-carousel\").owlCarousel({\n    items: _SliderCoountForTrust,\n    responsive: {\n      480: {\n        items: 1\n      },\n      // from zero to 480 screen width 4 items\n      768: {\n        items: 1\n      },\n      // from 480 screen widthto 768 6 items\n      1024: {\n        items: 1 // from 768 screen width to 1024 8 items\n\n      }\n    },\n    autoplay: true,\n    margin: 10,\n    nav: false,\n    dots: false\n  });\n}\n\nif (document.getElementById(\"customer_profile_tab\")) {\n  $(\".tablinks\").click(function () {\n    var i, tabcontent, tablinks;\n    tabcontent = document.getElementsByClassName(\"tabcontent\");\n\n    for (i = 0; i < tabcontent.length; i++) {\n      tabcontent[i].style.display = \"none\";\n    }\n\n    tablinks = document.getElementsByClassName(\"tablinks\");\n\n    for (i = 0; i < tablinks.length; i++) {\n      tablinks[i].className = tablinks[i].className.replace(\" active\", \"\");\n    }\n\n    tabName = $(this).data(\"tabname\");\n    document.getElementById(tabName).style.display = \"block\";\n    $(this).addClass(\"active\"); //evt.currentTarget.className += \" active\";\n  }); // Get the element with id=\"defaultOpen\" and click on it\n\n  document.getElementById(\"defaultOpen\").click();\n}\n\nif (document.getElementById(\"vendor_complete_profile\")) {\n  $(document).ready(function () {\n    if (window.File && window.FileList && window.FileReader) {\n      $(\"body\").delegate(\".uploadfiles\", \"change\", function (e) {\n        var files = e.target.files,\n            filesLength = files.length;\n        var _id_ = this.id;\n\n        for (var i = 0; i < filesLength; i++) {\n          var f = files[i];\n          var fileReader = new FileReader();\n\n          fileReader.onload = function (e) {\n            $(\"#\" + _id_).next(\".pip\").remove();\n            var file = e.target;\n\n            if (f.type == \"application/pdf\") {\n              $('<span class=\"pip\">' + '<img class=\"imageThumb\" src=\"' + pdf_file_path + '\" title=\"' + file.name + '\"/>' + '<br/><span class=\"remove\" data-remove=\"' + _id_ + '\">Remove image</span>' + \"</span>\").insertAfter(\"#\" + _id_);\n            } else {\n              $('<span class=\"pip\">' + '<img class=\"imageThumb\" src=\"' + e.target.result + '\" title=\"' + file.name + '\"/>' + '<br/><span class=\"remove\" data-remove=\"' + _id_ + '\">Remove image</span>' + \"</span>\").insertAfter(\"#\" + _id_);\n            }\n\n            $(\".remove\").click(function () {\n              $(this).parent(\".pip\").remove();\n              $(\".\" + $(this).data(\"remove\")).val(\"\");\n            });\n          };\n\n          fileReader.readAsDataURL(f);\n        }\n      });\n    } else {\n      alert(\"Your browser doesn't support to File API\");\n    }\n  });\n}\n\nif (document.getElementById(\"property_details\") || document.getElementById(\"manage_property\")) {\n  var myFunctionShowMore = function myFunctionShowMore() {\n    var moreText = $(\".moreAmenites\");\n\n    if ($(\"#myBtn\").text() == 'Show More') {\n      moreText.show();\n      $(\"#myBtn\").text('Show Less');\n    } else {\n      $(\"#myBtn\").text('Show More');\n      moreText.hide();\n    }\n  };\n\n  $(document).on('click', '#myBtn', function () {\n    myFunctionShowMore();\n  });\n}\n\nif (document.getElementById(\"manage_property\") || document.getElementById(\"customer_profile\")) {\n  $(document).ready(function () {\n    $(\"#state-dropdown\").on(\"change\", function () {\n      getstateCIty();\n    });\n    $(\"#city-dropdown\").on(\"change\", function () {\n      getCItyArea();\n    });\n    getstateCIty();\n\n    function getstateCIty() {\n      var state_id = $(\"#state-dropdown\").val();\n      $.ajax({\n        url: APP_URL + \"/api/get-state-cities\",\n        type: \"POST\",\n        data: {\n          state_id: state_id\n        },\n        dataType: \"json\",\n        success: function success(result) {\n          $(\"#city-dropdown\").html(\"\");\n          $(\"#city-dropdown\").append('<option value=\"\">Select City</option>');\n          $.each(result.cities, function (key, value) {\n            $(\"#city-dropdown\").append('<option value=\"' + value.id + '\">' + value.name + \"</option>\");\n\n            if ($(\"#city_id\").val() == value.id) {\n              $(\"#city-dropdown\").val($(\"#city_id\").val());\n            }\n          });\n          getCItyArea();\n        }\n      });\n    }\n\n    function getCItyArea() {\n      var city_id__ = $(\"#city-dropdown\").val();\n      $.ajax({\n        url: APP_URL + \"/api/get-cities-area\",\n        type: \"POST\",\n        data: {\n          city_id: city_id__\n        },\n        dataType: \"json\",\n        success: function success(result) {\n          $(\"#area-dropdown\").html(\"\");\n          $(\"#area-dropdown\").append('<option value=\"\">Select Area</option>');\n          $.each(result.areas, function (key, value) {\n            $(\"#area-dropdown\").append('<option value=\"' + value.id + '\">' + value.name + \"</option>\");\n\n            if ($(\"#area_id\").val() == value.id) {\n              $(\"#area-dropdown\").val($(\"#area_id\").val());\n            }\n          });\n        }\n      });\n    }\n\n    $(\"body\").delegate(\".apply_heading\", \"click\", function () {\n      var _BlockId = $(this).data(\"blockid\");\n\n      var step_count = $(\"#stepCount\").text();\n      $(\".steps\").hide();\n      $(\".\" + _BlockId).show();\n      $(\"#\" + _BlockId).show();\n      $(\"#stepCount\").text(step_count - 1);\n    });\n  });\n}\n\nif (document.getElementById(\"manage_property\")) {\n  var initialize = function initialize() {\n    var input = document.getElementById(\"location\");\n    var autocomplete = new google.maps.places.Autocomplete(input);\n    google.maps.event.addListener(autocomplete, \"place_changed\", function () {\n      var place = autocomplete.getPlace(); //document.getElementById('city').value = place.name;\n\n      document.getElementById(\"cityLat\").value = place.geometry.location.lat();\n      document.getElementById(\"cityLng\").value = place.geometry.location.lng();\n      showMap(place);\n    });\n  };\n\n  // Define callback function for successful attempt\n  var showMap = function showMap(place) {\n    // Get location data\n    lat = place.geometry.location.lat();\n    long = place.geometry.location.lng();\n    var latlong = new google.maps.LatLng(lat, long);\n    var myOptions = {\n      center: latlong,\n      zoom: 16,\n      mapTypeControl: true,\n      navigationControlOptions: {\n        style: google.maps.NavigationControlStyle.SMALL\n      }\n    };\n    var map = new google.maps.Map(document.getElementById(\"embedMap\"), myOptions);\n    var marker = new google.maps.Marker({\n      position: latlong,\n      map: map,\n      title: place.name,\n      icon: mapMarkerImage\n    });\n  };\n\n  var showMapUsingGeoLocation = function showMapUsingGeoLocation(placeName, lat, _long3) {\n    // Get location data\n    var latlong = new google.maps.LatLng(lat, _long3);\n    var myOptions = {\n      center: latlong,\n      zoom: 16,\n      mapTypeControl: true,\n      navigationControlOptions: {\n        style: google.maps.NavigationControlStyle.SMALL\n      }\n    };\n    var map = new google.maps.Map(document.getElementById(\"embedMap\"), myOptions);\n    var marker = new google.maps.Marker({\n      position: latlong,\n      map: map,\n      title: placeName,\n      icon: mapMarkerImage\n    });\n  };\n\n  var initMap = function initMap() {\n    lat = $(\"#cityLat\").val();\n    long = $(\"#cityLng\").val();\n    place_name = $(\"#location\").val();\n    var latlong = new google.maps.LatLng(lat, long);\n    var myOptions = {\n      center: latlong,\n      zoom: 16,\n      mapTypeControl: true,\n      navigationControlOptions: {\n        style: google.maps.NavigationControlStyle.SMALL\n      }\n    };\n    var map = new google.maps.Map(document.getElementById(\"embedMap\"), myOptions);\n    var marker = new google.maps.Marker({\n      position: latlong,\n      map: map,\n      title: place_name,\n      icon: mapMarkerImage\n    });\n  };\n\n  $(document).on('click', '.backButton', function () {\n    $('.content_steps').text($(this).data('title'));\n  });\n  var locatorSection = document.getElementById(\"searchtag\");\n  var inputLocation = document.getElementById(\"location\");\n\n  if (document.getElementById(\"locator-button\")) {\n    var initGeoLocation = function initGeoLocation() {\n      var locatorButton = document.getElementById(\"locator-button\");\n      locatorButton.addEventListener(\"click\", locatorButtonPressed);\n    };\n\n    var locatorButtonPressed = function locatorButtonPressed() {\n      locatorSection.classList.add(\"loading\");\n      navigator.geolocation.getCurrentPosition(function (position) {\n        getUserAddressBy(position.coords.latitude, position.coords.longitude);\n      }, function (error) {\n        locatorSection.classList.remove(\"loading\");\n        Lobibox.notify(\"error\", {\n          position: \"top right\",\n          msg: \"The Locator was denied :( Please add your address manually\"\n        });\n      });\n    };\n\n    var getUserAddressBy = function getUserAddressBy(lat, _long) {\n      var xhttp = new XMLHttpRequest();\n\n      xhttp.onreadystatechange = function () {\n        if (this.readyState == 4 && this.status == 200) {\n          var address = JSON.parse(this.responseText);\n          setAddressToInputField(address, lat, _long);\n        }\n      };\n\n      xhttp.open(\"GET\", \"https://maps.googleapis.com/maps/api/geocode/json?latlng=\" + lat + \",\" + _long + \"&key=\" + $(\"#gky\").val(), true);\n      xhttp.send();\n    };\n\n    var setAddressToInputField = function setAddressToInputField(address, lat, _long2) {\n      var placeName = address.results[0].formatted_address;\n      inputLocation.value = placeName;\n      document.getElementById(\"cityLat\").value = lat;\n      document.getElementById(\"cityLng\").value = _long2;\n      showMapUsingGeoLocation(placeName, lat, _long2);\n      locatorSection.classList.remove(\"loading\");\n    };\n\n    initGeoLocation();\n  }\n\n  google.maps.event.addDomListener(window, \"load\", initialize);\n  google.maps.event.addDomListener(window, \"load\", initMap);\n  $(document).ready(function () {\n    if (window.File && window.FileList && window.FileReader) {\n      // $(\".uploadSinglefile\").on(\"change\", function (e) {\n      $(\"body\").delegate(\".uploadSinglefile\", \"change\", function (e) {\n        var _this = this;\n\n        setTimeout(function () {\n          var files = e.target.files,\n              filesLength = files.length;\n          var _id_ = _this.id;\n          var MediaId = $(\"#\" + _id_).children(\".uploadfileBtn\").find(\"input\").attr(\"id\");\n\n          if (filesLength > 0) {\n            for (var i = 0; i < filesLength; i++) {\n              var f = files[i];\n              var fileReader = new FileReader();\n\n              fileReader.onload = function (e) {\n                $(\"#\" + _id_).next(\".pip\").remove();\n\n                if ($(\"#ht_\" + MediaId)) {\n                  $(\"#ht_\" + MediaId).html(\"\");\n                }\n\n                $(\"#\" + _id_).next(\".pip\").remove();\n                var file = e.target;\n\n                if (f.type == \"application/pdf\") {\n                  $('<span class=\"pip\">' + '<img class=\"imageThumb\" src=\"' + pdf_file_path + '\" title=\"' + file.name + '\"/>' + '<br/><span class=\"remove\" data-remove=\"' + _id_ + '\">Remove image</span>' + \"</span>\").insertAfter(\"#\" + _id_);\n                } else {\n                  $('<span class=\"pip\">' + '<img class=\"imageThumb\" src=\"' + e.target.result + '\" title=\"' + file.name + '\"/>' + '<br/><span class=\"remove\" data-remove=\"' + _id_ + '\">Remove image</span>' + \"</span>\").insertAfter(\"#\" + _id_);\n                }\n\n                $(\".remove\").click(function () {\n                  $(this).parent(\".pip\").remove();\n                  $(\".\" + $(this).data(\"remove\")).val(\"\");\n                });\n              };\n\n              fileReader.readAsDataURL(f);\n            }\n          }\n        }, 1500);\n      });\n    } else {\n      alert(\"Your browser doesn't support to File API\");\n    }\n\n    $(\"body\").delegate(\".removerecord\", \"click\", function (e) {\n      $(this).parent(\".pip\").remove();\n\n      var _fieldname = $(this).data(\"remove\");\n\n      var __count_fields = document.querySelectorAll('.pip > input[name=\"' + _fieldname + '[]\"]');\n\n      $(\"#f_\" + _fieldname).val(__count_fields.length);\n    });\n    $(\"body\").delegate(\".removesingle\", \"click\", function (e) {\n      $(this).parent(\".pip\").remove();\n      $(\".\" + $(this).data(\"remove\")).val(\"\");\n    });\n  });\n}\n\nif (document.getElementsByClassName(\"statecityajax\")) {\n  // alert('statecityajax');\n  $(document).ready(function () {\n    $('#state-dropdown').on('change', function () {\n      getstateCIty();\n    });\n    $('#city-dropdown').on('change', function () {\n      getCItyArea();\n    }); // getstateCIty();\n\n    function getstateCIty() {\n      var state_id = $(\"#state-dropdown\").val();\n      $.ajax({\n        url: APP_URL + '/api/get-state-cities',\n        type: \"POST\",\n        data: {\n          state_id: state_id\n        },\n        dataType: 'json',\n        success: function success(result) {\n          $(\"#city-dropdown\").html('');\n          $(\"#city-dropdown\").append('<option value=\"\">Select City</option>');\n          $.each(result.cities, function (key, value) {\n            $(\"#city-dropdown\").append('<option value=\"' + value.id + '\">' + value.name + '</option>');\n\n            if ($(\"#city_id\").val() == value.id) {\n              $(\"#city-dropdown\").val($(\"#city_id\").val());\n            }\n          });\n          getCItyArea();\n        }\n      });\n    }\n\n    function getCItyArea() {\n      var city_id__ = $(\"#city-dropdown\").val();\n      $.ajax({\n        url: APP_URL + '/api/get-cities-area',\n        type: \"POST\",\n        data: {\n          city_id: city_id__\n        },\n        dataType: 'json',\n        success: function success(result) {\n          $(\"#area-dropdown\").html('');\n          $(\"#area-dropdown\").append('<option value=\"\">Select Area</option>');\n          $.each(result.areas, function (key, value) {\n            $(\"#area-dropdown\").append('<option value=\"' + value.id + '\">' + value.name + '</option>');\n\n            if ($(\"#area_id\").val() == value.id) {\n              $(\"#area-dropdown\").val($(\"#area_id\").val());\n            }\n          });\n        }\n      });\n    }\n  });\n}\n\nif (document.getElementById(\"searchtag\")) {\n  $(\"#location\").keyup(function () {\n    document.getElementById(\"cityLat\").value = \"\";\n    document.getElementById(\"cityLng\").value = \"\";\n  });\n  $(\"#location\").blur(function () {\n    if (!document.getElementById(\"cityLat\").value && !document.getElementById(\"cityLng\").value) {\n      document.getElementById(\"location\").value = \"\";\n    }\n  });\n}\n\nif (document.getElementById(\"manage_my_property\")) {\n  $(document).on(\"click\", \".myproperty_modal\", function () {\n    var removeId = $(this).data(\"remove\");\n    $(\".pip\").remove();\n\n    if ($(\"#f_\" + removeId).val()) {\n      $(\"#f_\" + removeId).val(\"\");\n    }\n\n    if ($(\"#ht_\" + removeId).val()) {\n      $(\"#ht_\" + removeId).val(\"\");\n    }\n\n    var id = $(this).data(\"id\");\n    var target = $(this).attr(\"data-target\");\n    $(target).modal(\"show\");\n    $(target + \" .modal-body #property_id\").val(id);\n  });\n  $(document).on(\"click\", \".delete\", function () {\n    var property_id = $(\"#property_id\").val();\n    var url = $(this).attr(\"data-url\");\n    $.ajax({\n      type: \"POST\",\n      url: url,\n      dataType: \"json\",\n      data: {\n        property_id: property_id\n      },\n      success: function success(data) {\n        if (data[\"status\"]) {\n          $(\"#deleteProperty\").modal(\"hide\");\n          Lobibox.notify(\"success\", {\n            position: \"top right\",\n            msg: data[\"message\"]\n          });\n        }\n      },\n      error: function error(data) {\n        console.log(data);\n      }\n    });\n  });\n\n  if (window.File && window.FileList && window.FileReader) {\n    $(\".uploadSinglefile\").on(\"change\", function (e) {\n      var _this2 = this;\n\n      setTimeout(function () {\n        var files = e.target.files,\n            filesLength = files.length;\n        var _id_ = _this2.id;\n\n        if (filesLength > 0) {\n          for (var i = 0; i < filesLength; i++) {\n            var f = files[i];\n            var fileReader = new FileReader();\n\n            fileReader.onload = function (e) {\n              $(\"#\" + _id_).next(\".pip\").remove();\n              var file = e.target;\n\n              if (f.type == \"application/pdf\") {\n                $('<span class=\"pip\">' + '<img class=\"imageThumb\" src=\"' + pdf_file_path + '\" title=\"' + file.name + '\"/>' + '<br/><span class=\"remove\" data-remove=\"' + _id_ + '\">Remove image</span>' + \"</span>\").insertAfter(\"#\" + _id_);\n              } else {\n                $('<span class=\"pip\">' + '<img class=\"imageThumb\" src=\"' + e.target.result + '\" title=\"' + file.name + '\"/>' + '<br/><span class=\"remove\" data-remove=\"' + _id_ + '\">Remove image</span>' + \"</span>\").insertAfter(\"#\" + _id_);\n              }\n\n              $(\".remove\").click(function () {\n                $(this).parent(\".pip\").remove();\n                $(\".\" + $(this).data(\"remove\")).val(\"\");\n              });\n            };\n\n            fileReader.readAsDataURL(f);\n          }\n        }\n      }, 1500);\n    });\n  } else {\n    alert(\"Your browser doesn't support to File API\");\n  }\n\n  $(document).on(\"click\", \".changestatus\", function () {\n    var publish_id = $(this).attr(\"id\");\n    var id = $(this).attr(\"data-id\");\n    var status = $(this).attr(\"data-default\");\n    var title = $(this).attr(\"data-title\");\n    var url = $(this).attr(\"data-url\");\n    Lobibox.confirm({\n      draggable: false,\n      closeButton: false,\n      closeOnEsc: false,\n      title: title + \" Confirmation\",\n      msg: \"Are you sure you, want to \" + title + \"?\",\n      callback: function callback($this, type, ev) {\n        if (type === \"yes\") {\n          $.ajax({\n            type: \"POST\",\n            url: url,\n            dataType: \"json\",\n            data: {\n              id: id,\n              status: status\n            },\n            success: function success(data) {\n              if (data[\"status\"]) {\n                if (data[\"is_search\"]) {\n                  serach();\n                }\n\n                Lobibox.notify(\"success\", {\n                  position: \"top right\",\n                  msg: data[\"message\"]\n                });\n              }\n            },\n            error: function error(data) {\n              console.log(data);\n            }\n          });\n        } else {\n          $(this).val($(this).data(\"default\"));\n\n          if (status == 1) {\n            $(\"#\" + publish_id).prop(\"checked\", true);\n          } else {\n            $(\"#\" + publish_id).prop(\"checked\", false);\n          }\n\n          return false;\n        }\n      }\n    });\n  }); //Offer apply js\n\n  $(document).on(\"click\", \".myproperty_modal_offer\", function () {\n    $(\".pip\").remove();\n    var id = $(this).data(\"id\");\n    var url = $(this).attr(\"data-url\");\n    var type_id = $(this).data(\"property-id\");\n    var offer_url = $(this).attr(\"data-offerapplyurl\");\n    $.ajax({\n      type: \"POST\",\n      url: url,\n      dataType: \"json\",\n      data: {\n        property_id: id,\n        property_type_id: type_id\n      },\n      beforeSend: function beforeSend() {\n        $(\"#loader\").show();\n      },\n      success: function success(data) {\n        $(\"#loader\").hide();\n\n        if (data[\"status_code\"] == 205) {\n          $(\"#applyOffer\").modal(\"hide\");\n          Lobibox.notify(data[\"type\"], {\n            position: \"top right\",\n            msg: data[\"message\"]\n          });\n          return false;\n        }\n\n        var html = '<input type=\"hidden\" name=\"property_id\" id=\"property_id\" value=\"' + id + '\">';\n\n        if (data.length != 0) {\n          $.each(data, function (key, val) {\n            if (val.is_offer_applied == 1) {\n              var cls = \" active\";\n              var applyBtn = '<a href=\"javascript:;\" data-id=\"' + key + '\" class=\"grey text-uppercase font18 medium offer-apply\" data-url=\"' + offer_url + '\" data-title=\"Remove\"> Applied </a>';\n            } else {\n              var cls = \"\";\n              var applyBtn = '<a href=\"javascript:;\" data-id=\"' + key + '\" class=\"green text-uppercase font18 medium offer-apply\" data-url=\"' + offer_url + '\" data-title=\"Apply\"> APPLY </a>';\n            }\n\n            html += '<div class=\"offerBox offer-applied ' + cls + '\"><div class=\"d-flex text-left\"><figure class=\"mb-0\"><img src=\"' + val.image + '\" width=\"100px\" height=\"70px\"></figure><div class=\"contentWrap w-100\"><div class=\"d-flex justify-content-between mb-2\"><span class=\"couponCode\">' + val.coupon_code + \"</span>\" + applyBtn + '</div><p class=\"mb-0 grey font16 regular turnicate1\">' + val.title + '</p> </div></div><div class=\"mt-3 text-left\"><p class=\"mb-0 grey font16 regular\">' + val.description + '</p><span class=\"couponCode\">' + val.start_date_coupon + \" - \" + val.end_date_coupon + '</span></div><input type=\"hidden\" id=\"coupon_id_' + key + '\" name=\"coupon_id\" value=\"' + val.id + '\"></div>';\n          });\n        } else {\n          html += '<div class=\"offerBox\">No Coupon Available</div>';\n        }\n\n        $(\".applyOffer_list\").html(html);\n        $(\"#applyOffer\").modal(\"show\");\n      },\n      error: function error(data) {\n        console.log(data);\n      }\n    });\n  });\n  $(document).on(\"click\", \".offer-apply\", function () {\n    $(this).attr(\"disabled\", true);\n    var offerid = $(this).attr(\"data-id\");\n    var property_id = $(\"#applyOffer #property_id\").val();\n    var coupon_id = $(\"#coupon_id_\" + offerid).val();\n    var url = $(this).attr(\"data-url\");\n    var title = $(this).attr(\"data-title\");\n    Lobibox.confirm({\n      draggable: false,\n      closeButton: false,\n      closeOnEsc: false,\n      title: title + \" Confirmation\",\n      msg: \"Are you sure you, want to \" + title + \"?\",\n      callback: function callback($this, type, ev) {\n        if (type === \"yes\") {\n          $.ajax({\n            type: \"POST\",\n            enctype: \"multipart/form-data\",\n            url: url,\n            dataType: \"json\",\n            data: {\n              property_id: property_id,\n              coupon_id: coupon_id\n            },\n            beforeSend: function beforeSend() {\n              $(this).attr(\"disabled\", \"disabled\");\n            },\n            success: function success(data) {\n              console.log(data);\n\n              if (data[\"status_code\"] == 200) {\n                $(\"#applyOffer\").modal(\"hide\");\n                Lobibox.notify(\"success\", {\n                  position: \"top right\",\n                  msg: data[\"message\"]\n                });\n              }\n            },\n            error: function error(data) {\n              console.log(data);\n            }\n          });\n        } else {\n          $(\"#applyOffer\").modal(\"hide\");\n          return false;\n        }\n      }\n    });\n  });\n}\n\nif (document.getElementById(\"manage_my_booking\")) {\n  $(document).on(\"click\", \".myproperty_modal\", function () {\n    $(\".pip\").remove();\n    var id = $(this).data(\"id\");\n    var target = $(this).attr(\"data-target\");\n    $(target).modal(\"show\");\n    $(target + \" .modal-body #property_id\").val(id);\n  });\n  $(document).on(\"click\", \".changestatus\", function () {\n    var publish_id = $(this).attr(\"id\");\n    var id = $(this).attr(\"data-id\");\n    var status = $(this).attr(\"data-default\");\n    var title = $(this).attr(\"data-title\");\n    var url = $(this).attr(\"data-url\");\n    Lobibox.confirm({\n      draggable: false,\n      closeButton: false,\n      closeOnEsc: false,\n      title: title + \" Confirmation\",\n      msg: \"Are you sure you, want to \" + title + \"?\",\n      callback: function callback($this, type, ev) {\n        if (type === \"yes\") {\n          $.ajax({\n            type: \"POST\",\n            url: url,\n            dataType: \"json\",\n            data: {\n              id: id,\n              status: status\n            },\n            success: function success(data) {\n              if (data[\"status\"]) {\n                Lobibox.notify(\"success\", {\n                  position: \"top right\",\n                  msg: data[\"message\"]\n                });\n              }\n            },\n            error: function error(data) {\n              console.log(data);\n            }\n          });\n        } else {\n          $(this).val($(this).data(\"default\"));\n\n          if (status == 1) {\n            $(\"#\" + publish_id).prop(\"checked\", true);\n          } else {\n            $(\"#\" + publish_id).prop(\"checked\", false);\n          }\n\n          return false;\n        }\n      }\n    });\n  });\n  $(function () {\n    var start = moment().subtract(29, \"days\");\n    var end = moment();\n\n    function cb(start, end) {\n      $(\"input[name='from']\").val(start.format(\"YYYY-M-D\"));\n      $(\"input[name='to']\").val(end.format(\"YYYY-M-D\"));\n      $(\"#reportrange span\").html(start.format(\"MMMM D, YYYY\") + \" - \" + end.format(\"MMMM D, YYYY\"));\n      serach();\n    }\n\n    $(\"#reportrange\").daterangepicker({\n      startDate: start,\n      endDate: end,\n      showCustomRangeLabel: true,\n      alwaysShowCalendars: true,\n      ranges: {\n        Today: [moment(), moment()],\n        Yesterday: [moment().subtract(1, \"days\"), moment().subtract(1, \"days\")],\n        \"Last 7 Days\": [moment().subtract(6, \"days\"), moment()],\n        \"Last 30 Days\": [moment().subtract(29, \"days\"), moment()],\n        \"This Month\": [moment().startOf(\"month\"), moment().endOf(\"month\")],\n        \"Last Month\": [moment().subtract(1, \"month\").startOf(\"month\"), moment().subtract(1, \"month\").endOf(\"month\")]\n      }\n    }, cb);\n    cb(start, end);\n  });\n}\n\nif (document.getElementById(\"filter-with-daterange\")) {\n  $(function () {\n    var start = moment().subtract(29, \"days\");\n    var end = moment();\n\n    function cb(start, end) {\n      $(\"input[name='from']\").val(start.format(\"YYYY-M-D\"));\n      $(\"input[name='to']\").val(end.format(\"YYYY-M-D\"));\n      $(\"#reportrange span\").html(start.format(\"MMMM D, YYYY\") + \" - \" + end.format(\"MMMM D, YYYY\"));\n      serach();\n    }\n\n    $(\"#reportrange\").daterangepicker({\n      startDate: start,\n      endDate: end,\n      showCustomRangeLabel: true,\n      alwaysShowCalendars: true,\n      showDropdowns: true,\n      minYear: 1901,\n      ranges: {\n        Today: [moment(), moment()],\n        Yesterday: [moment().subtract(1, \"days\"), moment().subtract(1, \"days\")],\n        \"Last 7 Days\": [moment().subtract(6, \"days\"), moment()],\n        \"Last 30 Days\": [moment().subtract(29, \"days\"), moment()],\n        \"This Month\": [moment().startOf(\"month\"), moment().endOf(\"month\")],\n        \"Last Month\": [moment().subtract(1, \"month\").startOf(\"month\"), moment().subtract(1, \"month\").endOf(\"month\")]\n      }\n    }, cb);\n    cb(start, end);\n  });\n}\n\nif (document.getElementById(\"property_details\")) {\n  var _initMap = function _initMap() {\n    lat = $(\"#lat\").val();\n    long = $(\"#long\").val();\n    place_name = $(\"#map_location\").val();\n    var latlong = new google.maps.LatLng(lat, long);\n    var myOptions = {\n      center: latlong,\n      zoom: 16,\n      mapTypeControl: true,\n      navigationControlOptions: {\n        style: google.maps.NavigationControlStyle.SMALL\n      }\n    };\n    var map = new google.maps.Map(document.getElementById(\"embedMap\"), myOptions);\n    var marker = new google.maps.Marker({\n      position: latlong,\n      map: map,\n      title: place_name,\n      icon: mapMarkerImage\n    });\n  };\n\n  google.maps.event.addDomListener(window, \"load\", _initMap);\n  $(\".feature_property .owl-carousel\").owlCarousel({\n    items: 4,\n    loop: false,\n    margin: 15,\n    nav: false,\n    autoplay: true,\n    autoplayTimeout: 3000,\n    smartSpeed: 3000,\n    responsive: {\n      0: {\n        items: 1\n      },\n      768: {\n        items: 2\n      },\n      1000: {\n        items: 4\n      }\n    }\n  });\n}\n\nif (document.getElementById(\"schedule_visit_success\")) {\n  var _initMap2 = function _initMap2() {\n    $(\".visit-map\").find(\".visit-map-child\").map(function () {\n      var id = $(this).find(\".mapSec\").attr(\"data-id\");\n      lat = $(\"#lat_\" + id).val();\n      long = $(\"#long_\" + id).val();\n      place_name = $(\"#map_location_\" + id).val();\n      var latlong = new google.maps.LatLng(lat, long);\n      var myOptions = {\n        center: latlong,\n        zoom: 16,\n        mapTypeControl: true,\n        navigationControlOptions: {\n          style: google.maps.NavigationControlStyle.SMALL\n        }\n      };\n      var map = new google.maps.Map(document.getElementById(\"embedMap_\" + id), myOptions);\n      var marker = new google.maps.Marker({\n        position: latlong,\n        map: map,\n        title: place_name,\n        icon: mapMarkerImage\n      });\n    });\n  };\n\n  google.maps.event.addDomListener(window, \"load\", _initMap2);\n}\n\nif (document.getElementById(\"news_updates\")) {\n  $(\".newsupdate\").click(function () {\n    $(\".newsupdate\").removeClass(\"active\");\n    $(this).addClass(\"active\");\n  });\n}\n\n$(document).ready(function () {\n  var payment_type_val = $(\"input[name='payment_type']:checked\").val();\n\n  if (payment_type_val == \"cheque\") {\n    $(\".cheque_div\").show();\n    $(\".cheque_related_input\").prop(\"required\", true);\n    $(\".upi_div\").hide();\n    $(\".upi_related_input\").prop(\"required\", false);\n    $(\".upi_related_input\").val(\"\");\n  } else {\n    $(\".upi_div\").show();\n    $(\".upi_related_input\").prop(\"required\", true);\n    $(\".cheque_div\").hide();\n    $(\".cheque_related_input\").prop(\"required\", false);\n    $(\".cheque_related_input\").val(\"\");\n  }\n\n  $(\"body\").on(\"change\", \".payment_type_property\", function () {\n    var payment_type_val = $(\"input[name='payment_type']:checked\").val();\n    var bank_name = $(\"input[name='bank_name']\").data(\"default\");\n    var holder_name = $(\"input[name='holder_name']\").data(\"default\");\n    var account_number = $(\"input[name='account_number']\").data(\"default\");\n    var ifsc_code = $(\"input[name='ifsc_code']\").data(\"default\");\n    var upi_id = $(\"input[name='upi_id']\").data(\"default\");\n    var upi_qr_code_image = $(\"input[name='upi_qr_code_image']\").data(\"default\");\n    var upi_thumb_image = $(\"#upi_thumb_image\").data(\"default\");\n    var cancelled_check_photo = $(\"input[name='cancelled_check_photo']\").data(\"default\");\n    var passbook_front_photo = $(\"input[name='passbook_front_photo']\").data(\"default\"); // $('.payment_pip').html('');\n\n    $(\".payment_cheque_upi\").find(\".pip\").html(\"\");\n\n    if (payment_type_val == \"cheque\") {\n      if (cancelled_check_photo === undefined && passbook_front_photo === undefined) {\n        $(\"#cancelled_cheque_files\").next().hide();\n        $(\"#passbook_front_files\").next().hide();\n      } else {\n        $(\"#cancelled_cheque_files\").next().show();\n        $(\"#passbook_front_files\").next().show();\n      }\n\n      $(\".cheque_div\").show();\n      $(\".cheque_related_input\").prop(\"required\", true);\n      $(\".upi_div\").hide();\n      $(\".upi_related_input\").prop(\"required\", false);\n      $(\".upi_related_input\").val(\"\");\n      $(\"input[name='bank_name']\").val(bank_name);\n      $(\"input[name='holder_name']\").val(holder_name);\n      $(\"input[name='account_number']\").val(account_number);\n      $(\"input[name='ifsc_code']\").val(ifsc_code);\n      $(\"#f_cancelled_cheque\").val(cancelled_check_photo);\n      $(\"#f_passbook_front\").val(passbook_front_photo);\n    } else {\n      if (upi_qr_code_image === undefined) {\n        $(\"#upi_qr_code_files\").find(\"span\").hide();\n      } else {\n        $(\"#upi_qr_code_files\").find(\"span\").show();\n      }\n\n      $(\"input[name='upi_id']\").val(upi_id);\n      $(\"#f_upi_qr_code\").val(upi_qr_code_image);\n      $(\".upi_div\").show();\n      $(\".upi_related_input\").prop(\"required\", true);\n      $(\".cheque_div\").hide();\n      $(\".cheque_related_input\").prop(\"required\", false);\n      $(\".cheque_related_input\").val(\"\");\n    }\n  });\n  $(\"body\").on(\"click\", \".room_type\", function () {\n    var roomtype_count = $(\".room_type:checked\").length;\n    var roomClassVal = $(this).val();\n\n    if ($(this).is(\":checked\")) {\n      $(\"#\" + roomClassVal + \"AcRoomType\").prop(\"disabled\", false).prop(\"required\", true);\n      $(\"#\" + roomClassVal + \"NonAcRoomType\").prop(\"disabled\", false);\n    } else {\n      $(\".\" + roomClassVal + \"_room_input\").prop(\"checked\", false).prop(\"disabled\", true).val(\"\");\n      $(\"#\" + roomClassVal + \"AcRoomType\").prop(\"required\", false);\n    }\n\n    if (roomtype_count == 0) {\n      $(\".room_type_single\").prop(\"required\", true);\n    } else {\n      $(\".room_type_single\").prop(\"required\", false);\n    }\n\n    $(this).prop(\"disabled\", false).val(roomClassVal);\n  });\n  $(\"body\").on(\"click\", \".room_sub_type\", function () {\n    var roomTypeVal = $(this).attr(\"data-room-type\");\n    var roomSubTypeVal = $(this).attr(\"data-type\");\n\n    if ($(this).is(\":checked\")) {\n      $(\".\" + roomTypeVal + \"_room_\" + roomSubTypeVal + \"_com\").show();\n      $(\".\" + roomTypeVal + \"_\" + roomSubTypeVal + \"_input\").prop(\"required\", true).prop(\"disabled\", false);\n      $(\".\" + roomTypeVal + \"_\" + roomSubTypeVal + \"_is_food\").prop(\"disabled\", false);\n      $(\".room_type_\" + roomTypeVal).prop(\"checked\", true);\n    } else {\n      $(\".\" + roomTypeVal + \"_room_\" + roomSubTypeVal + \"_com\").hide();\n      $(\".\" + roomTypeVal + \"_\" + roomSubTypeVal + \"_input\").prop(\"required\", false).prop(\"disabled\", true).val(\"\");\n      $(\".\" + roomTypeVal + \"_\" + roomSubTypeVal + \"_is_food\").prop(\"disabled\", true).prop(\"checked\", false);\n    }\n\n    var selectedRoomSubTypeLength = $(\".\" + roomTypeVal + \"_room_sub_type:checked\").length;\n\n    if (selectedRoomSubTypeLength == 0) {\n      $(\"#\" + roomTypeVal + \"AcRoomType\").prop(\"required\", true);\n    } else {\n      $(\"#\" + roomTypeVal + \"AcRoomType\").prop(\"required\", false);\n    }\n  });\n});\n$(document).on(\"click\", \".visit-property\", function () {\n  var visit_id = $(this).attr(\"data-id\");\n  var url = $(this).attr(\"data-url\");\n  Lobibox.confirm({\n    draggable: false,\n    closeButton: false,\n    closeOnEsc: false,\n    title: \"Remove Confirmation\",\n    msg: \"Are you sure you, want to remove from schedule list?\",\n    callback: function callback($this, type, ev) {\n      if (type === \"yes\") {\n        $.ajax({\n          type: \"POST\",\n          url: url,\n          dataType: \"json\",\n          data: {\n            visit_id: visit_id\n          },\n          beforeSend: function beforeSend() {\n            $(\"#loader\").show();\n          },\n          success: function success(data) {\n            $(\"#loader\").hide();\n            Lobibox.notify(\"success\", {\n              position: \"top right\",\n              msg: data[\"message\"]\n            });\n\n            if (data[\"reload\"]) {\n              location.reload();\n            }\n          },\n          error: function error(data) {\n            $(\"#loader\").hide();\n            Lobibox.notify(\"error\", {\n              position: \"top right\",\n              msg: \"Something went wrong please try later.\"\n            });\n            return false;\n          }\n        });\n      } else {\n        $(\"#loader\").hide();\n        return false;\n      }\n    }\n  });\n});\n$(function (e) {\n  var nowDate = new Date();\n  var today = new Date(nowDate.getFullYear(), nowDate.getMonth(), nowDate.getDate(), 0, 0, 0, 0);\n  $(\".visit_dates\").daterangepicker({\n    singleDatePicker: true,\n    autoApply: true,\n    disabledPast: true,\n    onlyShowCurrentMonth: true,\n    minDate: today,\n    setDate: null,\n    locale: {\n      format: \"YYYY-MM-DD\",\n      cancelLabel: \"Clear\"\n    }\n  });\n  $(\".visit_time\").timepicker(); // visit date booking\n\n  $(\".visit-date-render\").daterangepicker({\n    singleDatePicker: true,\n    autoApply: true,\n    disabledPast: true,\n    onlyShowCurrentMonth: true,\n    minDate: today,\n    setDate: null,\n    locale: {\n      format: \"YYYY-MM-DD\",\n      cancelLabel: \"Clear\"\n    },\n    onSelect: function onSelect(value, date) {\n      console.log(\"value:\" + value);\n      console.log(\"date:\" + date);\n    }\n  }, function (start, end, label) {\n    $(this.element[0]).parent().parent().parent().find(\".visit-date-input\").val(start.format(\"YYYY-MM-DD\"));\n    $(this.element[0]).parent().parent().parent().find(\".visit-date-render\").html('<i class=\"ri-calendar-line cal-icon calendar-check-in-out-fa\"></i>' + start.format(bookingCore.view_visit_checkin_date_formate));\n  });\n});\n$(\"body\").delegate(\".active_remove_tab\", \"click\", function () {\n  $(\".active_remove_tab\").removeClass(\"active\");\n  $(this).addClass(\"active\");\n  var myvisitSerach = $(this).data(\"default\");\n  $(\"#search_type\").val(myvisitSerach);\n  serach();\n}); // filter btn js\n\n$('body').on('click', \".mobileproperty_filter\", function () {\n  if ($(\".filter-col\").hasClass(\"open\")) {\n    $(\".filter-col\").removeClass(\"open\");\n  } else {\n    $(\".filter-col\").addClass(\"open\");\n  }\n});\n$('body').delegate('.copycode', 'click', function () {\n  // Create a \"hidden\" input\n  var aux = document.createElement(\"input\"); // Assign it the value of the specified element\n\n  var elementId = $(this).data('cid');\n  aux.setAttribute(\"value\", document.getElementById(elementId).innerHTML); // Append it to the body\n\n  document.body.appendChild(aux); // Highlight its content\n\n  aux.select(); // Copy the highlighted text\n\n  document.execCommand(\"copy\"); // Remove it from the body\n\n  document.body.removeChild(aux);\n  Lobibox.notify('success', {\n    position: \"top right\",\n    msg: 'Copied Successfully'\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/frontend/custom.js\n");

/***/ }),

/***/ "./resources/js/frontend/developer.js":
/*!********************************************!*\
  !*** ./resources/js/frontend/developer.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nvar _require = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\"),\n    event = _require.event;\n\n$(function () {\n  $(document).on('keypress', '.numberonly', validateNumber);\n  $(document).on('keypress', '.isinteger', isNumber);\n  DirectFormSubmitWithAjax.init();\n});\n$(document).ready(function () {\n  $(document).on('click', '.myBookingButton123', function (e) {\n    e.preventDefault();\n    var property_slug = $(this).data('id');\n    var action = $(this).data('action');\n    var token = getMetaContentByName('csrf-token');\n    var redirectAnch = $(this).attr('href');\n\n    if (action != '') {\n      $.ajax({\n        url: action,\n        type: \"POST\",\n        cache: false,\n        data: {\n          property_slug: property_slug,\n          _token: token\n        },\n        // dataType: \"json\",\n        success: function success(data) {\n          console.log(data);\n\n          if (data != '') {\n            window.location.replace(redirectAnch);\n          } // return true;\n\n        },\n        error: function error(xhr, status, _error) {\n          console.log(_error);\n        }\n      });\n    }\n\n    return true;\n  });\n\n  if (document.getElementById(\"counterPage\")) {\n    var counters = document.querySelectorAll('.counter_about');\n    counters.forEach(function (counter) {\n      var animate = function animate() {\n        var value = +counter.getAttribute('data-count');\n        var speed = +counter.getAttribute('data-speed');\n        var sign = counter.getAttribute('data-sign');\n        var data = +counter.innerText;\n        var time = value / speed;\n\n        if (data < value) {\n          counter.innerText = Math.ceil(data + time);\n          setTimeout(animate, 1);\n        } else {\n          counter.innerText = value + sign;\n        }\n      };\n\n      animate();\n    });\n  }\n\n  if (_currentRname == \"home\" || _currentRname == \"login\") {\n    setTimeout(function () {\n      //window.location.href = window.location.href+\"#notification\";\n      $(\"#exitPopUp\").modal(\"show\");\n      $(\"#exitPopUpInvest\").modal(\"show\");\n    }, 800);\n  } //Code Verification\n\n\n  var verificationCode = [];\n  $(\".verification-code input[type=text]\").keyup(function (e) {\n    $(\".verification-code input[type=text]\").each(function (i) {\n      verificationCode[i] = $(\".verification-code input[type=text]\")[i].value;\n      $(\"#mobile_otp\").val(String(verificationCode.join(\"\")));\n    });\n\n    if ($(this).length > 0 && e.key != \"Backspace\") {\n      $(this).next().focus();\n    } else {\n      if (e.key == \"Backspace\") {\n        $(this).prev().focus();\n      }\n    }\n  }); // keyup\n\n  if (document.getElementById(\"my_profile\")) {\n    $(\"#dob\").datepicker({\n      format: \"dd-mm-yyyy\",\n      todayHighlight: true,\n      autoclose: true,\n      endDate: new Date()\n    });\n  }\n\n  $(document).on(\"click\", \".resend-mobile-otp\", function (e) {\n    e.preventDefault();\n    var action = $(this).attr(\"href\");\n    $.ajax({\n      url: action,\n      type: \"GET\",\n      cache: false,\n      dataType: \"json\",\n      beforeSend: function beforeSend() {\n        $(\"#loader_msg\").html(\"Please wait, sending your otp\");\n        $(\"#loader\").show();\n      },\n      complete: function complete() {\n        $(\"#loader\").hide();\n      },\n      success: function success(data) {\n        $(\".lobibox-close\").trigger(\"click\");\n        Lobibox.notify(data[\"type\"], {\n          position: \"top right\",\n          msg: data[\"message\"]\n        });\n\n        if (data[\"url\"]) {\n          location.href = data[\"url\"];\n        }\n      },\n      error: function error(e) {\n        Lobibox.notify(data[\"type\"], {\n          position: \"top right\",\n          msg: data[\"message\"]\n        });\n      }\n    });\n  });\n  $(document).on(\"click\", \".delete-user-account\", function (e) {\n    e.preventDefault();\n    var action = $(this).attr(\"data-url\");\n\n    if (confirm(\"Are you sure you want to delete your account!\")) {\n      $.ajax({\n        url: action,\n        type: \"GET\",\n        cache: false,\n        dataType: \"json\",\n        beforeSend: function beforeSend() {\n          $(\"#loader_msg\").html(_loaderMsg);\n          $(\"#loader\").show();\n        },\n        complete: function complete() {\n          $(\"#loader\").hide();\n        },\n        success: function success(data) {\n          $(\".lobibox-close\").trigger(\"click\");\n          Lobibox.notify(data[\"type\"], {\n            position: \"top right\",\n            msg: data[\"message\"]\n          });\n\n          if (data[\"url\"]) {\n            location.href = data[\"url\"];\n          }\n        },\n        error: function error(e) {\n          Lobibox.notify(data[\"type\"], {\n            position: \"top right\",\n            msg: data[\"message\"]\n          });\n\n          if (data[\"url\"]) {\n            location.href = data[\"url\"];\n          }\n        }\n      });\n    }\n  });\n});\n$(\".light-modal-close-icon\").click(function () {\n  var _currentUrl = $(this).data(\"currenturl\");\n\n  setTimeout(function () {\n    window.history.pushState({\n      url: \"\" + _currentUrl + \"\"\n    }, \"\", _currentUrl);\n  }, 500);\n});\n$.ajaxSetup({\n  headers: {\n    \"X-CSRF-TOKEN\": $('meta[name=\"csrf-token\"]').attr(\"content\")\n  }\n});\n$.validator.addMethod(\"special_char_password\", function (value, element) {\n  return this.optional(element) || /^.*(?=.{8,})(?=.*[a-z])(?=.*[A-Z])(?=.*[\\d])(?=.*[\\W_]).*$/.test(value);\n}, \"The password must contain a minimum of one lower case character,\" + \" one upper case character, one digit and one special character..\");\n\nfunction getMetaContentByName(name, content) {\n  var content = content == null ? \"content\" : content;\n  return document.querySelector(\"meta[name='\" + name + \"']\").getAttribute(content);\n}\n\nfunction validateNumber(event) {\n  var key = window.event ? event.keyCode : event.which;\n\n  if (event.keyCode === 8 || event.keyCode === 46) {\n    return true;\n  } else if (key < 48 || key > 57) {\n    return false;\n  } else {\n    return true;\n  }\n} // Restricts input for the given textbox to the given inputFilter.\n\n\nfunction isNumber(evt) {\n  evt = evt ? evt : window.event;\n  var charCode = evt.which ? evt.which : evt.keyCode;\n\n  if (charCode > 31 && (charCode < 48 || charCode > 57)) {\n    return false;\n  } // alert(charCode);\n\n\n  return true;\n}\n\njQuery(document).ready(function () {\n  $(\".showAlert\").click(function () {\n    var type = $(this).data(\"type\");\n    var message = $(this).data(\"message\");\n    Lobibox.alert(type, {\n      msg: message\n    });\n  });\n  $(\".changeregtab\").click(function () {\n    var _regtype = $(this).data(\"regtype\");\n\n    $(\"#reg_type\").html(_regtype);\n  });\n  jQuery(\"#validateForm\").validate({\n    ignore: [],\n    rules: {\n      email: {\n        email: true\n      },\n      \"g-recaptcha-response\": {\n        required: function required() {\n          if (grecaptcha.getResponse() == \"\") {\n            return true;\n          } else {\n            return false;\n          }\n        }\n      },\n      password: {\n        minlength: 8\n      },\n      password_confirmation: {\n        equalTo: \"#password\"\n      },\n      body: {\n        required: function required(textarea) {\n          CKEDITOR.instances[textarea.id].updateElement();\n          var editorcontent = textarea.value.replace(/<[^>]*>/gi, \"\");\n          return editorcontent.length === 0;\n        }\n      },\n      description_en: {\n        required: function required(textarea) {\n          CKEDITOR.instances[textarea.id].updateElement();\n          var editorcontent = textarea.value.replace(/<[^>]*>/gi, \"\");\n          return editorcontent.length === 0;\n        }\n      }\n    },\n    messages: {\n      email: {\n        email: enter_correct_email\n      },\n      password: {\n        minlength: must_minimum_digit_pwd\n      },\n      password_confirmation: {\n        equalTo: _enter_same_as_passowed\n      },\n      \"g-recaptcha-response\": verify_you_are_human\n    },\n    highlight: function highlight(element) {\n      jQuery(element).closest(\".form-group\").removeClass(\"has-success\").addClass(\"has-error\");\n    },\n    errorPlacement: function errorPlacement(e, r) {\n      e.appendTo(r.closest(\".ermsg\"));\n    },\n    success: function success(label, element) {\n      jQuery(element).closest(\".form-group\").removeClass(\"has-error\");\n      label.remove();\n    },\n    submitHandler: function submitHandler(form) {\n      $(\".formsubmit\").attr(\"disabled\", true);\n      form.submit();\n    }\n  });\n  $(\"body\").delegate(\".onlyimageupload\", \"change\", function (event) {\n    _imageUpload = $(this).data(\"uploadurl\");\n    var MediaId = this.id;\n    var inter;\n    Lobibox.progress({\n      title: \"Please wait\",\n      label: \"Uploading files...\",\n      progressTpl: '<div class=\"progress \" >\\n\\\r\n            <div class=\"progress-bar progress-bar-danger progress-bar-striped lobibox-progress-element myprogress\" role=\"progressbar\" style=\"width:0%\">0%</div>\\n\\\r\n            </div>',\n      progressCompleted: function progressCompleted() {},\n      onShow: function onShow($this) {\n        var xhr = new window.XMLHttpRequest();\n        xhr.upload.addEventListener(\"progress\", function (evt) {\n          if (evt.lengthComputable) {\n            var percentComplete = evt.loaded / evt.total;\n            percentComplete = parseInt(percentComplete * 100);\n            $(\".myprogress\").text(percentComplete + \"%\");\n            $(\".myprogress\").css(\"width\", percentComplete + \"%\");\n            var i = 0;\n          }\n        }, false);\n        return xhr;\n      },\n      closed: function closed() {//\n      }\n    });\n    event.preventDefault();\n    var data = new FormData();\n    var files = $(\"#\" + MediaId).get(0).files;\n    data.append(\"_token\", getMetaContentByName(\"csrf-token\"));\n\n    if (MediaId == \"PImage\" || MediaId == \"UImage\" || MediaId == \"imageUpload\") {\n      data.append(\"user_id\", $(this).data(\"userid\"));\n    }\n\n    if (files.length > 0) {\n      data.append(\"files\", files[0]);\n    } else {\n      $(function () {\n        (function () {\n          $(\".btn-close\").trigger(\"click\");\n          $(\".lobibox-close\").click();\n          Lobibox.notify(\"info\", {\n            position: \"top right\",\n            rounded: false,\n            delay: 2000,\n            delayIndicator: true,\n            msg: \"Please select file to upload.\"\n          });\n        })();\n      });\n      return false;\n    }\n\n    var extension = $(\"#\" + MediaId).val().split(\".\").pop().toUpperCase();\n\n    if (extension != \"PNG\" && extension != \"JPG\" && extension != \"GIF\" && extension != \"JPEG\") {\n      if (files.length > 0) {\n        data.append(\"files\", files[0]);\n      } else {\n        $(function () {\n          (function () {\n            $(\".btn-close\").trigger(\"click\");\n            $(\".lobibox-close\").click();\n            Lobibox.notify(\"info\", {\n              position: \"top right\",\n              rounded: false,\n              delay: 2000,\n              delayIndicator: true,\n              msg: \"Please select file to upload.\"\n            });\n          })();\n        });\n        return false;\n      }\n\n      $(function () {\n        (function () {\n          $(\".btn-close\").trigger(\"click\");\n          $(\".lobibox-close\").click();\n          Lobibox.notify(\"error\", {\n            position: \"top right\",\n            rounded: false,\n            delay: 2000,\n            delayIndicator: true,\n            msg: \"Invalid image file format.\"\n          });\n        })();\n      });\n      $(\"#\" + MediaId).val(\"\");\n      return false;\n    }\n\n    $.ajax({\n      type: \"post\",\n      enctype: \"multipart/form-data\",\n      url: _imageUpload,\n      data: data,\n      processData: false,\n      contentType: false,\n      cache: false,\n      timeout: 600000,\n      xhr: function xhr() {\n        var xhr = new window.XMLHttpRequest();\n        xhr.upload.addEventListener(\"progress\", function (evt) {\n          if (evt.lengthComputable) {\n            var percentComplete = evt.loaded / evt.total;\n            percentComplete = parseInt(percentComplete * 100);\n            $(\".myprogress\").text(percentComplete + \"%\");\n            $(\".myprogress\").css(\"width\", percentComplete + \"%\");\n          }\n        }, false);\n        return xhr;\n      },\n      beforeSend: function beforeSend() {},\n      success: function success(data) {\n        $(\".btn-close\").trigger(\"click\");\n        $(\".lobibox-close\").click();\n\n        if (data[\"status\"]) {\n          Lobibox.notify(\"success\", {\n            position: \"top right\",\n            msg: \"File has been uploaded successfully\"\n          });\n          $(\".prodp label.error\").hide();\n\n          if (data[\"status_code\"] == 250) {\n            if (data[\"s3FullPath\"] != \"\") {\n              $(\"#f_\" + MediaId).val(data[\"filename\"]);\n              $(\"#v_\" + MediaId).attr(\"src\", data[\"s3FullPath\"]);\n\n              if (MediaId == 'UImage') {\n                $(\".head_dp\").attr(\"src\", data[\"s3FullPath\"]);\n              }\n            } else {\n              $(\"#f_\" + MediaId).val(data[\"filename\"]);\n              $(\"#v_\" + MediaId).attr(\"src\", _UserImgThumbSrc + data[\"filename\"]);\n            }\n          } else {\n            if (MediaId == \"PImage\" || MediaId == \"imageUpload\") {\n              $(\"#head_dp\").attr(\"src\", _UserImgThumbSrc + data[\"filename\"]);\n              $(\"#imagePreview\").css(\"background-image\", \"url(\" + _UserImgThumbSrc + data[\"filename\"] + \")\");\n            }\n\n            $(\"#f_\" + MediaId).val(data[\"filename\"]);\n            $(\"#dash_\" + MediaId).attr(\"src\", _UserImgThumbSrc + data[\"filename\"]);\n            $(\"#f_\" + MediaId).val(data[\"filename\"]);\n          }\n        } else {\n          Lobibox.notify(\"error\", {\n            position: \"top right\",\n            msg: data[\"message\"]\n          });\n        }\n      },\n      error: function error(e) {\n        $(\".btn-close\").trigger(\"click\");\n        $(\".lobibox-close\").click();\n        jQuery(\"#logo-duplicate_\" + MediaId).val(\"\");\n        var Arry = e.responseText;\n        var error = \"\";\n        JSON.parse(Arry, function (k, v) {\n          if (_typeof(v) != \"object\") {\n            error += v + \"<br>\";\n          }\n        });\n        Lobibox.notify(\"error\", {\n          position: \"top right\",\n          rounded: false,\n          delay: 2000,\n          delayIndicator: true,\n          msg: error\n        });\n      }\n    });\n  });\n  $(\"body\").delegate(\".onlyimageuploadmultiple\", \"change\", function (event) {\n    _imageUpload = $(this).data(\"uploadurl\");\n    _fieldname = $(this).data(\"fieldname\");\n    _refimagedivid = $(this).data(\"refimagedivid\");\n    _maxfile = $(this).data(\"maxfile\");\n    var MediaId = this.id;\n    var inter;\n\n    var _totalUploads = document.querySelectorAll('.pip > input[name=\"' + _fieldname + '[]\"]');\n\n    if (_maxfile <= _totalUploads.length) {\n      $(\".btn-close\").trigger(\"click\");\n      $(\".lobibox-close\").click();\n      Lobibox.notify(\"error\", {\n        position: \"top right\",\n        rounded: false,\n        delay: 2000,\n        delayIndicator: true,\n        msg: \"You cannot upload more then \" + _maxfile + \" Image\"\n      });\n      return false;\n    }\n\n    Lobibox.progress({\n      title: \"Please wait\",\n      label: \"Uploading files...\",\n      progressTpl: '<div class=\"progress \" >\\n\\\r\n            <div class=\"progress-bar progress-bar-danger progress-bar-striped lobibox-progress-element myprogress\" role=\"progressbar\" style=\"width:0%\">0%</div>\\n\\\r\n            </div>',\n      progressCompleted: function progressCompleted() {},\n      onShow: function onShow($this) {\n        var xhr = new window.XMLHttpRequest();\n        xhr.upload.addEventListener(\"progress\", function (evt) {\n          if (evt.lengthComputable) {\n            var percentComplete = evt.loaded / evt.total;\n            percentComplete = parseInt(percentComplete * 100);\n            $(\".myprogress\").text(percentComplete + \"%\");\n            $(\".myprogress\").css(\"width\", percentComplete + \"%\");\n            var i = 0;\n          }\n        }, false);\n        return xhr;\n      },\n      closed: function closed() {//\n      }\n    });\n    event.preventDefault();\n    var data = new FormData();\n    var files = $(\"#\" + MediaId).get(0).files;\n    data.append(\"_token\", getMetaContentByName(\"csrf-token\"));\n\n    if (MediaId == \"PImage\" && MediaId == \"imageUpload\") {\n      data.append(\"user_id\", $(this).data(\"userid\"));\n    }\n\n    if (files.length > 0) {\n      data.append(\"files\", files[0]);\n    } else {\n      $(function () {\n        (function () {\n          $(\".btn-close\").trigger(\"click\");\n          $(\".lobibox-close\").click();\n          Lobibox.notify(\"info\", {\n            position: \"top right\",\n            rounded: false,\n            delay: 2000,\n            delayIndicator: true,\n            msg: \"Please select file to upload.\"\n          });\n        })();\n      });\n      return false;\n    }\n\n    var extension = $(\"#\" + MediaId).val().split(\".\").pop().toUpperCase();\n\n    if (extension != \"PNG\" && extension != \"JPG\" && extension != \"GIF\" && extension != \"JPEG\") {\n      $(function () {\n        (function () {\n          $(\".btn-close\").trigger(\"click\");\n          $(\".lobibox-close\").click();\n          Lobibox.notify(\"error\", {\n            position: \"top right\",\n            rounded: false,\n            delay: 2000,\n            delayIndicator: true,\n            msg: \"Invalid image file format.\"\n          });\n        })();\n      });\n      $(\"#\" + MediaId).val(\"\");\n      return false;\n    }\n\n    $.ajax({\n      type: \"post\",\n      enctype: \"multipart/form-data\",\n      url: _imageUpload,\n      data: data,\n      processData: false,\n      contentType: false,\n      cache: false,\n      timeout: 600000,\n      xhr: function xhr() {\n        var xhr = new window.XMLHttpRequest();\n        xhr.upload.addEventListener(\"progress\", function (evt) {\n          if (evt.lengthComputable) {\n            var percentComplete = evt.loaded / evt.total;\n            percentComplete = parseInt(percentComplete * 100);\n            $(\".myprogress\").text(percentComplete + \"%\");\n            $(\".myprogress\").css(\"width\", percentComplete + \"%\");\n          }\n        }, false);\n        return xhr;\n      },\n      beforeSend: function beforeSend() {},\n      success: function success(data) {\n        $(\".btn-close\").trigger(\"click\");\n        $(\".lobibox-close\").click();\n\n        if (data[\"status\"]) {\n          Lobibox.notify(\"success\", {\n            position: \"top right\",\n            msg: \"File has been uploaded successfully\"\n          });\n          $(\".prodp label.error\").hide();\n\n          if (extension == \"PDF\") {\n            $('<span class=\"pip\">' + '<img class=\"imageThumb\" src=\"' + data[\"full_path\"] + '\" title=\"' + data[\"filename\"] + '\"/><input type=\"hidden\" value=\"' + data[\"filename\"] + '\" name=\"' + _fieldname + '[]\"/>' + '<br/><span class=\"remove removerecord\" data-remove=\"' + _fieldname + '\">Remove Record</span>' + \"</span>\").insertAfter(\"#\" + _refimagedivid);\n          } else {\n            $('<span class=\"pip\">' + '<img class=\"imageThumb\" src=\"' + data[\"full_path\"] + '\" title=\"' + data[\"filename\"] + '\"/><input type=\"hidden\" value=\"' + data[\"filename\"] + '\" name=\"' + _fieldname + '[]\"/>' + '<br/><span class=\"remove removerecord\" data-remove=\"' + _fieldname + '\">Remove Record</span>' + \"</span>\").insertAfter(\"#\" + _refimagedivid);\n          }\n\n          var __count_fields = document.querySelectorAll('.pip > input[name=\"' + _fieldname + '[]\"]');\n\n          $(\"#f_\" + MediaId).val(__count_fields.length);\n        } else {\n          Lobibox.notify(\"error\", {\n            position: \"top right\",\n            msg: data[\"message\"]\n          });\n        }\n      },\n      error: function error(e) {\n        $(\".btn-close\").trigger(\"click\");\n        $(\".lobibox-close\").click();\n        jQuery(\"#logo-duplicate_\" + MediaId).val(\"\");\n        var Arry = e.responseText;\n        var error = \"\";\n        JSON.parse(Arry, function (k, v) {\n          if (_typeof(v) != \"object\") {\n            error += v + \"<br>\";\n          }\n        });\n        Lobibox.notify(\"error\", {\n          position: \"top right\",\n          rounded: false,\n          delay: 2000,\n          delayIndicator: true,\n          msg: error\n        });\n      }\n    });\n  });\n  $(\".onlydocupload\").change(function (event) {\n    var MediaId = this.id;\n    _uploadDocUrl = $(this).data(\"uploadurl\");\n    var inter;\n    Lobibox.progress({\n      title: \"Please wait\",\n      label: \"Uploading files...\",\n      progressTpl: '<div class=\"progress \" >\\n\\\r\n            <div class=\"progress-bar progress-bar-danger progress-bar-striped lobibox-progress-element myprogress\" role=\"progressbar\" style=\"width:0%\">0%</div>\\n\\\r\n            </div>',\n      progressCompleted: function progressCompleted() {},\n      onShow: function onShow($this) {\n        var xhr = new window.XMLHttpRequest();\n        xhr.upload.addEventListener(\"progress\", function (evt) {\n          if (evt.lengthComputable) {\n            var percentComplete = evt.loaded / evt.total;\n            percentComplete = parseInt(percentComplete * 100);\n            $(\".myprogress\").text(percentComplete + \"%\");\n            $(\".myprogress\").css(\"width\", percentComplete + \"%\");\n            var i = 0;\n          }\n        }, false);\n        return xhr;\n      },\n      closed: function closed() {}\n    });\n    event.preventDefault();\n    var data = new FormData();\n    var files = $(\"#\" + MediaId).get(0).files;\n    data.append(\"_token\", getMetaContentByName(\"csrf-token\"));\n\n    if (files.length > 0) {\n      data.append(\"files\", files[0]);\n    } else {\n      $(function () {\n        (function () {\n          $(\".btn-close\").trigger(\"click\");\n          $(\".lobibox-close\").click();\n          Lobibox.notify(\"info\", {\n            position: \"top right\",\n            rounded: false,\n            delay: 2000,\n            delayIndicator: true,\n            msg: \"Please select file to upload.\"\n          });\n        })();\n      });\n      return false;\n    }\n\n    var extension = $(\"#\" + MediaId).val().split(\".\").pop().toUpperCase();\n\n    if (extension != \"DOC\" && extension != \"DOCX\" && extension != \"TXT\" && extension != \"PDF\") {\n      $(function () {\n        (function () {\n          $(\".btn-close\").trigger(\"click\");\n          $(\".lobibox-close\").click();\n          Lobibox.notify(\"error\", {\n            position: \"top right\",\n            rounded: false,\n            delay: 2000,\n            delayIndicator: true,\n            msg: \"Invalid file format.\"\n          });\n        })();\n      });\n      $(\"#\" + MediaId).val(\"\");\n      return false;\n    }\n\n    $.ajax({\n      type: \"post\",\n      enctype: \"multipart/form-data\",\n      url: _uploadDocUrl,\n      data: data,\n      processData: false,\n      contentType: false,\n      cache: false,\n      timeout: 600000,\n      xhr: function xhr() {\n        var xhr = new window.XMLHttpRequest();\n        xhr.upload.addEventListener(\"progress\", function (evt) {\n          if (evt.lengthComputable) {\n            var percentComplete = evt.loaded / evt.total;\n            percentComplete = parseInt(percentComplete * 100);\n            $(\".myprogress\").text(percentComplete + \"%\");\n            $(\".myprogress\").css(\"width\", percentComplete + \"%\");\n          }\n        }, false);\n        return xhr;\n      },\n      beforeSend: function beforeSend() {},\n      success: function success(data) {\n        $(\".btn-close\").trigger(\"click\");\n        $(\".lobibox-close\").click();\n        Lobibox.notify(data[\"type\"], {\n          position: \"top right\",\n          msg: data[\"message\"]\n        });\n\n        if (data[\"status_code\"] == 200) {\n          $(\"#f_\" + MediaId).val(data[\"filename\"]);\n          $(\"#\" + MediaId).val(data[\"filename\"]);\n        }\n      },\n      error: function error(e) {\n        $(\".btn-close\").trigger(\"click\");\n        $(\".lobibox-close\").click();\n        jQuery(\"#logo-duplicate_\" + MediaId).val(\"\");\n        var Arry = e.responseText;\n        var error = \"\";\n        JSON.parse(Arry, function (k, v) {\n          if (_typeof(v) != \"object\") {\n            error += v + \"<br>\";\n          }\n        });\n        Lobibox.notify(\"error\", {\n          position: \"top right\",\n          rounded: false,\n          delay: 2000,\n          delayIndicator: true,\n          msg: error\n        });\n      }\n    });\n  });\n  $(\"body\").delegate(\".onlyvideoupload\", \"change\", function (event) {\n    var MediaId = this.id;\n    _uploadDocUrl = $(this).data(\"uploadurl\");\n    var inter;\n    Lobibox.progress({\n      title: \"Please wait\",\n      label: \"Uploading files...\",\n      progressTpl: '<div class=\"progress \" >\\n\\\r\n            <div class=\"progress-bar progress-bar-danger progress-bar-striped lobibox-progress-element myprogress\" role=\"progressbar\" style=\"width:0%\">0%</div>\\n\\\r\n            </div>',\n      progressCompleted: function progressCompleted() {},\n      onShow: function onShow($this) {\n        var xhr = new window.XMLHttpRequest();\n        xhr.upload.addEventListener(\"progress\", function (evt) {\n          if (evt.lengthComputable) {\n            var percentComplete = evt.loaded / evt.total;\n            percentComplete = parseInt(percentComplete * 100);\n            $(\".myprogress\").text(percentComplete + \"%\");\n            $(\".myprogress\").css(\"width\", percentComplete + \"%\");\n            var i = 0;\n          }\n        }, false);\n        return xhr;\n      },\n      closed: function closed() {}\n    });\n    event.preventDefault();\n    var data = new FormData();\n    var files = $(\"#\" + MediaId).get(0).files;\n    data.append(\"_token\", getMetaContentByName(\"csrf-token\"));\n\n    if (files.length > 0) {\n      data.append(\"files\", files[0]);\n    } else {\n      $(function () {\n        (function () {\n          $(\".btn-close\").trigger(\"click\");\n          $(\".lobibox-close\").click();\n          Lobibox.notify(\"info\", {\n            position: \"top right\",\n            rounded: false,\n            delay: 2000,\n            delayIndicator: true,\n            msg: \"Please select file to upload.\"\n          });\n        })();\n      });\n      return false;\n    }\n\n    var extension = $(\"#\" + MediaId).val().split(\".\").pop().toUpperCase();\n\n    if (extension != \"MP4\" && extension != \"AVI\" && extension != \"MPG\" && extension != \"MKV\" && extension != \"WEBM\") {\n      $(function () {\n        (function () {\n          $(\".btn-close\").trigger(\"click\");\n          $(\".lobibox-close\").click();\n          Lobibox.notify(\"error\", {\n            position: \"top right\",\n            rounded: false,\n            delay: 2000,\n            delayIndicator: true,\n            msg: \"Invalid file format.\"\n          });\n        })();\n      });\n      $(\"#\" + MediaId).val(\"\");\n      return false;\n    }\n\n    $.ajax({\n      type: \"post\",\n      enctype: \"multipart/form-data\",\n      url: _uploadDocUrl,\n      data: data,\n      processData: false,\n      contentType: false,\n      cache: false,\n      timeout: 600000,\n      xhr: function xhr() {\n        var xhr = new window.XMLHttpRequest();\n        xhr.upload.addEventListener(\"progress\", function (evt) {\n          if (evt.lengthComputable) {\n            var percentComplete = evt.loaded / evt.total;\n            percentComplete = parseInt(percentComplete * 100);\n            $(\".myprogress\").text(percentComplete + \"%\");\n            $(\".myprogress\").css(\"width\", percentComplete + \"%\");\n          }\n        }, false);\n        return xhr;\n      },\n      beforeSend: function beforeSend() {},\n      success: function success(data) {\n        // console.log(\"success\");\n        $(\".btn-close\").trigger(\"click\");\n        $(\".lobibox-close\").click();\n        Lobibox.notify(data[\"type\"], {\n          position: \"top right\",\n          msg: data[\"message\"]\n        });\n\n        if (data[\"status_code\"] == 200) {\n          $(\"#prev_video\").html('<p class=\"mb5\"><a download href=\"' + data[\"full_path\"] + '\" title=\"Download Video\"><img src=\"' + site_url + '/public/img/download-video-1.png\"/></a></p>');\n          $(\"#f_\" + MediaId).val(data[\"filename\"]);\n          $(\"#\" + MediaId).val(data[\"filename\"]);\n        }\n      },\n      error: function error(e) {\n        $(\".btn-close\").trigger(\"click\");\n        $(\".lobibox-close\").click();\n        jQuery(\"#logo-duplicate_\" + MediaId).val(\"\");\n        var Arry = e.responseText;\n        var error = \"\";\n        JSON.parse(Arry, function (k, v) {\n          if (_typeof(v) != \"object\") {\n            error += v + \"<br>\";\n          }\n        });\n        Lobibox.notify(\"error\", {\n          position: \"top right\",\n          rounded: false,\n          delay: 2000,\n          delayIndicator: true,\n          msg: error\n        });\n      }\n    });\n  });\n  $(\"body\").delegate(\".imageanddocupload\", \"change\", function (event) {\n    var MediaId = this.id;\n    _uploadDocUrl = $(this).data(\"uploadurl\");\n    _downloadUrl = $(this).data(\"downloadurl\");\n    var inter;\n    Lobibox.progress({\n      title: \"Please wait\",\n      label: \"Uploading files...\",\n      progressTpl: '<div class=\"progress \" >\\n\\\r\n            <div class=\"progress-bar progress-bar-danger progress-bar-striped lobibox-progress-element myprogress\" role=\"progressbar\" style=\"width:0%\">0%</div>\\n\\\r\n            </div>',\n      progressCompleted: function progressCompleted() {},\n      onShow: function onShow($this) {\n        var xhr = new window.XMLHttpRequest();\n        xhr.upload.addEventListener(\"progress\", function (evt) {\n          if (evt.lengthComputable) {\n            var percentComplete = evt.loaded / evt.total;\n            percentComplete = parseInt(percentComplete * 100);\n            $(\".myprogress\").text(percentComplete + \"%\");\n            $(\".myprogress\").css(\"width\", percentComplete + \"%\");\n            var i = 0;\n          }\n        }, false);\n        return xhr;\n      },\n      closed: function closed() {}\n    });\n    event.preventDefault();\n    var data = new FormData();\n    var files = $(\"#\" + MediaId).get(0).files;\n    data.append(\"_token\", getMetaContentByName(\"csrf-token\"));\n\n    if (files.length > 0) {\n      data.append(\"files\", files[0]);\n    } else {\n      $(function () {\n        (function () {\n          $(\".btn-close\").trigger(\"click\");\n          $(\".lobibox-close\").click();\n          Lobibox.notify(\"info\", {\n            position: \"top right\",\n            rounded: false,\n            delay: 2000,\n            delayIndicator: true,\n            msg: \"Please select file to upload.\"\n          });\n        })();\n      });\n      return false;\n    }\n\n    var extension = $(\"#\" + MediaId).val().split(\".\").pop().toUpperCase();\n\n    if (extension != \"DOC\" && extension != \"DOCX\" && extension != \"TXT\" && extension != \"PDF\" && extension != \"PNG\" && extension != \"JPG\" && extension != \"JPEG\") {\n      $(function () {\n        (function () {\n          $(\".btn-close\").trigger(\"click\");\n          $(\".lobibox-close\").click();\n          Lobibox.notify(\"error\", {\n            position: \"top right\",\n            rounded: false,\n            delay: 2000,\n            delayIndicator: true,\n            msg: \"Invalid file format.\"\n          });\n        })();\n      });\n      $(\"#\" + MediaId).val(\"\");\n      return false;\n    }\n\n    $.ajax({\n      type: \"post\",\n      enctype: \"multipart/form-data\",\n      url: _uploadDocUrl,\n      data: data,\n      processData: false,\n      contentType: false,\n      cache: false,\n      timeout: 600000,\n      xhr: function xhr() {\n        var xhr = new window.XMLHttpRequest();\n        xhr.upload.addEventListener(\"progress\", function (evt) {\n          if (evt.lengthComputable) {\n            var percentComplete = evt.loaded / evt.total;\n            percentComplete = parseInt(percentComplete * 100);\n            $(\".myprogress\").text(percentComplete + \"%\");\n            $(\".myprogress\").css(\"width\", percentComplete + \"%\");\n          }\n        }, false);\n        return xhr;\n      },\n      beforeSend: function beforeSend() {},\n      success: function success(data) {\n        $(\".btn-close\").trigger(\"click\");\n        $(\".lobibox-close\").click();\n        Lobibox.notify(data[\"type\"], {\n          position: \"top right\",\n          msg: data[\"message\"]\n        });\n\n        if (data[\"status_code\"] == 251) {\n          $(\"#ht_\" + MediaId).html('<p class=\"mb5\"><a download href=\"' + _downloadUrl + \"/\" + data[\"filename\"] + '\">' + data[\"filename\"] + \"</a></p>\");\n          $(\"#f_\" + MediaId).val(data[\"filename\"]);\n          $(\"#f_\" + MediaId).next().css({\n            display: \"none\"\n          });\n        }\n\n        if (data[\"status_code\"] == 252) {\n          $(\"#ht_\" + MediaId).html('<p class=\"mb5\"><a download href=\"' + _downloadUrl + \"/\" + data[\"filename\"] + '\">' + data[\"filename\"] + \"</a></p>\");\n          $(\"#f_\" + MediaId).val(data[\"filename\"]);\n          $(\"#f_\" + MediaId).next().css({\n            display: \"none\"\n          });\n        }\n\n        if (data[\"status_code\"] == 200) {\n          $(\"#f_\" + MediaId).val(data[\"filename\"]);\n          $(\"#\" + MediaId).val(data[\"filename\"]);\n        }\n      },\n      error: function error(e) {\n        $(\".btn-close\").trigger(\"click\");\n        $(\".lobibox-close\").click();\n        jQuery(\"#logo-duplicate_\" + MediaId).val(\"\");\n        var Arry = e.responseText;\n        var error = \"\";\n        JSON.parse(Arry, function (k, v) {\n          if (_typeof(v) != \"object\") {\n            error += v + \"<br>\";\n          }\n        });\n        Lobibox.notify(\"error\", {\n          position: \"top right\",\n          rounded: false,\n          delay: 2000,\n          delayIndicator: true,\n          msg: error\n        });\n      }\n    });\n  });\n  $(\"body\").delegate(\".imageandpdfupload\", \"change\", function (event) {\n    var MediaId = this.id;\n    _uploadDocUrl = $(this).data(\"uploadurl\");\n    _downloadUrl = $(this).data(\"downloadurl\");\n    var inter;\n    Lobibox.progress({\n      title: \"Please wait\",\n      label: \"Uploading files...\",\n      progressTpl: '<div class=\"progress \" >\\n\\\r\n            <div class=\"progress-bar progress-bar-danger progress-bar-striped lobibox-progress-element myprogress\" role=\"progressbar\" style=\"width:0%\">0%</div>\\n\\\r\n            </div>',\n      progressCompleted: function progressCompleted() {},\n      onShow: function onShow($this) {\n        var xhr = new window.XMLHttpRequest();\n        xhr.upload.addEventListener(\"progress\", function (evt) {\n          if (evt.lengthComputable) {\n            var percentComplete = evt.loaded / evt.total;\n            percentComplete = parseInt(percentComplete * 100);\n            $(\".myprogress\").text(percentComplete + \"%\");\n            $(\".myprogress\").css(\"width\", percentComplete + \"%\");\n            var i = 0;\n          }\n        }, false);\n        return xhr;\n      },\n      closed: function closed() {}\n    });\n    event.preventDefault();\n    var data = new FormData();\n    var files = $(\"#\" + MediaId).get(0).files;\n    data.append(\"_token\", getMetaContentByName(\"csrf-token\"));\n\n    if (files.length > 0) {\n      data.append(\"files\", files[0]);\n    } else {\n      $(function () {\n        (function () {\n          $(\".btn-close\").trigger(\"click\");\n          $(\".lobibox-close\").click();\n          Lobibox.notify(\"info\", {\n            position: \"top right\",\n            rounded: false,\n            delay: 2000,\n            delayIndicator: true,\n            msg: \"Please select file to upload.\"\n          });\n        })();\n      });\n      return false;\n    }\n\n    var extension = $(\"#\" + MediaId).val().split(\".\").pop().toUpperCase();\n\n    if (extension != \"PDF\" && extension != \"PNG\" && extension != \"JPG\" && extension != \"JPEG\") {\n      $(function () {\n        (function () {\n          $(\".btn-close\").trigger(\"click\");\n          $(\".lobibox-close\").click();\n          Lobibox.notify(\"error\", {\n            position: \"top right\",\n            rounded: false,\n            delay: 2000,\n            delayIndicator: true,\n            msg: \"Invalid file format.\"\n          });\n        })();\n      });\n      $(\"#\" + MediaId).val(\"\");\n      return false;\n    }\n\n    $.ajax({\n      type: \"post\",\n      enctype: \"multipart/form-data\",\n      url: _uploadDocUrl,\n      data: data,\n      processData: false,\n      contentType: false,\n      cache: false,\n      timeout: 600000,\n      xhr: function xhr() {\n        var xhr = new window.XMLHttpRequest();\n        xhr.upload.addEventListener(\"progress\", function (evt) {\n          if (evt.lengthComputable) {\n            var percentComplete = evt.loaded / evt.total;\n            percentComplete = parseInt(percentComplete * 100);\n            $(\".myprogress\").text(percentComplete + \"%\");\n            $(\".myprogress\").css(\"width\", percentComplete + \"%\");\n          }\n        }, false);\n        return xhr;\n      },\n      beforeSend: function beforeSend() {},\n      success: function success(data) {\n        $(\".btn-close\").trigger(\"click\");\n        $(\".lobibox-close\").click();\n        Lobibox.notify(data[\"type\"], {\n          position: \"top right\",\n          msg: data[\"message\"]\n        });\n\n        if (data[\"status_code\"] == 251) {\n          $(\"#ht_\" + MediaId).html('<p class=\"mb5\"><a download href=\"' + _downloadUrl + \"/\" + data[\"filename\"] + '\">' + data[\"filename\"] + \"</a></p>\");\n          $(\"#f_\" + MediaId).val(data[\"filename\"]);\n          $(\"#f_\" + MediaId).next().css({\n            display: \"none\"\n          });\n        }\n\n        if (data[\"status_code\"] == 252) {\n          if (extension == \"PDF\") {\n            $(\"#ht_\" + MediaId).html('<p class=\"mb5\"><a download href=\"' + _downloadUrl + \"/\" + data[\"filename\"] + '\">' + data[\"filename\"] + \"</a></p>\");\n            $(\"#f_\" + MediaId).val(data[\"filename\"]);\n            $(\"#f_\" + MediaId).next().css({\n              display: \"none\"\n            });\n          } else {\n            $(\"#ht_\" + MediaId).html('<p class=\"mb5\"><a download href=\"' + _downloadUrl + \"/\" + data[\"filename\"] + '\">' + data[\"filename\"] + \"</a></p>\");\n            $(\"#f_\" + MediaId).val(data[\"filename\"]);\n            $(\"#f_\" + MediaId).next().css({\n              display: \"none\"\n            });\n          }\n        }\n\n        if (data[\"status_code\"] == 250) {\n          if (extension == \"PDF\") {\n            $(\"#ht_\" + MediaId).html('<p class=\"mb5\"><a download href=\"' + _downloadUrl + \"/\" + data[\"filename\"] + '\">' + data[\"filename\"] + \"</a></p>\");\n            $(\"#f_\" + MediaId).val(data[\"filename\"]);\n            $(\"#f_\" + MediaId).next().css({\n              display: \"none\"\n            });\n          } else {\n            $(\"#f_\" + MediaId).val(data[\"filename\"]);\n            $(\"#f_\" + MediaId).next().css({\n              display: \"none\"\n            });\n          }\n        }\n\n        if (data[\"status_code\"] == 200) {\n          $(\"#f_\" + MediaId).val(data[\"filename\"]);\n          $(\"#\" + MediaId).val(data[\"filename\"]);\n        }\n      },\n      error: function error(e) {\n        $(\".btn-close\").trigger(\"click\");\n        $(\".lobibox-close\").click();\n        jQuery(\"#logo-duplicate_\" + MediaId).val(\"\");\n        var Arry = e.responseText;\n        var error = \"\";\n        JSON.parse(Arry, function (k, v) {\n          if (_typeof(v) != \"object\") {\n            error += v + \"<br>\";\n          }\n        });\n        Lobibox.notify(\"error\", {\n          position: \"top right\",\n          rounded: false,\n          delay: 2000,\n          delayIndicator: true,\n          msg: error\n        });\n      }\n    });\n  });\n});\n\nvar DirectFormSubmitWithAjax = function () {\n  \"use strict\";\n\n  return {\n    init: function init() {\n      $(\"body\").on(\"click\", \".directSubmit\", function () {\n        var submitFormId = \"F_\" + this.id;\n        var action = $(\"#\" + submitFormId).attr(\"action\");\n        var step_count = $(\"#stepCount\").text();\n        var addStep = step_count != 4 ? parseInt(step_count) + 1 : step_count;\n\n        if (typeof $(this).data(\"loader\") != \"undefined\") {\n          var _loaderMsg = $(this).data(\"loader\");\n        }\n\n        $(\"#\" + submitFormId).validate({\n          ignore: [],\n          rules: {\n            password: {\n              minlength: 8,\n              required: true //special_char_password: true,\n\n              /*required: function() {\r\n                  if ($(\"#old_password\").val() == '')\r\n                      return false;\r\n                  else\r\n                      return true;\r\n              }*/\n\n            },\n            mobile_otp: {\n              required: true,\n              minlength: 4\n            },\n            phone: {\n              required: true,\n              minlength: 10\n            },\n            name: {\n              required: true\n            },\n            npass: {\n              minlength: 8\n            },\n            password_confirmation: {\n              equalTo: \"#newpassword\"\n            },\n            password_confirmation_institution: {\n              equalTo: \"#password_institution\"\n            },\n            \"g-recaptcha-response\": {\n              required: function required() {\n                if (grecaptcha.getResponse() == \"\") {\n                  return true;\n                } else {\n                  return false;\n                }\n              }\n            },\n            space_rules: {\n              required: function required(textarea) {\n                CKEDITOR.instances[textarea.id].updateElement();\n                var editorcontent = textarea.value.replace(/<[^>]*>/gi, \"\");\n                return editorcontent.length === 0;\n              }\n            },\n            \"visit\": {\n              required: function required() {\n                if (visit == \"\") {\n                  return true;\n                } else {\n                  return false;\n                }\n              }\n            }\n          },\n          messages: {\n            password: {\n              minlength: must_minimum_digit_pwd,\n              special_char_password: \"Password should have one upper case, one lower case, one special characters and one digit\"\n            },\n            npass: {\n              minlength: must_minimum_digit_pwd\n            },\n            password_confirmation: {\n              equalTo: _enter_same_as_passowed\n            },\n            password_confirmation_institution: {\n              equalTo: _enter_same_as_passowed\n            },\n            mobile_otp: {\n              required: \"Please enter OTP\",\n              minlength: \"Please enter at least 4 digits.\"\n            },\n            phone: {\n              required: \"Please enter mobile number\",\n              minlength: \"Invalid mobile number.\"\n            },\n            name: {\n              required: \"Please enter owner name\"\n            },\n            \"g-recaptcha-response\": verify_you_are_human\n          },\n          errorPlacement: function errorPlacement(e, r) {\n            e.appendTo(r.closest(\".ermsg\"));\n          },\n          submitHandler: function submitHandler(form) {\n            $(\".directSubmit\").prop(\"disabled\", true);\n            $(\".lobibox-close\").trigger(\"click\");\n            $(form).ajaxSubmit({\n              url: action,\n              type: \"POST\",\n              cache: false,\n              dataType: \"json\",\n              beforeSend: function beforeSend() {\n                $(\"#loader_msg\").html(_loaderMsg);\n                $(\"#loader\").show();\n              },\n              complete: function complete() {\n                $(\"#loader\").hide();\n              },\n              success: function success(data) {\n                $(\".directSubmit\").prop(\"disabled\", false);\n                Lobibox.notify(data[\"type\"], {\n                  position: \"top right\",\n                  msg: data[\"message\"]\n                });\n\n                if (data[\"status_code\"] == 205) {\n                  if ($(\".nextButton_\" + step_count + \"\").attr('data-title') != '') {\n                    $('.content_steps').text($(\".nextButton_\" + step_count + \"\").attr('data-title'));\n                  }\n\n                  $(\"#stepCount\").text(addStep);\n\n                  if (data[\"url\"]) {\n                    if (data[\"_blank\"]) {\n                      $(\"#loader\").hide();\n                      $(\".close\").trigger(\"click\");\n                      $(\".directSubmit\").prop(\"disabled\", false);\n                      window.open(data[\"url\"], \"_blank\");\n                    } else {\n                      location.href = data[\"url\"];\n                    }\n                  } else {\n                    if (data[\"html_data\"]) {\n                      $(\"#reserve_block\" + data[\"step\"]).html(\"\");\n                      $(\"#reserve_block\" + data[\"step\"]).html(JSON.parse(data[\"html_data\"]));\n                    }\n\n                    $(\"#loader\").hide();\n\n                    if (data[\"image_panel\"]) {\n                      $(\".RoomImagesDiv\").hide();\n                      $(\".Roomfiles\").prop(\"required\", false);\n                      $.each(JSON.parse(data[\"active_rooms\"]), function (key, val) {\n                        $(\"#\" + val + \"RoomImagesDiv\").show();\n                        $(\"#f_\" + val + \"_room_images\").prop(\"required\", true);\n                      });\n                    }\n\n                    if (data[\"property_type_name\"]) {\n                      $(\"#propertyTypeName\").html(data[\"property_type_name\"]);\n                    }\n\n                    if (data[\"scroll\"]) {\n                      document.body.scrollTop = data[\"scroll\"];\n                      document.documentElement.scrollTop = data[\"scroll\"];\n                    }\n\n                    $(\"#\" + data[\"current_step\"]).hide();\n                    $(\".\" + data[\"next_step\"]).show();\n                    $(\"#\" + data[\"next_step\"]).show();\n\n                    if (data[\"err_field\"]) {\n                      if (data[\"err_field\"]) {\n                        var el = $(document).find('[name=\"' + data[\"err_field\"] + '\"]');\n                        el.after($('<label class=\"error\">' + data[\"message\"] + \"</label>\"));\n                      }\n\n                      Lobibox.notify(data[\"type\"], {\n                        position: \"top right\",\n                        msg: data[\"message\"]\n                      });\n                    }\n                  }\n                } else if (data[\"r_type\"] == \"space_availity\") {\n                  $(\"#loader\").hide();\n\n                  if (data[\"html\"]) {\n                    $(\"#reserve_block\").html(\"\");\n                    $(\"#reserve_block\").html(JSON.parse(data[\"body\"]));\n                  }\n                } else {\n                  $(\"#loader\").hide();\n\n                  if (data[\"reset\"]) {\n                    if (data[\"gcp-reset\"]) {\n                      grecaptcha.reset();\n                    }\n\n                    document.getElementById(submitFormId).reset();\n                    $(\".hidden-field\").val(\"\");\n                  }\n\n                  if (data[\"modelClose\"]) {\n                    $(\"#\" + data[\"modelClose\"]).modal(\"hide\");\n                  }\n\n                  if (data[\"upload_agreement\"] == true) {\n                    serach();\n                  }\n\n                  if (data[\"status_code\"] == 200) {\n                    if (data[\"html\"]) {\n                      $(\"#result\").html(\"\");\n                      $(\"#result\").html(JSON.parse(data[\"body\"]));\n                    }\n\n                    if (data[\"otp_vendor\"]) {\n                      $(\"#loginVendor\").hide();\n                      $(\".vendorPhone\").prop(\"readonly\", true);\n                      $(\".vendor_OTP_form\").show();\n                    }\n\n                    if (data[\"otp_mobile_update\"]) {\n                      $(\".mobile_OTP_box\").show();\n                      $(\".mobile_OTP_input\").prop(\"disabled\", false);\n                      $(\".mobile_OTP_input\").prop(\"required\", true);\n                    }\n\n                    if (data[\"otp_Box_hide\"]) {\n                      $(\".mobile_OTP_box\").hide();\n                      $(\".mobile_OTP_input\").prop(\"required\", false);\n                      $(\".mobile_OTP_input\").val(\"\");\n                      $(\".mobile_OTP_input\").prop(\"disabled\", true);\n                    }\n                  }\n\n                  if (data[\"status_code\"] == 207) {\n                    if (data[\"html\"]) {\n                      $(\"#verifypin_otp\").modal({\n                        backdrop: \"static\",\n                        keyboard: false\n                      });\n                      $(\"#verifypin_otp_content\").empty().append(JSON.parse(data[\"html\"]));\n                    }\n                  }\n\n                  if (data['walletAmount']) {\n                    $(\".updateWalletAmount\").html(data['walletAmount']);\n                    $('#paymentModal').modal('hide');\n                  }\n\n                  if (data[\"url\"]) {\n                    location.href = data[\"url\"];\n                  }\n\n                  if (data[\"redirect-url\"]) {\n                    location.href = data[\"redirect-url\"];\n                  }\n\n                  if (data[\"tab-active\"]) {\n                    // return false;\n                    $(\"html, body\").animate({\n                      scrollTop: 0\n                    }, \"slow\");\n                    $(\".lobibox-notify-wrapper\").hide();\n                    $(\"#\" + data[\"tab-active\"]).trigger(\"click\");\n                  }\n                }\n              },\n              error: function error(e) {\n                $(\"#loader\").hide();\n                $(\".directSubmit\").prop(\"disabled\", false);\n\n                if (e.status === 401) {\n                  var result = JSON.parse(e.responseText);\n\n                  if (result[\"redirect\"]) {\n                    $(\"#redirect\").val(result[\"redirect\"]);\n                  }\n\n                  Lobibox.notify(\"error\", {\n                    position: \"top right\",\n                    msg: \"Please login to perform this action\"\n                  }); //$(\"#login\").modal(\"show\");\n                } else {\n                  var Arry = e.responseText;\n                  console.log(Arry);\n                  var error = \"\";\n                  JSON.parse(Arry, function (k, v) {\n                    if (_typeof(v) != \"object\") {\n                      if (v != \"The given data was invalid.\") {\n                        error += v + \"<br>\";\n                      }\n                    }\n                  });\n                  Lobibox.notify(\"error\", {\n                    rounded: false,\n                    delay: 3000,\n                    delayIndicator: true,\n                    position: \"top right\",\n                    msg: error\n                  });\n                }\n              }\n            });\n          }\n        });\n        $(\".close\").on(\"click\", function () {\n          if ($(\".cover_image_files\").hasClass(\"error\")) {\n            $(\"label .error\").hide();\n          }\n        });\n      });\n    }\n  };\n}();\n\n$(\"body\").on(\"click\", \".clickBelowContinue\", function () {\n  var mainId = $(this).data(\"stepid\");\n  $(\"#\" + mainId).trigger(\"click\");\n  return false;\n});\n$(\"body\").on(\"click\", \".get-details-in-model-globally\", function () {\n  var __Action = $(this).data(\"actionurl\");\n\n  if (typeof $(this).data(\"loader\") != \"undefined\") {\n    var _loaderMsg = $(this).data(\"loader\");\n  }\n\n  $.ajax({\n    type: \"get\",\n    url: __Action,\n    data: \"\",\n    processData: false,\n    contentType: false,\n    cache: false,\n    timeout: 600000,\n    beforeSend: function beforeSend() {\n      $(\"#loader_msg\").html(_loaderMsg);\n      $(\"#loader\").show();\n    },\n    success: function success(result) {\n      $(\"#loader\").hide();\n      $(\"#globalModelLarge\").modal({\n        backdrop: \"static\",\n        keyboard: false\n      });\n      $(\"#modelContentLarge\").empty().append(JSON.parse(result[\"body\"]));\n      $(\".group1\").colorbox({\n        rel: \"group1\"\n      });\n    },\n    error: function error(e) {\n      $(\"#loader\").hide();\n      $(\".btn-close\").trigger(\"click\");\n      $(\".lobibox-close\").click();\n      var Arry = e.responseText;\n      var error = \"\";\n      JSON.parse(Arry, function (k, v) {\n        if (_typeof(v) != \"object\") {\n          error += v + \"<br>\";\n        }\n      });\n      Lobibox.notify(\"error\", {\n        position: \"top right\",\n        rounded: false,\n        delay: 2000,\n        delayIndicator: true,\n        msg: error\n      });\n    }\n  });\n});\n$(\"body\").on(\"click\", \".resendVerificationPhoneCode\", function (e) {\n  e.preventDefault();\n\n  var __Action = $(this).data(\"actionurl\");\n\n  if (typeof $(this).data(\"loader\") != \"undefined\") {\n    var _loaderMsg = $(this).data(\"loader\");\n  }\n\n  $.ajax({\n    type: \"get\",\n    url: __Action,\n    data: \"\",\n    processData: false,\n    contentType: false,\n    cache: false,\n    timeout: 600000,\n    dataType: \"json\",\n    beforeSend: function beforeSend() {\n      $(\".resendVerificationPhoneCode\").prop(\"disabled\", true);\n      $(\"#loader_msg\").html(_loaderMsg);\n      $(\"#loader\").show();\n    },\n    success: function success(data) {\n      $(\"#loader\").hide();\n      $(\".lobibox-close\").click();\n      $(\".resendVerificationPhoneCode\").prop(\"disabled\", false);\n      Lobibox.notify(data[\"type\"], {\n        position: \"top right\",\n        msg: data[\"message\"]\n      });\n\n      if (data[\"status_code\"] == 200) {\n        if (data[\"url\"]) {\n          location.href = data[\"url\"];\n        }\n      }\n    },\n    error: function error(e) {\n      $(\"#loader\").hide();\n      $(\".btn-close\").trigger(\"click\");\n      $(\".lobibox-close\").click();\n      var Arry = e.responseText;\n      var error = \"\";\n      JSON.parse(Arry, function (k, v) {\n        if (_typeof(v) != \"object\") {\n          error += v + \"<br>\";\n        }\n      });\n      Lobibox.notify(\"error\", {\n        position: \"top right\",\n        rounded: false,\n        delay: 2000,\n        delayIndicator: true,\n        msg: error\n      });\n    }\n  });\n});\n$(\".inputs\").keyup(function () {\n  if (this.value.length == this.maxLength) {\n    var $next = $(this).next(\".inputs\");\n    if ($next.length) $(this).next(\".inputs\").focus();else $(this).blur();\n  }\n}); //Use on loan questionaries page\n\n$(\".get-questionarre\").click(function () {\n  var inputValue = $(this).attr(\"value\");\n\n  var __divid = $(this).data(\"div\");\n\n  $(\"#div\" + __divid).hide();\n  $(\"#ans_desc_\" + __divid).prop(\"required\", false);\n\n  if (inputValue.toUpperCase() != \"NO\") {\n    $(\"#ans_desc_\" + __divid).prop(\"required\", true);\n    $(\"#div\" + __divid).show();\n  }\n});\n$(\".get-questionarre:checked\").each(function () {\n  var inputValue = $(this).attr(\"value\");\n\n  var __divid = $(this).data(\"div\");\n\n  $(\"#div\" + __divid).hide();\n  $(\"#ans_desc_\" + __divid).prop(\"required\", false);\n\n  if (inputValue.toUpperCase() != \"NO\") {\n    $(\"#ans_desc_\" + __divid).prop(\"required\", true);\n    $(\"#div\" + __divid).show();\n  }\n}); // Used for dropdown-with-text case\n\n$(\".dropwithtext\").change(function () {\n  var inputValue = this.value;\n\n  var __divid = $(this).data(\"div\");\n\n  if (inputValue == \"\") {\n    $(\"#div\" + __divid).fadeOut(\"slow\");\n    $(\"#ans_desc_\" + __divid).prop(\"required\", false);\n  } else {\n    $(\"#ans_desc_\" + __divid).prop(\"required\", true);\n    $(\"#div\" + __divid).fadeIn(1500);\n  }\n});\n$(\".dropwithtext\").each(function () {\n  var inputValue = this.value;\n\n  var __divid = $(this).data(\"div\");\n\n  if (inputValue == \"\") {\n    $(\"#div\" + __divid).fadeOut(\"slow\");\n    $(\"#ans_desc_\" + __divid).prop(\"required\", false);\n  } else {\n    $(\"#ans_desc_\" + __divid).prop(\"required\", true);\n    $(\"#div\" + __divid).fadeIn(1500);\n  }\n}); //End Used for dropdown-with-text case\n//Make fav-unfav project\n\n$(\".isfav\").click(function () {\n  var __Action = $(this).data(\"actionurl\");\n\n  var removeId = $(this).data(\"removeid\");\n  $(\"#\" + removeId).html(\"\").hide();\n  $.ajax({\n    type: \"get\",\n    url: __Action,\n    data: \"\",\n    processData: false,\n    contentType: false,\n    cache: false,\n    timeout: 600000,\n    dataType: \"json\",\n    beforeSend: function beforeSend() {},\n    success: function success(data) {\n      $(\".ajaxloader\").hide();\n      Lobibox.notify(data[\"type\"], {\n        position: \"top right\",\n        msg: data[\"message\"]\n      });\n    },\n    error: function error(e) {\n      $(\".ajaxloader\").hide();\n      $(\".btn-close\").trigger(\"click\");\n      $(\".lobibox-close\").click();\n      var Arry = e.responseText;\n      var error = \"\";\n      JSON.parse(Arry, function (k, v) {\n        if (_typeof(v) != \"object\") {\n          error += v + \"<br>\";\n        }\n      });\n    }\n  });\n}); // fa-eye fa-eye-slash\n\n$(\".toggle-password\").on(\"click\", function () {\n  $(this).toggleClass(\"fa-eye fa-eye-slash\");\n  var input = $($(this).attr(\"toggle\"));\n\n  if (input.attr(\"type\") == \"password\") {\n    input.attr(\"type\", \"text\");\n  } else {\n    input.attr(\"type\", \"password\");\n  }\n});\n$(\".icloseiicon\").on(\"click\", function () {\n  $(\".advertise_block\").fadeOut(\"slow\");\n});\n$(\"body\").delegate(\".borrow-box-toggle-box\", \"click\", function () {\n  var ToggleId = $(this).data(\"toggleid\");\n  $(this).closest(\".\" + ToggleId).toggleClass(\"open\");\n});\n\nif (document.getElementById(\"searchtag\")) {\n  var initialize = function initialize() {\n    var input = document.getElementById(\"searchTextField\");\n    var autocomplete = new google.maps.places.Autocomplete(input);\n    google.maps.event.addListener(autocomplete, \"place_changed\", function () {\n      var place = autocomplete.getPlace();\n\n      if (document.getElementById(\"city\")) {\n        document.getElementById(\"city\").value = place.name;\n      }\n\n      if (document.getElementById(\"cityLat\")) {\n        document.getElementById(\"cityLat\").value = place.geometry.location.lat();\n      }\n\n      if (document.getElementById(\"cityLng\")) {\n        document.getElementById(\"cityLng\").value = place.geometry.location.lng();\n      }\n    });\n  };\n\n  google.maps.event.addDomListener(window, \"load\", initialize);\n  $(\"#searchTextField\").keyup(function () {\n    if (document.getElementById(\"city\")) {\n      document.getElementById(\"city\").value = \"\";\n    }\n\n    if (document.getElementById(\"cityLat\")) {\n      document.getElementById(\"cityLat\").value = \"\";\n    }\n\n    if (document.getElementById(\"cityLng\")) {\n      document.getElementById(\"cityLng\").value = \"\";\n    }\n  });\n  $(\"#searchTextField\").blur(function () {\n    if (!document.getElementById(\"cityLat\").value && !document.getElementById(\"cityLng\").value) {\n      document.getElementById(\"searchTextField\").value = \"\";\n    }\n  });\n}\n\nif (document.getElementById(\"paymentform\")) {\n  var _initialize = function _initialize() {\n    var input = document.getElementById(\"searchTextField\");\n    var autocomplete = new google.maps.places.Autocomplete(input);\n    google.maps.event.addListener(autocomplete, \"place_changed\", function () {\n      var place = autocomplete.getPlace(); //document.getElementById('city').value = place.name;\n\n      document.getElementById(\"cityLat\").value = place.geometry.location.lat();\n      document.getElementById(\"cityLng\").value = place.geometry.location.lng();\n\n      for (var i = 0; i < place.address_components.length; i++) {\n        for (var j = 0; j < place.address_components[i].types.length; j++) {\n          if (place.address_components[i].types[j] == \"postal_code\") {\n            document.getElementById(\"zip_code\").value = place.address_components[i].long_name;\n          } else {\n            document.getElementById(\"zip_code\").value = \"\";\n          }\n        }\n\n        var addressType = place.address_components[i].types[0]; // for the country, get the country code (the \"short name\") also\n\n        if (addressType == \"country\") {\n          document.getElementById(\"country\").value = place.address_components[i].short_name;\n        }\n\n        if (addressType == \"administrative_area_level_1\") {\n          document.getElementById(\"state\").value = place.address_components[i].short_name;\n        }\n\n        if (addressType == \"locality\") {\n          document.getElementById(\"city\").value = place.address_components[i].short_name;\n        }\n      }\n    });\n  };\n\n  google.maps.event.addDomListener(window, \"load\", _initialize);\n  $(\"#searchTextField\").keyup(function () {\n    document.getElementById(\"city\").value = \"\";\n    document.getElementById(\"cityLat\").value = \"\";\n    document.getElementById(\"cityLng\").value = \"\";\n  });\n  $(\"#searchTextField\").blur(function () {\n    if (!document.getElementById(\"cityLat\").value && !document.getElementById(\"cityLng\").value) {\n      document.getElementById(\"searchTextField\").value = \"\";\n    }\n  });\n}\n\n$(\".spacelink\").click(function () {\n  $(\".spacemenutrigger\").trigger(\"click\");\n});\n$(\".myratingview\").starRating({\n  totalStars: 5,\n  starSize: 20,\n  activeColor: \"#FF6E41\",\n  useGradient: false,\n  readOnly: true\n});\n$(document).ready(function () {\n  $('[data-toggle=\"tooltip\"]').tooltip({\n    placement: \"top\"\n  });\n});\n$(\"body\").delegate(\".enablechat\", \"click\", function () {\n  var bookingId = $(this).data(\"bookingid\");\n  $(\"#chat_model\").modal(\"show\");\n  $(\"#chat_booking_id\").val(bookingId);\n});\n$(\"body\").delegate(\".disputemodel\", \"click\", function () {\n  var bookingId = $(this).data(\"bookingslug\");\n  $(\"#dispute_slug\").val(bookingId);\n});\n\nvar ReplaceUrl = function () {\n  \"use strict\";\n\n  return {\n    init: function init() {\n      window.history.pushState({\n        url: \"\" + REQUEST_URL + \"\"\n      }, \"\", REQUEST_URL);\n    }\n  };\n}();\n\n$(document).on(\"click\", \".store-visit\", function () {\n  var property_id = $(this).attr(\"data-id\");\n  var url = $(this).attr(\"data-url\");\n  $.ajax({\n    type: \"POST\",\n    url: url,\n    data: {\n      property_id: property_id\n    },\n    dataType: \"json\",\n    beforeSend: function beforeSend() {\n      $(\"#loader_msg\").html(_loaderMsg);\n      $(\"#loader\").show();\n    },\n    success: function success(data) {\n      $(\"#loader\").hide();\n      Lobibox.notify(data[\"type\"], {\n        position: \"top right\",\n        msg: data[\"message\"]\n      });\n\n      if (data[\"redirect-url\"]) {\n        location.href = data[\"redirect-url\"];\n      }\n    },\n    error: function error(data) {\n      if (data.responseJSON.message == \"Unauthenticated.\") {\n        Lobibox.notify(\"error\", {\n          position: \"top right\",\n          msg: \"Login as customer to schedule visit.\"\n        });\n        window.location.href = site_url + '/customer/login';\n      }\n\n      $(\"#loader\").hide();\n    }\n  });\n});\n$(\".all_filters\").addClass(\"showActive\");\n$(\".showActive\").css({\n  \"border-color\": \"#53d687\",\n  background: \"rgba(83, 214, 135, 0.1)\"\n});\n$(document).on(\"click\", \".myvisitRow\", function () {\n  window.open($(this).data(\"href\"), \"_blank\");\n}); // toggle eye change password\n\n$('.toggle-eye-password').click(function () {\n  if ($(this).hasClass('fa-eye')) {\n    $(this).removeClass('fa-eye');\n    $(this).addClass('fa-eye-slash');\n    $(this).next('input').attr('type', 'text');\n  } else {\n    $(this).removeClass('fa-eye-slash');\n    $(this).addClass('fa-eye');\n    $(this).next('input').attr('type', 'password');\n  }\n});\n$(window).on(\"load\", function () {\n  $(\"#agentcodeModal\").modal(\"show\");\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/frontend/developer.js\n");

/***/ }),

/***/ "./resources/js/frontend/filter.js":
/*!*****************************************!*\
  !*** ./resources/js/frontend/filter.js ***!
  \*****************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nif (document.getElementById(\"searchpage\")) {\n  $(document).ready(function () {\n    /****End Guest Selectors***/\n    $('body').on('change', '#state-dropdown-filter', function () {\n      getstateCItyFilter();\n    });\n    $('body').on('change', '#city-dropdown-filter', function () {\n      getCItyAreaFilter();\n    });\n    var state_id_selected = $(\"#state-dropdown-filter\").val();\n    var city_id_selected = $(\"#city-dropdown-filter\").val();\n\n    if (state_id_selected != '') {\n      getstateCItyFilter();\n    }\n\n    if (city_id_selected != '') {\n      getCItyAreaFilter();\n    }\n\n    function getstateCItyFilter() {\n      var state_id = $(\"#state-dropdown-filter\").val();\n      $.ajax({\n        url: APP_URL + '/api/get-state-cities',\n        type: \"POST\",\n        data: {\n          state_id: state_id\n        },\n        dataType: 'json',\n        success: function success(result) {\n          $(\"#city-dropdown-filter\").html('');\n          $(\"#city-dropdown-filter\").append('<option value=\"\">Select City</option>');\n          $.each(result.cities, function (key, value) {\n            $(\"#city-dropdown-filter\").append('<option value=\"' + value.id + '\">' + value.name + '</option>');\n\n            if ($(\"#city_id\").val() == value.id) {\n              $(\"#city-dropdown-filter\").val($(\"#city_id\").val());\n            }\n          });\n          getCItyAreaFilter();\n        }\n      });\n    }\n\n    function getCItyAreaFilter() {\n      var city_id__ = $(\"#city-dropdown-filter\").val();\n      $.ajax({\n        url: APP_URL + '/api/get-cities-area',\n        type: \"POST\",\n        data: {\n          city_id: city_id__\n        },\n        dataType: 'json',\n        success: function success(result) {\n          $(\"#area-dropdown-filter\").html('');\n          $(\"#area-dropdown-filter\").append('<option value=\"\">Select Area</option>');\n          $.each(result.areas, function (key, value) {\n            $(\"#area-dropdown-filter\").append('<option value=\"' + value.id + '\">' + value.name + '</option>');\n\n            if ($(\"#area_id\").val() == value.id) {\n              $(\"#area-dropdown-filter\").val($(\"#area_id\").val());\n            }\n          });\n        }\n      });\n    }\n\n    $(\"body\").on('change', '.bravo_form_filter_property input[name=property_type]', function () {\n      $(this).closest(\".bravo_form_filter_property\").submit();\n    });\n    $(\"body\").on('change', '.bravo_form_filter_search_property input[type=radio]', function () {\n      $(this).closest(\".bravo_form_filter_search_property\").submit();\n    });\n    $(\"body\").on('change', '.bravo_form_filter_search_property select', function () {\n      $(this).closest(\".bravo_form_filter_search_property\").submit();\n    });\n    $(\"body\").on('click', '.property-sort', function () {\n      var sort_by = $(this).attr('title');\n      $(\"#propertyOrderBy\").val(sort_by);\n      $(\".bravo_form_filter_search_property\").submit();\n    });\n    $(\"body\").on('click', '.property-map', function () {\n      var map = $(this).attr('data-title');\n      $(\"#mapShowVal\").val(map);\n      $(\".bravo_form_filter_search_property\").submit();\n    });\n    $(\"body\").on('click', '#searchFilterButton', function () {\n      $(\".bravo_form_filter_search_property\").submit();\n    });\n    $(\"body\").on('click', '.search-layout', function () {\n      var search_layout = $(this).attr('title');\n      $(\"#searchLayout\").val(search_layout);\n      $(\".bravo_form_filter_search_property\").submit();\n    });\n    $(\".bravo_form_filter_search_property\").submit(function (event) {\n      event.preventDefault();\n      var orderby = '';\n      var searchKey = '';\n      var searchLayout = '';\n      var check_in_date = '';\n      var check_out_date = '';\n      var occupancy_type = [];\n      var standard_type = '';\n      var room_ac_type = '';\n      var map_value = '';\n      var guests = '';\n      var children = '';\n      var adults = '';\n      var state_id = '';\n      var city_id = '';\n      var area_id = '';\n      var capacity = '';\n      var rating = '';\n      var property_type = '';\n      var available_for = [];\n      var price_range = ''; // var bhk_type = [];\n\n      var bhk_type = '';\n      var room_standard = [];\n\n      if ($(\"#propertyOrderBy\").val()) {\n        orderby = $(\"#propertyOrderBy\").val();\n      } // if ($(\"input[name='available_for']:checked\").val()) {\n      //     available_for = $(\"input[name='available_for']:checked\").val();\n      // }\n\n\n      if ($(\"input[name='available_for[]']:checked\").val()) {\n        $(\"input[name='available_for[]']:checked\").each(function (i) {\n          available_for[i] = $(this).val();\n        });\n      }\n\n      if ($(\"input[name='room_ac_type']:checked\").val()) {\n        room_ac_type = $(\"input[name='room_ac_type']:checked\").val();\n      }\n\n      if ($(\"input[name='price_range']:checked\").val()) {\n        price_range = $(\"input[name='price_range']:checked\").val();\n      }\n\n      if ($(\"input[name='property_type']:checked\").val()) {\n        property_type = $(\"input[name='property_type']:checked\").val();\n      }\n\n      if ($(\"input[name='rating']:checked\").val()) {\n        rating = $(\"input[name='rating']:checked\").val();\n      }\n\n      if ($(\"input[name='check_in_date']\").val()) {\n        check_in_date = $(\"input[name='check_in_date']\").val();\n      }\n\n      if ($(\"input[name='searchKey']\").val()) {\n        searchKey = $(\"input[name='searchKey']\").val();\n      }\n\n      if ($(\"input[name='map_value']\").val()) {\n        map_value = $(\"input[name='map_value']\").val();\n      }\n\n      if ($(\"input[name='guests']\").val()) {\n        guests = $(\"input[name='guests']\").val();\n      }\n\n      if ($(\"input[name='children']\").val()) {\n        children = $(\"input[name='children']\").val();\n      }\n\n      if ($(\"input[name='adults']\").val()) {\n        adults = $(\"input[name='adults']\").val();\n      }\n\n      if ($(\"input[name='occupancy_type[]']:checked\").val()) {\n        $(\"input[name='occupancy_type[]']:checked\").each(function (i) {\n          occupancy_type[i] = $(this).val();\n        });\n      }\n\n      if ($(\"input[name='room_standard[]']:checked\").val()) {\n        $(\"input[name='room_standard[]']:checked\").each(function (i) {\n          room_standard[i] = $(this).val();\n        });\n      }\n\n      if ($(\"input[name='bhk_type']\").val()) {\n        bhk_type = $(\"input[name='bhk_type']\").val();\n      }\n\n      if ($(\"input[name='check_out_date']\").val()) {\n        check_out_date = $(\"input[name='check_out_date']\").val();\n      }\n\n      if ($(\"#searchLayout\").val()) {\n        searchLayout = $(\"#searchLayout\").val();\n      }\n\n      if ($(\"select[name='state_id']\").val()) {\n        state_id = $(\"select[name='state_id']\").val();\n      }\n\n      if ($(\"select[name='capacity']\").val()) {\n        capacity = $(\"select[name='capacity']\").val();\n      }\n\n      if ($(\"select[name='city_id']\").val()) {\n        city_id = $(\"select[name='city_id']\").val();\n      }\n\n      if ($(\"select[name='area_id']\").val()) {\n        area_id = $(\"select[name='area_id']\").val();\n      }\n\n      var customURL = \"?\";\n\n      if (searchLayout != '') {\n        customURL = customURL + \"searchLayout=\" + searchLayout;\n      }\n\n      if (searchKey != '') {\n        customURL = customURL + \"&searchKey=\" + searchKey;\n      }\n\n      if (property_type != '') {\n        customURL = customURL + \"&property_type=\" + property_type;\n      }\n\n      if (rating != '') {\n        customURL = customURL + \"&rating=\" + rating;\n      }\n\n      if (map_value != '') {\n        customURL = customURL + \"&map_value=\" + map_value;\n      }\n\n      if (price_range != '') {\n        customURL = customURL + \"&price_range=\" + price_range;\n      }\n\n      if (state_id != '') {\n        customURL = customURL + \"&state_id=\" + state_id;\n      }\n\n      if (city_id != '') {\n        customURL = customURL + \"&city_id=\" + city_id;\n      }\n\n      if (area_id != '') {\n        customURL = customURL + \"&area_id=\" + area_id;\n      }\n\n      if (capacity != '') {\n        customURL = customURL + \"&capacity=\" + capacity;\n      }\n\n      if (orderby != '') {\n        customURL = customURL + \"&orderby=\" + orderby;\n      }\n\n      if (check_in_date != '') {\n        customURL = customURL + \"&check_in_date=\" + check_in_date;\n      }\n\n      if (check_out_date != '') {\n        customURL = customURL + \"&check_out_date=\" + check_out_date;\n      }\n\n      if (bhk_type != '') {\n        customURL = customURL + \"&bhk_type=\" + bhk_type;\n      }\n\n      if (occupancy_type != '') {\n        customURL = customURL + \"&occupancy_type=\" + occupancy_type;\n      }\n\n      if (guests != '') {\n        customURL = customURL + \"&guests=\" + guests;\n      }\n\n      if (children != '') {\n        customURL = customURL + \"&children=\" + children;\n      }\n\n      if (adults != '') {\n        customURL = customURL + \"&adults=\" + adults;\n      }\n\n      if (available_for != '') {\n        customURL = customURL + \"&available_for=\" + available_for;\n      }\n\n      if (room_ac_type != '') {\n        customURL = customURL + \"&room_ac_type=\" + room_ac_type;\n      }\n\n      if (room_standard != '') {\n        customURL = customURL + \"&room_standard=\" + room_standard;\n      }\n\n      var _changeUrl = REQUEST_URL + customURL; // window.history.pushState(\"object or string\", \"Filter\", _changeUrl);\n\n\n      $.ajax({\n        type: \"get\",\n        url: _changeUrl,\n        data: {},\n        datatype: \"html\",\n        beforeSend: function beforeSend() {\n          $(\"#loader_msg\").html(_loaderMsg);\n          $(\"#loader\").show();\n        }\n      }).done(function (data) {\n        window.history.pushState({\n          url: \"\" + REQUEST_URL + \"\"\n        }, '', _changeUrl);\n        $(\"#loader\").hide();\n\n        if (data['html_data']) {\n          $(\"#resultSearchProp\").empty().append(JSON.parse(data['html_data']));\n          $(\".myratingview\").starRating({\n            totalStars: 5,\n            starSize: 20,\n            activeColor: \"#FF6E41\",\n            useGradient: false,\n            readOnly: true\n          });\n        } else {\n          window.location.href = _changeUrl;\n        }\n      }).fail(function (jqXHR, ajaxOptions, thrownError) {\n        $(\"#loader\").hide();\n        $(\".btn-close\").trigger(\"click\");\n        $(\".lobibox-close\").click();\n        var Arry = e.responseText;\n        var error = \"\";\n        JSON.parse(Arry, function (k, v) {\n          if (_typeof(v) != 'object') {\n            error += v + \"<br>\";\n          }\n        });\n        Lobibox.notify('error', {\n          position: \"top right\",\n          rounded: false,\n          delay: 2000,\n          delayIndicator: true,\n          msg: error\n        });\n      });\n    });\n  });\n}\n\n$(document).ready(function () {\n  /****For Deal of The Day***/\n  $(document).on('click', '.deal-of-the-day-div', function (e) {\n    $('#title_coupon').html($(this).attr('data-coupon-name'));\n    $('#desc_coupon').html($(this).attr('data-coupon-desc'));\n    $('#image_coupon').css('background', 'url(' + $(this).attr('data-coupon-imgpath') + ')');\n    document.getElementById('coupon_offer_route').href = $(this).attr('data-offerhref');\n  });\n  /****For Deal of The Day***/\n\n  /****For Guest Selectors***/\n\n  $(document).on('click', '.guests-filter-input .btn-minus', function (e) {\n    e.stopPropagation();\n    var input = $(\".guests-filter-input input[name='guests']\");\n    var min = parseInt(input.attr('min'));\n    var old = parseInt(input.val());\n\n    if (old <= min) {\n      return;\n    }\n\n    input.val(old - 1);\n  });\n  $(document).on('click', '.guests-filter-input .btn-add', function (e) {\n    e.stopPropagation();\n    var input = $(\".guests-filter-input input[name='guests']\");\n    var max = parseInt(input.attr('max'));\n    var old = parseInt(input.val());\n\n    if (old >= max) {\n      return;\n    }\n\n    input.val(old + 1);\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/frontend/filter.js\n");

/***/ }),

/***/ "./resources/js/frontend/review.js":
/*!*****************************************!*\
  !*** ./resources/js/frontend/review.js ***!
  \*****************************************/
/***/ (() => {

eval("if (document.getElementById(\"customer_profile\") || document.getElementById(\"my_booking\")) {\n  $(document).on(\"click\", \".myproperty_modal_review\", function () {\n    $('#review_id_modal').val('');\n    $('input:radio[name=rate_number]').prop('checked', false);\n    $('#userReviewContent').val('');\n    var property_id = $(this).data('property-id');\n    var booking_id = $(this).data('booking-id');\n    var url = $(this).attr('data-url');\n    $('#property_id_modal').val(property_id);\n    $('#booking_id_modal').val(booking_id);\n    $.ajax({\n      type: 'POST',\n      url: url,\n      dataType: 'json',\n      data: {\n        'property_id': property_id,\n        'booking_id': booking_id\n      },\n      beforeSend: function beforeSend() {// $('#loader').show();\n      },\n      success: function success(data) {\n        // $('#loader').hide();\n        // console.log(data);\n        if (data['status_code'] == 205) {\n          $('#reviewProperty').modal('hide');\n          Lobibox.notify(data['type'], {\n            position: \"top right\",\n            msg: data['message']\n          }); // $('#review_id_modal').val(data.content.id);\n          // $('#rate'+data.content.rate_number).prop('checked', true);\n          // $('#userReviewContent').val(data.content.content);\n        }\n      },\n      error: function error(data) {\n        console.log(data);\n      }\n    });\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiJCIsIm9uIiwidmFsIiwicHJvcCIsInByb3BlcnR5X2lkIiwiZGF0YSIsImJvb2tpbmdfaWQiLCJ1cmwiLCJhdHRyIiwiYWpheCIsInR5cGUiLCJkYXRhVHlwZSIsImJlZm9yZVNlbmQiLCJzdWNjZXNzIiwibW9kYWwiLCJMb2JpYm94Iiwibm90aWZ5IiwicG9zaXRpb24iLCJtc2ciLCJlcnJvciIsImNvbnNvbGUiLCJsb2ciXSwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL2Zyb250ZW5kL3Jldmlldy5qcz8wMDhkIl0sInNvdXJjZXNDb250ZW50IjpbImlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImN1c3RvbWVyX3Byb2ZpbGVcIikgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJteV9ib29raW5nXCIpKSB7XHJcbiAgICAkKGRvY3VtZW50KS5vbihcImNsaWNrXCIsIFwiLm15cHJvcGVydHlfbW9kYWxfcmV2aWV3XCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAkKCcjcmV2aWV3X2lkX21vZGFsJykudmFsKCcnKTtcclxuICAgICAgICAkKCdpbnB1dDpyYWRpb1tuYW1lPXJhdGVfbnVtYmVyXScpLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSk7XHJcbiAgICAgICAgJCgnI3VzZXJSZXZpZXdDb250ZW50JykudmFsKCcnKTtcclxuICAgICAgICB2YXIgcHJvcGVydHlfaWQgPSAkKHRoaXMpLmRhdGEoJ3Byb3BlcnR5LWlkJyk7XHJcbiAgICAgICAgdmFyIGJvb2tpbmdfaWQgPSAkKHRoaXMpLmRhdGEoJ2Jvb2tpbmctaWQnKTtcclxuICAgICAgICB2YXIgdXJsID0gJCh0aGlzKS5hdHRyKCdkYXRhLXVybCcpO1xyXG4gICAgICAgICQoJyNwcm9wZXJ0eV9pZF9tb2RhbCcpLnZhbChwcm9wZXJ0eV9pZCk7XHJcbiAgICAgICAgJCgnI2Jvb2tpbmdfaWRfbW9kYWwnKS52YWwoYm9va2luZ19pZCk7XHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdHlwZTogJ1BPU1QnLFxyXG4gICAgICAgICAgICB1cmw6IHVybCxcclxuICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcclxuICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgJ3Byb3BlcnR5X2lkJzogcHJvcGVydHlfaWQsXHJcbiAgICAgICAgICAgICAgICAnYm9va2luZ19pZCc6IGJvb2tpbmdfaWQsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGJlZm9yZVNlbmQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIC8vICQoJyNsb2FkZXInKS5zaG93KCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN1Y2Nlc3M6IChkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyAkKCcjbG9hZGVyJykuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coZGF0YSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YVsnc3RhdHVzX2NvZGUnXSA9PSAyMDUpIHtcclxuICAgICAgICAgICAgICAgICAgICAkKCcjcmV2aWV3UHJvcGVydHknKS5tb2RhbCgnaGlkZScpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBMb2JpYm94Lm5vdGlmeShkYXRhWyd0eXBlJ10sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IFwidG9wIHJpZ2h0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1zZzogZGF0YVsnbWVzc2FnZSddXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gJCgnI3Jldmlld19pZF9tb2RhbCcpLnZhbChkYXRhLmNvbnRlbnQuaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICQoJyNyYXRlJytkYXRhLmNvbnRlbnQucmF0ZV9udW1iZXIpLnByb3AoJ2NoZWNrZWQnLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyAkKCcjdXNlclJldmlld0NvbnRlbnQnKS52YWwoZGF0YS5jb250ZW50LmNvbnRlbnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxRQUFRLENBQUNDLGNBQVQsQ0FBd0Isa0JBQXhCLEtBQStDRCxRQUFRLENBQUNDLGNBQVQsQ0FBd0IsWUFBeEIsQ0FBbkQsRUFBMEY7RUFDdEZDLENBQUMsQ0FBQ0YsUUFBRCxDQUFELENBQVlHLEVBQVosQ0FBZSxPQUFmLEVBQXdCLDBCQUF4QixFQUFvRCxZQUFZO0lBQzVERCxDQUFDLENBQUMsa0JBQUQsQ0FBRCxDQUFzQkUsR0FBdEIsQ0FBMEIsRUFBMUI7SUFDQUYsQ0FBQyxDQUFDLCtCQUFELENBQUQsQ0FBbUNHLElBQW5DLENBQXdDLFNBQXhDLEVBQW1ELEtBQW5EO0lBQ0FILENBQUMsQ0FBQyxvQkFBRCxDQUFELENBQXdCRSxHQUF4QixDQUE0QixFQUE1QjtJQUNBLElBQUlFLFdBQVcsR0FBR0osQ0FBQyxDQUFDLElBQUQsQ0FBRCxDQUFRSyxJQUFSLENBQWEsYUFBYixDQUFsQjtJQUNBLElBQUlDLFVBQVUsR0FBR04sQ0FBQyxDQUFDLElBQUQsQ0FBRCxDQUFRSyxJQUFSLENBQWEsWUFBYixDQUFqQjtJQUNBLElBQUlFLEdBQUcsR0FBR1AsQ0FBQyxDQUFDLElBQUQsQ0FBRCxDQUFRUSxJQUFSLENBQWEsVUFBYixDQUFWO0lBQ0FSLENBQUMsQ0FBQyxvQkFBRCxDQUFELENBQXdCRSxHQUF4QixDQUE0QkUsV0FBNUI7SUFDQUosQ0FBQyxDQUFDLG1CQUFELENBQUQsQ0FBdUJFLEdBQXZCLENBQTJCSSxVQUEzQjtJQUNBTixDQUFDLENBQUNTLElBQUYsQ0FBTztNQUNIQyxJQUFJLEVBQUUsTUFESDtNQUVISCxHQUFHLEVBQUVBLEdBRkY7TUFHSEksUUFBUSxFQUFFLE1BSFA7TUFJSE4sSUFBSSxFQUFFO1FBQ0YsZUFBZUQsV0FEYjtRQUVGLGNBQWNFO01BRlosQ0FKSDtNQVFITSxVQUFVLEVBQUUsc0JBQVksQ0FDcEI7TUFDSCxDQVZFO01BV0hDLE9BQU8sRUFBRSxpQkFBQ1IsSUFBRCxFQUFVO1FBQ2Y7UUFDQTtRQUNBLElBQUlBLElBQUksQ0FBQyxhQUFELENBQUosSUFBdUIsR0FBM0IsRUFBZ0M7VUFDNUJMLENBQUMsQ0FBQyxpQkFBRCxDQUFELENBQXFCYyxLQUFyQixDQUEyQixNQUEzQjtVQUVBQyxPQUFPLENBQUNDLE1BQVIsQ0FBZVgsSUFBSSxDQUFDLE1BQUQsQ0FBbkIsRUFBNkI7WUFDekJZLFFBQVEsRUFBRSxXQURlO1lBRXpCQyxHQUFHLEVBQUViLElBQUksQ0FBQyxTQUFEO1VBRmdCLENBQTdCLEVBSDRCLENBTzVCO1VBQ0E7VUFDQTtRQUNIO01BQ0osQ0F6QkU7TUEwQkhjLEtBQUssRUFBRSxlQUFVZCxJQUFWLEVBQWdCO1FBQ25CZSxPQUFPLENBQUNDLEdBQVIsQ0FBWWhCLElBQVo7TUFDSDtJQTVCRSxDQUFQO0VBOEJILENBdkNEO0FBeUNIIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL2pzL2Zyb250ZW5kL3Jldmlldy5qcy5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/frontend/review.js\n");

/***/ }),

/***/ "./resources/js/jquery.validate.min.js":
/*!*********************************************!*\
  !*** ./resources/js/jquery.validate.min.js ***!
  \*********************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/*! jQuery Validation Plugin - v1.11.1 - 3/22/2013\\n* https://github.com/jzaefferer/jquery-validation\r\n* Copyright (c) 2013 Jörn Zaefferer; Licensed MIT */\n(function (t) {\n  t.extend(t.fn, {\n    validate: function validate(e) {\n      if (!this.length) return e && e.debug && window.console && console.warn(\"Nothing selected, can't validate, returning nothing.\"), void 0;\n      var i = t.data(this[0], \"validator\");\n      return i ? i : (this.attr(\"novalidate\", \"novalidate\"), i = new t.validator(e, this[0]), t.data(this[0], \"validator\", i), i.settings.onsubmit && (this.validateDelegate(\":submit\", \"click\", function (e) {\n        i.settings.submitHandler && (i.submitButton = e.target), t(e.target).hasClass(\"cancel\") && (i.cancelSubmit = !0), void 0 !== t(e.target).attr(\"formnovalidate\") && (i.cancelSubmit = !0);\n      }), this.submit(function (e) {\n        function s() {\n          var s;\n          return i.settings.submitHandler ? (i.submitButton && (s = t(\"<input type='hidden'/>\").attr(\"name\", i.submitButton.name).val(t(i.submitButton).val()).appendTo(i.currentForm)), i.settings.submitHandler.call(i, i.currentForm, e), i.submitButton && s.remove(), !1) : !0;\n        }\n\n        return i.settings.debug && e.preventDefault(), i.cancelSubmit ? (i.cancelSubmit = !1, s()) : i.form() ? i.pendingRequest ? (i.formSubmitted = !0, !1) : s() : (i.focusInvalid(), !1);\n      })), i);\n    },\n    valid: function valid() {\n      if (t(this[0]).is(\"form\")) return this.validate().form();\n      var e = !0,\n          i = t(this[0].form).validate();\n      return this.each(function () {\n        e = e && i.element(this);\n      }), e;\n    },\n    removeAttrs: function removeAttrs(e) {\n      var i = {},\n          s = this;\n      return t.each(e.split(/\\s/), function (t, e) {\n        i[e] = s.attr(e), s.removeAttr(e);\n      }), i;\n    },\n    rules: function rules(e, i) {\n      var s = this[0];\n\n      if (e) {\n        var r = t.data(s.form, \"validator\").settings,\n            n = r.rules,\n            a = t.validator.staticRules(s);\n\n        switch (e) {\n          case \"add\":\n            t.extend(a, t.validator.normalizeRule(i)), delete a.messages, n[s.name] = a, i.messages && (r.messages[s.name] = t.extend(r.messages[s.name], i.messages));\n            break;\n\n          case \"remove\":\n            if (!i) return delete n[s.name], a;\n            var u = {};\n            return t.each(i.split(/\\s/), function (t, e) {\n              u[e] = a[e], delete a[e];\n            }), u;\n        }\n      }\n\n      var o = t.validator.normalizeRules(t.extend({}, t.validator.classRules(s), t.validator.attributeRules(s), t.validator.dataRules(s), t.validator.staticRules(s)), s);\n\n      if (o.required) {\n        var l = o.required;\n        delete o.required, o = t.extend({\n          required: l\n        }, o);\n      }\n\n      return o;\n    }\n  }), t.extend(t.expr[\":\"], {\n    blank: function blank(e) {\n      return !t.trim(\"\" + t(e).val());\n    },\n    filled: function filled(e) {\n      return !!t.trim(\"\" + t(e).val());\n    },\n    unchecked: function unchecked(e) {\n      return !t(e).prop(\"checked\");\n    }\n  }), t.validator = function (e, i) {\n    this.settings = t.extend(!0, {}, t.validator.defaults, e), this.currentForm = i, this.init();\n  }, t.validator.format = function (e, i) {\n    return 1 === arguments.length ? function () {\n      var i = t.makeArray(arguments);\n      return i.unshift(e), t.validator.format.apply(this, i);\n    } : (arguments.length > 2 && i.constructor !== Array && (i = t.makeArray(arguments).slice(1)), i.constructor !== Array && (i = [i]), t.each(i, function (t, i) {\n      e = e.replace(RegExp(\"\\\\{\" + t + \"\\\\}\", \"g\"), function () {\n        return i;\n      });\n    }), e);\n  }, t.extend(t.validator, {\n    defaults: {\n      messages: {},\n      groups: {},\n      rules: {},\n      errorClass: \"error\",\n      validClass: \"valid\",\n      errorElement: \"label\",\n      focusInvalid: !0,\n      errorContainer: t([]),\n      errorLabelContainer: t([]),\n      onsubmit: !0,\n      ignore: \":hidden\",\n      ignoreTitle: !1,\n      onfocusin: function onfocusin(t) {\n        this.lastActive = t, this.settings.focusCleanup && !this.blockFocusCleanup && (this.settings.unhighlight && this.settings.unhighlight.call(this, t, this.settings.errorClass, this.settings.validClass), this.addWrapper(this.errorsFor(t)).hide());\n      },\n      onfocusout: function onfocusout(t) {\n        this.checkable(t) || !(t.name in this.submitted) && this.optional(t) || this.element(t);\n      },\n      onkeyup: function onkeyup(t, e) {\n        (9 !== e.which || \"\" !== this.elementValue(t)) && (t.name in this.submitted || t === this.lastElement) && this.element(t);\n      },\n      onclick: function onclick(t) {\n        t.name in this.submitted ? this.element(t) : t.parentNode.name in this.submitted && this.element(t.parentNode);\n      },\n      highlight: function highlight(e, i, s) {\n        \"radio\" === e.type ? this.findByName(e.name).addClass(i).removeClass(s) : t(e).addClass(i).removeClass(s);\n      },\n      unhighlight: function unhighlight(e, i, s) {\n        \"radio\" === e.type ? this.findByName(e.name).removeClass(i).addClass(s) : t(e).removeClass(i).addClass(s);\n      }\n    },\n    setDefaults: function setDefaults(e) {\n      t.extend(t.validator.defaults, e);\n    },\n    messages: {\n      required: \"This field is required.\",\n      remote: \"Please fix this field.\",\n      email: \"Please enter a valid email address.\",\n      url: \"Please enter a valid URL.\",\n      date: \"Please enter a valid date.\",\n      dateISO: \"Please enter a valid date (ISO).\",\n      number: \"Please enter a valid number.\",\n      digits: \"Please enter only digits.\",\n      creditcard: \"Please enter a valid credit card number.\",\n      equalTo: \"Please enter the same value again.\",\n      maxlength: t.validator.format(\"Please enter no more than {0} characters.\"),\n      minlength: t.validator.format(\"Please enter at least {0} characters.\"),\n      rangelength: t.validator.format(\"Please enter a value between {0} and {1} characters long.\"),\n      range: t.validator.format(\"Please enter a value between {0} and {1}.\"),\n      max: t.validator.format(\"Please enter a value less than or equal to {0}.\"),\n      min: t.validator.format(\"Please enter a value greater than or equal to {0}.\")\n    },\n    autoCreateRanges: !1,\n    prototype: {\n      init: function init() {\n        function e(e) {\n          var i = t.data(this[0].form, \"validator\"),\n              s = \"on\" + e.type.replace(/^validate/, \"\");\n          i.settings[s] && i.settings[s].call(i, this[0], e);\n        }\n\n        this.labelContainer = t(this.settings.errorLabelContainer), this.errorContext = this.labelContainer.length && this.labelContainer || t(this.currentForm), this.containers = t(this.settings.errorContainer).add(this.settings.errorLabelContainer), this.submitted = {}, this.valueCache = {}, this.pendingRequest = 0, this.pending = {}, this.invalid = {}, this.reset();\n        var i = this.groups = {};\n        t.each(this.settings.groups, function (e, s) {\n          \"string\" == typeof s && (s = s.split(/\\s/)), t.each(s, function (t, s) {\n            i[s] = e;\n          });\n        });\n        var s = this.settings.rules;\n        t.each(s, function (e, i) {\n          s[e] = t.validator.normalizeRule(i);\n        }), t(this.currentForm).validateDelegate(\":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'] ,[type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], [type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'] \", \"focusin focusout keyup\", e).validateDelegate(\"[type='radio'], [type='checkbox'], select, option\", \"click\", e), this.settings.invalidHandler && t(this.currentForm).bind(\"invalid-form.validate\", this.settings.invalidHandler);\n      },\n      form: function form() {\n        return this.checkForm(), t.extend(this.submitted, this.errorMap), this.invalid = t.extend({}, this.errorMap), this.valid() || t(this.currentForm).triggerHandler(\"invalid-form\", [this]), this.showErrors(), this.valid();\n      },\n      checkForm: function checkForm() {\n        this.prepareForm();\n\n        for (var t = 0, e = this.currentElements = this.elements(); e[t]; t++) {\n          this.check(e[t]);\n        }\n\n        return this.valid();\n      },\n      element: function element(e) {\n        e = this.validationTargetFor(this.clean(e)), this.lastElement = e, this.prepareElement(e), this.currentElements = t(e);\n        var i = this.check(e) !== !1;\n        return i ? delete this.invalid[e.name] : this.invalid[e.name] = !0, this.numberOfInvalids() || (this.toHide = this.toHide.add(this.containers)), this.showErrors(), i;\n      },\n      showErrors: function showErrors(e) {\n        if (e) {\n          t.extend(this.errorMap, e), this.errorList = [];\n\n          for (var i in e) {\n            this.errorList.push({\n              message: e[i],\n              element: this.findByName(i)[0]\n            });\n          }\n\n          this.successList = t.grep(this.successList, function (t) {\n            return !(t.name in e);\n          });\n        }\n\n        this.settings.showErrors ? this.settings.showErrors.call(this, this.errorMap, this.errorList) : this.defaultShowErrors();\n      },\n      resetForm: function resetForm() {\n        t.fn.resetForm && t(this.currentForm).resetForm(), this.submitted = {}, this.lastElement = null, this.prepareForm(), this.hideErrors(), this.elements().removeClass(this.settings.errorClass).removeData(\"previousValue\");\n      },\n      numberOfInvalids: function numberOfInvalids() {\n        return this.objectLength(this.invalid);\n      },\n      objectLength: function objectLength(t) {\n        var e = 0;\n\n        for (var i in t) {\n          e++;\n        }\n\n        return e;\n      },\n      hideErrors: function hideErrors() {\n        this.addWrapper(this.toHide).hide();\n      },\n      valid: function valid() {\n        return 0 === this.size();\n      },\n      size: function size() {\n        return this.errorList.length;\n      },\n      focusInvalid: function focusInvalid() {\n        if (this.settings.focusInvalid) try {\n          t(this.findLastActive() || this.errorList.length && this.errorList[0].element || []).filter(\":visible\").focus().trigger(\"focusin\");\n        } catch (e) {}\n      },\n      findLastActive: function findLastActive() {\n        var e = this.lastActive;\n        return e && 1 === t.grep(this.errorList, function (t) {\n          return t.element.name === e.name;\n        }).length && e;\n      },\n      elements: function elements() {\n        var e = this,\n            i = {};\n        return t(this.currentForm).find(\"input, select, textarea\").not(\":submit, :reset, :image, [disabled]\").not(this.settings.ignore).filter(function () {\n          return !this.name && e.settings.debug && window.console && console.error(\"%o has no name assigned\", this), this.name in i || !e.objectLength(t(this).rules()) ? !1 : (i[this.name] = !0, !0);\n        });\n      },\n      clean: function clean(e) {\n        return t(e)[0];\n      },\n      errors: function errors() {\n        var e = this.settings.errorClass.replace(\" \", \".\");\n        return t(this.settings.errorElement + \".\" + e, this.errorContext);\n      },\n      reset: function reset() {\n        this.successList = [], this.errorList = [], this.errorMap = {}, this.toShow = t([]), this.toHide = t([]), this.currentElements = t([]);\n      },\n      prepareForm: function prepareForm() {\n        this.reset(), this.toHide = this.errors().add(this.containers);\n      },\n      prepareElement: function prepareElement(t) {\n        this.reset(), this.toHide = this.errorsFor(t);\n      },\n      elementValue: function elementValue(e) {\n        var i = t(e).attr(\"type\"),\n            s = t(e).val();\n        return \"radio\" === i || \"checkbox\" === i ? t(\"input[name='\" + t(e).attr(\"name\") + \"']:checked\").val() : \"string\" == typeof s ? s.replace(/\\r/g, \"\") : s;\n      },\n      check: function check(e) {\n        e = this.validationTargetFor(this.clean(e));\n        var i,\n            s = t(e).rules(),\n            r = !1,\n            n = this.elementValue(e);\n\n        for (var a in s) {\n          var u = {\n            method: a,\n            parameters: s[a]\n          };\n\n          try {\n            if (i = t.validator.methods[a].call(this, n, e, u.parameters), \"dependency-mismatch\" === i) {\n              r = !0;\n              continue;\n            }\n\n            if (r = !1, \"pending\" === i) return this.toHide = this.toHide.not(this.errorsFor(e)), void 0;\n            if (!i) return this.formatAndAdd(e, u), !1;\n          } catch (o) {\n            throw this.settings.debug && window.console && console.log(\"Exception occurred when checking element \" + e.id + \", check the '\" + u.method + \"' method.\", o), o;\n          }\n        }\n\n        return r ? void 0 : (this.objectLength(s) && this.successList.push(e), !0);\n      },\n      customDataMessage: function customDataMessage(e, i) {\n        return t(e).data(\"msg-\" + i.toLowerCase()) || e.attributes && t(e).attr(\"data-msg-\" + i.toLowerCase());\n      },\n      customMessage: function customMessage(t, e) {\n        var i = this.settings.messages[t];\n        return i && (i.constructor === String ? i : i[e]);\n      },\n      findDefined: function findDefined() {\n        for (var t = 0; arguments.length > t; t++) {\n          if (void 0 !== arguments[t]) return arguments[t];\n        }\n\n        return void 0;\n      },\n      defaultMessage: function defaultMessage(e, i) {\n        return this.findDefined(this.customMessage(e.name, i), this.customDataMessage(e, i), !this.settings.ignoreTitle && e.title || void 0, t.validator.messages[i], \"<strong>Warning: No message defined for \" + e.name + \"</strong>\");\n      },\n      formatAndAdd: function formatAndAdd(e, i) {\n        var s = this.defaultMessage(e, i.method),\n            r = /\\$?\\{(\\d+)\\}/g;\n        \"function\" == typeof s ? s = s.call(this, i.parameters, e) : r.test(s) && (s = t.validator.format(s.replace(r, \"{$1}\"), i.parameters)), this.errorList.push({\n          message: s,\n          element: e\n        }), this.errorMap[e.name] = s, this.submitted[e.name] = s;\n      },\n      addWrapper: function addWrapper(t) {\n        return this.settings.wrapper && (t = t.add(t.parent(this.settings.wrapper))), t;\n      },\n      defaultShowErrors: function defaultShowErrors() {\n        var t, e;\n\n        for (t = 0; this.errorList[t]; t++) {\n          var i = this.errorList[t];\n          this.settings.highlight && this.settings.highlight.call(this, i.element, this.settings.errorClass, this.settings.validClass), this.showLabel(i.element, i.message);\n        }\n\n        if (this.errorList.length && (this.toShow = this.toShow.add(this.containers)), this.settings.success) for (t = 0; this.successList[t]; t++) {\n          this.showLabel(this.successList[t]);\n        }\n        if (this.settings.unhighlight) for (t = 0, e = this.validElements(); e[t]; t++) {\n          this.settings.unhighlight.call(this, e[t], this.settings.errorClass, this.settings.validClass);\n        }\n        this.toHide = this.toHide.not(this.toShow), this.hideErrors(), this.addWrapper(this.toShow).show();\n      },\n      validElements: function validElements() {\n        return this.currentElements.not(this.invalidElements());\n      },\n      invalidElements: function invalidElements() {\n        return t(this.errorList).map(function () {\n          return this.element;\n        });\n      },\n      showLabel: function showLabel(e, i) {\n        var s = this.errorsFor(e);\n        s.length ? (s.removeClass(this.settings.validClass).addClass(this.settings.errorClass), s.html(i)) : (s = t(\"<\" + this.settings.errorElement + \">\").attr(\"for\", this.idOrName(e)).addClass(this.settings.errorClass).html(i || \"\"), this.settings.wrapper && (s = s.hide().show().wrap(\"<\" + this.settings.wrapper + \"/>\").parent()), this.labelContainer.append(s).length || (this.settings.errorPlacement ? this.settings.errorPlacement(s, t(e)) : s.insertAfter(e))), !i && this.settings.success && (s.text(\"\"), \"string\" == typeof this.settings.success ? s.addClass(this.settings.success) : this.settings.success(s, e)), this.toShow = this.toShow.add(s);\n      },\n      errorsFor: function errorsFor(e) {\n        var i = this.idOrName(e);\n        return this.errors().filter(function () {\n          return t(this).attr(\"for\") === i;\n        });\n      },\n      idOrName: function idOrName(t) {\n        return this.groups[t.name] || (this.checkable(t) ? t.name : t.id || t.name);\n      },\n      validationTargetFor: function validationTargetFor(t) {\n        return this.checkable(t) && (t = this.findByName(t.name).not(this.settings.ignore)[0]), t;\n      },\n      checkable: function checkable(t) {\n        return /radio|checkbox/i.test(t.type);\n      },\n      findByName: function findByName(e) {\n        return t(this.currentForm).find(\"[name='\" + e + \"']\");\n      },\n      getLength: function getLength(e, i) {\n        switch (i.nodeName.toLowerCase()) {\n          case \"select\":\n            return t(\"option:selected\", i).length;\n\n          case \"input\":\n            if (this.checkable(i)) return this.findByName(i.name).filter(\":checked\").length;\n        }\n\n        return e.length;\n      },\n      depend: function depend(t, e) {\n        return this.dependTypes[_typeof(t)] ? this.dependTypes[_typeof(t)](t, e) : !0;\n      },\n      dependTypes: {\n        \"boolean\": function boolean(t) {\n          return t;\n        },\n        string: function string(e, i) {\n          return !!t(e, i.form).length;\n        },\n        \"function\": function _function(t, e) {\n          return t(e);\n        }\n      },\n      optional: function optional(e) {\n        var i = this.elementValue(e);\n        return !t.validator.methods.required.call(this, i, e) && \"dependency-mismatch\";\n      },\n      startRequest: function startRequest(t) {\n        this.pending[t.name] || (this.pendingRequest++, this.pending[t.name] = !0);\n      },\n      stopRequest: function stopRequest(e, i) {\n        this.pendingRequest--, 0 > this.pendingRequest && (this.pendingRequest = 0), delete this.pending[e.name], i && 0 === this.pendingRequest && this.formSubmitted && this.form() ? (t(this.currentForm).submit(), this.formSubmitted = !1) : !i && 0 === this.pendingRequest && this.formSubmitted && (t(this.currentForm).triggerHandler(\"invalid-form\", [this]), this.formSubmitted = !1);\n      },\n      previousValue: function previousValue(e) {\n        return t.data(e, \"previousValue\") || t.data(e, \"previousValue\", {\n          old: null,\n          valid: !0,\n          message: this.defaultMessage(e, \"remote\")\n        });\n      }\n    },\n    classRuleSettings: {\n      required: {\n        required: !0\n      },\n      email: {\n        email: !0\n      },\n      url: {\n        url: !0\n      },\n      date: {\n        date: !0\n      },\n      dateISO: {\n        dateISO: !0\n      },\n      number: {\n        number: !0\n      },\n      digits: {\n        digits: !0\n      },\n      creditcard: {\n        creditcard: !0\n      }\n    },\n    addClassRules: function addClassRules(e, i) {\n      e.constructor === String ? this.classRuleSettings[e] = i : t.extend(this.classRuleSettings, e);\n    },\n    classRules: function classRules(e) {\n      var i = {},\n          s = t(e).attr(\"class\");\n      return s && t.each(s.split(\" \"), function () {\n        this in t.validator.classRuleSettings && t.extend(i, t.validator.classRuleSettings[this]);\n      }), i;\n    },\n    attributeRules: function attributeRules(e) {\n      var i = {},\n          s = t(e),\n          r = s[0].getAttribute(\"type\");\n\n      for (var n in t.validator.methods) {\n        var a;\n        \"required\" === n ? (a = s.get(0).getAttribute(n), \"\" === a && (a = !0), a = !!a) : a = s.attr(n), /min|max/.test(n) && (null === r || /number|range|text/.test(r)) && (a = Number(a)), a ? i[n] = a : r === n && \"range\" !== r && (i[n] = !0);\n      }\n\n      return i.maxlength && /-1|2147483647|524288/.test(i.maxlength) && delete i.maxlength, i;\n    },\n    dataRules: function dataRules(e) {\n      var i,\n          s,\n          r = {},\n          n = t(e);\n\n      for (i in t.validator.methods) {\n        s = n.data(\"rule-\" + i.toLowerCase()), void 0 !== s && (r[i] = s);\n      }\n\n      return r;\n    },\n    staticRules: function staticRules(e) {\n      var i = {},\n          s = t.data(e.form, \"validator\");\n      return s.settings.rules && (i = t.validator.normalizeRule(s.settings.rules[e.name]) || {}), i;\n    },\n    normalizeRules: function normalizeRules(e, i) {\n      return t.each(e, function (s, r) {\n        if (r === !1) return delete e[s], void 0;\n\n        if (r.param || r.depends) {\n          var n = !0;\n\n          switch (_typeof(r.depends)) {\n            case \"string\":\n              n = !!t(r.depends, i.form).length;\n              break;\n\n            case \"function\":\n              n = r.depends.call(i, i);\n          }\n\n          n ? e[s] = void 0 !== r.param ? r.param : !0 : delete e[s];\n        }\n      }), t.each(e, function (s, r) {\n        e[s] = t.isFunction(r) ? r(i) : r;\n      }), t.each([\"minlength\", \"maxlength\"], function () {\n        e[this] && (e[this] = Number(e[this]));\n      }), t.each([\"rangelength\", \"range\"], function () {\n        var i;\n        e[this] && (t.isArray(e[this]) ? e[this] = [Number(e[this][0]), Number(e[this][1])] : \"string\" == typeof e[this] && (i = e[this].split(/[\\s,]+/), e[this] = [Number(i[0]), Number(i[1])]));\n      }), t.validator.autoCreateRanges && (e.min && e.max && (e.range = [e.min, e.max], delete e.min, delete e.max), e.minlength && e.maxlength && (e.rangelength = [e.minlength, e.maxlength], delete e.minlength, delete e.maxlength)), e;\n    },\n    normalizeRule: function normalizeRule(e) {\n      if (\"string\" == typeof e) {\n        var i = {};\n        t.each(e.split(/\\s/), function () {\n          i[this] = !0;\n        }), e = i;\n      }\n\n      return e;\n    },\n    addMethod: function addMethod(e, i, s) {\n      t.validator.methods[e] = i, t.validator.messages[e] = void 0 !== s ? s : t.validator.messages[e], 3 > i.length && t.validator.addClassRules(e, t.validator.normalizeRule(e));\n    },\n    methods: {\n      required: function required(e, i, s) {\n        if (!this.depend(s, i)) return \"dependency-mismatch\";\n\n        if (\"select\" === i.nodeName.toLowerCase()) {\n          var r = t(i).val();\n          return r && r.length > 0;\n        }\n\n        return this.checkable(i) ? this.getLength(e, i) > 0 : t.trim(e).length > 0;\n      },\n      email: function email(t, e) {\n        return this.optional(e) || /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i.test(t);\n      },\n      url: function url(t, e) {\n        return this.optional(e) || /^(https?|s?ftp):\\/\\/(((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(#((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/i.test(t);\n      },\n      date: function date(t, e) {\n        return this.optional(e) || !/Invalid|NaN/.test(\"\" + new Date(t));\n      },\n      dateISO: function dateISO(t, e) {\n        return this.optional(e) || /^\\d{4}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}$/.test(t);\n      },\n      number: function number(t, e) {\n        return this.optional(e) || /^-?(?:\\d+|\\d{1,3}(?:,\\d{3})+)?(?:\\.\\d+)?$/.test(t);\n      },\n      digits: function digits(t, e) {\n        return this.optional(e) || /^\\d+$/.test(t);\n      },\n      creditcard: function creditcard(t, e) {\n        if (this.optional(e)) return \"dependency-mismatch\";\n        if (/[^0-9 \\-]+/.test(t)) return !1;\n        var i = 0,\n            s = 0,\n            r = !1;\n        t = t.replace(/\\D/g, \"\");\n\n        for (var n = t.length - 1; n >= 0; n--) {\n          var a = t.charAt(n);\n          s = parseInt(a, 10), r && (s *= 2) > 9 && (s -= 9), i += s, r = !r;\n        }\n\n        return 0 === i % 10;\n      },\n      minlength: function minlength(e, i, s) {\n        var r = t.isArray(e) ? e.length : this.getLength(t.trim(e), i);\n        return this.optional(i) || r >= s;\n      },\n      maxlength: function maxlength(e, i, s) {\n        var r = t.isArray(e) ? e.length : this.getLength(t.trim(e), i);\n        return this.optional(i) || s >= r;\n      },\n      rangelength: function rangelength(e, i, s) {\n        var r = t.isArray(e) ? e.length : this.getLength(t.trim(e), i);\n        return this.optional(i) || r >= s[0] && s[1] >= r;\n      },\n      min: function min(t, e, i) {\n        return this.optional(e) || t >= i;\n      },\n      max: function max(t, e, i) {\n        return this.optional(e) || i >= t;\n      },\n      range: function range(t, e, i) {\n        return this.optional(e) || t >= i[0] && i[1] >= t;\n      },\n      equalTo: function equalTo(e, i, s) {\n        var r = t(s);\n        return this.settings.onfocusout && r.unbind(\".validate-equalTo\").bind(\"blur.validate-equalTo\", function () {\n          t(i).valid();\n        }), e === r.val();\n      },\n      remote: function remote(e, i, s) {\n        if (this.optional(i)) return \"dependency-mismatch\";\n        var r = this.previousValue(i);\n        if (this.settings.messages[i.name] || (this.settings.messages[i.name] = {}), r.originalMessage = this.settings.messages[i.name].remote, this.settings.messages[i.name].remote = r.message, s = \"string\" == typeof s && {\n          url: s\n        } || s, r.old === e) return r.valid;\n        r.old = e;\n        var n = this;\n        this.startRequest(i);\n        var a = {};\n        return a[i.name] = e, t.ajax(t.extend(!0, {\n          url: s,\n          mode: \"abort\",\n          port: \"validate\" + i.name,\n          dataType: \"json\",\n          data: a,\n          success: function success(s) {\n            n.settings.messages[i.name].remote = r.originalMessage;\n            var a = s === !0 || \"true\" === s;\n\n            if (a) {\n              var u = n.formSubmitted;\n              n.prepareElement(i), n.formSubmitted = u, n.successList.push(i), delete n.invalid[i.name], n.showErrors();\n            } else {\n              var o = {},\n                  l = s || n.defaultMessage(i, \"remote\");\n              o[i.name] = r.message = t.isFunction(l) ? l(e) : l, n.invalid[i.name] = !0, n.showErrors(o);\n            }\n\n            r.valid = a, n.stopRequest(i, a);\n          }\n        }, s)), \"pending\";\n      }\n    }\n  }), t.format = t.validator.format;\n})(jQuery), function (t) {\n  var e = {};\n  if (t.ajaxPrefilter) t.ajaxPrefilter(function (t, i, s) {\n    var r = t.port;\n    \"abort\" === t.mode && (e[r] && e[r].abort(), e[r] = s);\n  });else {\n    var i = t.ajax;\n\n    t.ajax = function (s) {\n      var r = (\"mode\" in s ? s : t.ajaxSettings).mode,\n          n = (\"port\" in s ? s : t.ajaxSettings).port;\n      return \"abort\" === r ? (e[n] && e[n].abort(), e[n] = i.apply(this, arguments), e[n]) : i.apply(this, arguments);\n    };\n  }\n}(jQuery), function (t) {\n  t.extend(t.fn, {\n    validateDelegate: function validateDelegate(e, i, s) {\n      return this.bind(i, function (i) {\n        var r = t(i.target);\n        return r.is(e) ? s.apply(r, arguments) : void 0;\n      });\n    }\n  });\n}(jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/jquery.validate.min.js\n");

/***/ }),

/***/ "./node_modules/datepair.js/dist/datepair.js":
/*!***************************************************!*\
  !*** ./node_modules/datepair.js/dist/datepair.js ***!
  \***************************************************/
/***/ (() => {

eval("/*!\n * datepair.js v0.4.17 - A javascript plugin for intelligently selecting date and time ranges inspired by Google Calendar.\n * Copyright (c) 2021 Jon Thornton - http://jonthornton.github.com/Datepair.js\n * License: MIT\n */\n\n(function(window, document) {\n\n\t'use strict';\n\n\tvar _ONE_DAY = 86400000;\n\tvar jq = window.Zepto || window.jQuery;\n\t\n\tfunction simpleExtend(obj1, obj2) {\n\t\tvar out = obj2 || {};\n\t\n\t\tfor (var i in obj1) {\n\t\t\tif (!(i in out)) {\n\t\t\t\tout[i] = obj1[i];\n\t\t\t}\n\t\t}\n\t\n\t\treturn out;\n\t}\n\t\n\t// IE's custom event support is totally borked.\n\t// Use jQuery if possible\n\tfunction triggerSimpleCustomEvent(el, eventName) {\n\t\tif (jq) {\n\t\t\tjq(el).trigger(eventName);\n\t\t} else {\n\t\t\tvar event = document.createEvent('CustomEvent');\n\t\t\tevent.initCustomEvent(eventName, true, true, {});\n\t\t\tel.dispatchEvent(event);\n\t\t}\n\t}\n\t\n\t// el.classList not supported by < IE10\n\t// use jQuery if available\n\tfunction hasClass(el, className) {\n\t\tif (jq) {\n\t\t\treturn jq(el).hasClass(className);\n\t\t} else {\n\t\t\treturn el.classList.contains(className);\n\t\t}\n\t}\n\t\n\tfunction Datepair(container, options) {\n\t\tthis.dateDelta = null;\n\t\tthis.timeDelta = null;\n\t\tthis._defaults =\t{\n\t\t\tstartClass: 'start',\n\t\t\tendClass: 'end',\n\t\t\ttimeClass: 'time',\n\t\t\tdateClass: 'date',\n\t\t\tdefaultDateDelta: 0,\n\t\t\tdefaultTimeDelta: 3600000,\n\t\t\tanchor: 'start',\n\t\n\t\t\t// defaults for jquery-timepicker; override when using other input widgets\n\t\t\tparseTime: function(input){\n\t\t\t\treturn jq(input).timepicker('getTime');\n\t\t\t},\n\t\t\tupdateTime: function(input, dateObj){\n\t\t\t\tjq(input).timepicker('setTime', dateObj);\n\t\t\t},\n\t\t\tsetMinTime: function(input, dateObj){\n\t\t\t\tjq(input).timepicker('option', 'minTime', dateObj);\n\t\t\t},\n\t\n\t\t\t// defaults for bootstrap datepicker; override when using other input widgets\n\t\t\tparseDate: function(input){\n\t\t\t\treturn input.value && jq(input).datepicker('getDate');\n\t\t\t},\n\t\t\tupdateDate: function(input, dateObj){\n\t\t\t\tjq(input).datepicker('update', dateObj);\n\t\t\t}\n\t\t};\n\t\n\t\tthis.container = container;\n\t\tthis.settings = simpleExtend(this._defaults, options);\n\t\n\t\tthis.startDateInput = this.container.querySelector('.'+this.settings.startClass+'.'+this.settings.dateClass);\n\t\tthis.endDateInput = this.container.querySelector('.'+this.settings.endClass+'.'+this.settings.dateClass);\n\t\tthis.startTimeInput = this.container.querySelector('.'+this.settings.startClass+'.'+this.settings.timeClass);\n\t\tthis.endTimeInput = this.container.querySelector('.'+this.settings.endClass+'.'+this.settings.timeClass);\n\t\n\t\t// initialize date and time deltas\n\t\tthis.refresh();\n\t\n\t\t// init starts here\n\t\tthis._bindChangeHandler();\n\t}\n\t\n\tDatepair.prototype = {\n\t\tconstructor: Datepair,\n\t\n\t\toption: function(key, value)\n\t\t{\n\t\t\tif (typeof key == 'object') {\n\t\t\t\tthis.settings = simpleExtend(this.settings, key);\n\t\n\t\t\t} else if (typeof key == 'string' && typeof value != 'undefined') {\n\t\t\t\tthis.settings[key] = value;\n\t\n\t\t\t} else if (typeof key == 'string') {\n\t\t\t\treturn this.settings[key];\n\t\t\t}\n\t\n\t\t\tthis._updateEndMintime();\n\t\t},\n\t\n\t\tgetTimeDiff: function()\n\t\t{\n\t\t\t// due to the fact that times can wrap around, timeDiff for any\n\t\t\t// time-only pair will always be >= 0\n\t\t\tvar delta = this.dateDelta + this.timeDelta;\n\t\t\tif (delta < 0 && (!this.startDateInput || !this.endDateInput) ) {\n\t\t\t\tdelta += _ONE_DAY;\n\t\t\t}\n\t\n\t\t\treturn delta;\n\t\t},\n\t\n\t\trefresh: function()\n\t\t{\n\t\t\tif (this.startDateInput && this.startDateInput.value && this.endDateInput && this.endDateInput.value) {\n\t\t\t\tvar startDate = this.settings.parseDate(this.startDateInput);\n\t\t\t\tvar endDate = this.settings.parseDate(this.endDateInput);\n\t\t\t\tif (startDate && endDate) {\n\t\t\t\t\tthis.dateDelta = endDate.getTime() - startDate.getTime();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this.startTimeInput && this.startTimeInput.value && this.endTimeInput && this.endTimeInput.value) {\n\t\t\t\tvar startTime = this.settings.parseTime(this.startTimeInput);\n\t\t\t\tvar endTime = this.settings.parseTime(this.endTimeInput);\n\t\t\t\tif (startTime && endTime) {\n\t\t\t\t\tthis.timeDelta = endTime.getTime() - startTime.getTime();\n\t\t\t\t\tthis._updateEndMintime();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\n\t\tremove: function()\n\t\t{\n\t\t\tthis._unbindChangeHandler();\n\t\t},\n\t\n\t\t_bindChangeHandler: function(){\n\t\t\t// addEventListener doesn't work with synthetic \"change\" events\n\t\t\t// fired by jQuery's trigger() functioin. If jQuery is present,\n\t\t\t// use that for event binding\n\t\t\tif (jq) {\n\t\t\t\tjq(this.container).on('change.datepair', jq.proxy(this.handleEvent, this));\n\t\t\t} else {\n\t\t\t\tthis.container.addEventListener('change', this, false);\n\t\t\t}\n\t\t},\n\t\n\t\t_unbindChangeHandler: function(){\n\t\t\tif (jq) {\n\t\t\t\tjq(this.container).off('change.datepair');\n\t\t\t} else {\n\t\t\t\tthis.container.removeEventListener('change', this, false);\n\t\t\t}\n\t\t},\n\t\n\t\t// This function will be called when passing 'this' to addEventListener\n\t\thandleEvent: function(e){\n\t\t\t// temporarily unbind the change handler to prevent triggering this\n\t\t\t// if we update other inputs\n\t\t\tthis._unbindChangeHandler();\n\t\n\t\t\tif (hasClass(e.target, this.settings.dateClass)) {\n\t\t\t\tif (e.target.value != '') {\n\t\t\t\t\tthis._dateChanged(e.target);\n\t\t\t\t\tthis._timeChanged(e.target);\n\t\t\t\t} else {\n\t\t\t\t\tthis.dateDelta = null;\n\t\t\t\t}\n\t\n\t\t\t} else if (hasClass(e.target, this.settings.timeClass)) {\n\t\t\t\tif (e.target.value != '') {\n\t\t\t\t\tthis._timeChanged(e.target);\n\t\t\t\t} else {\n\t\t\t\t\tthis.timeDelta = null;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tthis._validateRanges();\n\t\t\tthis._updateEndMintime();\n\t\t\tthis._bindChangeHandler();\n\t\t},\n\t\n\t\t_dateChanged: function(target){\n\t\t\tif (!this.startDateInput || !this.endDateInput) {\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\tvar startDate = this.settings.parseDate(this.startDateInput);\n\t\t\tvar endDate = this.settings.parseDate(this.endDateInput);\n\t\n\t\t\tif (!startDate || !endDate) {\n\t\t\t\tif (this.settings.defaultDateDelta !== null) {\n\t\t\t\t\tif (startDate) {\n\t\t\t\t\t\tvar newEnd = new Date(startDate.getTime() + this.settings.defaultDateDelta * _ONE_DAY);\n\t\t\t\t\t\tthis.settings.updateDate(this.endDateInput, newEnd);\n\t\n\t\t\t\t\t} else if (endDate) {\n\t\t\t\t\t\tvar newStart = new Date(endDate.getTime() - this.settings.defaultDateDelta * _ONE_DAY);\n\t\t\t\t\t\tthis.settings.updateDate(this.startDateInput, newStart);\n\t\t\t\t\t}\n\t\n\t\t\t\t\tthis.dateDelta = this.settings.defaultDateDelta * _ONE_DAY;\n\t\t\t\t} else {\n\t\t\t\t\tthis.dateDelta = null;\n\t\t\t\t}\n\t\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\tif (Math.abs(endDate.getFullYear() - startDate.getFullYear()) > 1000) {\n\t\t\t\tconsole.log('here')\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\tif (this.settings.anchor == 'start' && hasClass(target, this.settings.startClass)) {\n\t\t\t\tvar newDate = new Date(startDate.getTime() + this.dateDelta);\n\t\t\t\tthis.settings.updateDate(this.endDateInput, newDate);\n\t\t\t} else if (this.settings.anchor == 'end' && hasClass(target, this.settings.endClass)) {\n\t\t\t\tvar newDate = new Date(endDate.getTime() - this.dateDelta);\n\t\t\t\tthis.settings.updateDate(this.startDateInput, newDate);\n\t\t\t} else {\n\t\t\t\tif (endDate < startDate) {\n\t\t\t\t\tvar otherInput = hasClass(target, this.settings.startClass) ? this.endDateInput : this.startDateInput;\n\t\t\t\t\tvar selectedDate = this.settings.parseDate(target);\n\t\t\t\t\tthis.dateDelta = 0;\n\t\t\t\t\tthis.settings.updateDate(otherInput, selectedDate);\n\t\t\t\t} else {\n\t\t\t\t\tthis.dateDelta = endDate.getTime() - startDate.getTime();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\n\t\t_timeChanged: function(target){\n\t\t\tif (!this.startTimeInput || !this.endTimeInput) {\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\tvar startTime = this.settings.parseTime(this.startTimeInput);\n\t\t\tvar endTime = this.settings.parseTime(this.endTimeInput);\n\t\n\t\t\tif (!startTime || !endTime) {\n\t\t\t\tif (this.settings.defaultTimeDelta !== null) {\n\t\t\t\t\tthis.timeDelta = this.settings.defaultTimeDelta;\n\t\n\t\t\t\t\tif (startTime) {\n\t\t\t\t\t\tendTime = this._setTimeAndReturn(this.endTimeInput, new Date(startTime.getTime() + this.settings.defaultTimeDelta));\n\t\t\t\t\t\tthis._doMidnightRollover(startTime, endTime);\n\t\t\t\t\t} else if (endTime) {\n\t\t\t\t\t\tstartTime = this._setTimeAndReturn(this.startTimeInput, new Date(endTime.getTime() - this.settings.defaultTimeDelta));\n\t\t\t\t\t\tthis._doMidnightRollover(startTime, endTime);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.timeDelta = null;\n\t\t\t\t}\n\t\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\tif (this.settings.anchor == 'start' && hasClass(target, this.settings.startClass)) {\n\t\t\t\tendTime = this._setTimeAndReturn(this.endTimeInput, new Date(startTime.getTime() + this.timeDelta));\n\t\t\t\tthis._doMidnightRollover(startTime, endTime);\n\t\t\t} else if (this.settings.anchor == 'end' && hasClass(target, this.settings.endClass)) {\n\t\t\t\tstartTime = this._setTimeAndReturn(this.startTimeInput, new Date(endTime.getTime() - this.timeDelta));\n\t\t\t\tthis._doMidnightRollover(startTime, endTime);\n\t\t\t} else {\n\t\t\t\tthis._doMidnightRollover(startTime, endTime);\n\t\n\t\t\t\tvar startDate, endDate;\n\t\t\t\tif (this.startDateInput && this.endDateInput) {\n\t\t\t\t\tstartDate = this.settings.parseDate(this.startDateInput);\n\t\t\t\t\tendDate = this.settings.parseDate(this.endDateInput);\n\t\t\t\t}\n\t\n\t\t\t\tif ((+startDate == +endDate) && (endTime < startTime)) {\n\t\t\t\t\tvar thisInput  = hasClass(target, this.settings.endClass) ? this.endTimeInput : this.startTimeInput;\n\t\t\t\t\tvar otherInput = hasClass(target, this.settings.startClass) ? this.endTimeInput : this.startTimeInput;\n\t\t\t\t\tvar selectedTime = this.settings.parseTime(thisInput);\n\t\t\t\t\tthis.timeDelta = 0;\n\t\t\t\t\tthis.settings.updateTime(otherInput, selectedTime);\n\t\t\t\t} else {\n\t\t\t\t\tthis.timeDelta = endTime.getTime() - startTime.getTime();\n\t\t\t\t}\n\t\t\t}\n\t\n\t\n\t\t},\n\t\n\t\t_setTimeAndReturn: function(input, newTime) {\n\t\t\tthis.settings.updateTime(input, newTime);\n\t\t\treturn this.settings.parseTime(input);\n\t\t},\n\t\n\t\t_doMidnightRollover: function(startTime, endTime) {\n\t\t\tif (!this.startDateInput || !this.endDateInput) {\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\tvar endDate = this.settings.parseDate(this.endDateInput);\n\t\t\tvar startDate = this.settings.parseDate(this.startDateInput);\n\t\t\tvar newDelta = endTime.getTime() - startTime.getTime();\n\t\t\tvar offset = (endTime < startTime) ? _ONE_DAY : -1 * _ONE_DAY;\n\t\n\t\t\tif (this.dateDelta !== null\n\t\t\t\t\t&& this.dateDelta + this.timeDelta <= _ONE_DAY\n\t\t\t\t\t&& this.dateDelta + newDelta != 0\n\t\t\t\t\t&& (offset > 0 || this.dateDelta != 0)\n\t\t\t\t\t&& ((newDelta >= 0 && this.timeDelta < 0) || (newDelta < 0 && this.timeDelta >= 0))) {\n\t\n\t\t\t\tif (this.settings.anchor == 'start') {\n\t\t\t\t\tthis.settings.updateDate(this.endDateInput, new Date(endDate.getTime() + offset));\n\t\t\t\t\tthis._dateChanged(this.endDateInput);\n\t\t\t\t} else if (this.settings.anchor == 'end') {\n\t\t\t\t\tthis.settings.updateDate(this.startDateInput, new Date(startDate.getTime() - offset));\n\t\t\t\t\tthis._dateChanged(this.startDateInput);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.timeDelta = newDelta;\n\t\t},\n\t\n\t\t_updateEndMintime: function(){\n\t\t\tif (typeof this.settings.setMinTime != 'function') return;\n\t\n\t\t\tvar baseTime = null;\n\t\t\tif (this.settings.anchor == 'start' && (!this.dateDelta || this.dateDelta < _ONE_DAY || (this.timeDelta && this.dateDelta + this.timeDelta < _ONE_DAY))) {\n\t\t\t\tbaseTime = this.settings.parseTime(this.startTimeInput);\n\t\t\t}\n\t\n\t\t\tthis.settings.setMinTime(this.endTimeInput, baseTime);\n\t\t},\n\t\n\t\t_validateRanges: function(){\n\t\t\tif (this.startTimeInput && this.endTimeInput && this.timeDelta === null) {\n\t\t\t\ttriggerSimpleCustomEvent(this.container, 'rangeIncomplete');\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\tif (this.startDateInput && this.endDateInput && this.dateDelta === null) {\n\t\t\t\ttriggerSimpleCustomEvent(this.container, 'rangeIncomplete');\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\t// due to the fact that times can wrap around, any time-only pair will be considered valid\n\t\t\tif (!this.startDateInput || !this.endDateInput || this.dateDelta + this.timeDelta >= 0) {\n\t\t\t\ttriggerSimpleCustomEvent(this.container, 'rangeSelected');\n\t\t\t} else {\n\t\t\t\ttriggerSimpleCustomEvent(this.container, 'rangeError');\n\t\t\t}\n\t\t}\n\t};\n\n\twindow.Datepair = Datepair;\n\n}(window, document));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/datepair.js/dist/datepair.js\n");

/***/ }),

/***/ "./node_modules/datepair.js/dist/jquery.datepair.js":
/*!**********************************************************!*\
  !*** ./node_modules/datepair.js/dist/jquery.datepair.js ***!
  \**********************************************************/
/***/ (() => {

eval("/*!\n * datepair.js v0.4.17 - A javascript plugin for intelligently selecting date and time ranges inspired by Google Calendar.\n * Copyright (c) 2021 Jon Thornton - http://jonthornton.github.com/Datepair.js\n * License: MIT\n */\n\n(function($) {\n\n\tif(!$) {\n\t\treturn;\n\t}\n\n\t////////////\n\t// Plugin //\n\t////////////\n\n\t$.fn.datepair = function(option) {\n\t\tvar out;\n\t\tthis.each(function() {\n\t\t\tvar $this = $(this);\n\t\t\tvar data = $this.data('datepair');\n\t\t\tvar options = typeof option === 'object' && option;\n\n\t\t\tif (!data) {\n\t\t\t\tdata = new Datepair(this, options);\n\t\t\t\t$this.data('datepair', data);\n\t\t\t}\n\n\t\t\tif (option === 'remove') {\n\t\t\t\tout = data['remove']();\n\t\t\t\t$this.removeData('datepair', data);\n\t\t\t}\n\n\t\t\tif (typeof option === 'string') {\n\t\t\t\tout = data[option]();\n\t\t\t}\n\t\t});\n\n\t\treturn out || this;\n\t};\n\n\t//////////////\n\t// Data API //\n\t//////////////\n\n\t$('[data-datepair]').each(function() {\n\t\tvar $this = $(this);\n\t\t$this.datepair($this.data());\n\t});\n\n}(window.Zepto || window.jQuery));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZGF0ZXBhaXIuanMvZGlzdC9qcXVlcnkuZGF0ZXBhaXIuanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUYsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlcGFpci5qcy9kaXN0L2pxdWVyeS5kYXRlcGFpci5qcz9hNjM1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogZGF0ZXBhaXIuanMgdjAuNC4xNyAtIEEgamF2YXNjcmlwdCBwbHVnaW4gZm9yIGludGVsbGlnZW50bHkgc2VsZWN0aW5nIGRhdGUgYW5kIHRpbWUgcmFuZ2VzIGluc3BpcmVkIGJ5IEdvb2dsZSBDYWxlbmRhci5cbiAqIENvcHlyaWdodCAoYykgMjAyMSBKb24gVGhvcm50b24gLSBodHRwOi8vam9udGhvcm50b24uZ2l0aHViLmNvbS9EYXRlcGFpci5qc1xuICogTGljZW5zZTogTUlUXG4gKi9cblxuKGZ1bmN0aW9uKCQpIHtcblxuXHRpZighJCkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vLy8vLy8vLy8vL1xuXHQvLyBQbHVnaW4gLy9cblx0Ly8vLy8vLy8vLy8vXG5cblx0JC5mbi5kYXRlcGFpciA9IGZ1bmN0aW9uKG9wdGlvbikge1xuXHRcdHZhciBvdXQ7XG5cdFx0dGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyICR0aGlzID0gJCh0aGlzKTtcblx0XHRcdHZhciBkYXRhID0gJHRoaXMuZGF0YSgnZGF0ZXBhaXInKTtcblx0XHRcdHZhciBvcHRpb25zID0gdHlwZW9mIG9wdGlvbiA9PT0gJ29iamVjdCcgJiYgb3B0aW9uO1xuXG5cdFx0XHRpZiAoIWRhdGEpIHtcblx0XHRcdFx0ZGF0YSA9IG5ldyBEYXRlcGFpcih0aGlzLCBvcHRpb25zKTtcblx0XHRcdFx0JHRoaXMuZGF0YSgnZGF0ZXBhaXInLCBkYXRhKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKG9wdGlvbiA9PT0gJ3JlbW92ZScpIHtcblx0XHRcdFx0b3V0ID0gZGF0YVsncmVtb3ZlJ10oKTtcblx0XHRcdFx0JHRoaXMucmVtb3ZlRGF0YSgnZGF0ZXBhaXInLCBkYXRhKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHR5cGVvZiBvcHRpb24gPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdG91dCA9IGRhdGFbb3B0aW9uXSgpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIG91dCB8fCB0aGlzO1xuXHR9O1xuXG5cdC8vLy8vLy8vLy8vLy8vXG5cdC8vIERhdGEgQVBJIC8vXG5cdC8vLy8vLy8vLy8vLy8vXG5cblx0JCgnW2RhdGEtZGF0ZXBhaXJdJykuZWFjaChmdW5jdGlvbigpIHtcblx0XHR2YXIgJHRoaXMgPSAkKHRoaXMpO1xuXHRcdCR0aGlzLmRhdGVwYWlyKCR0aGlzLmRhdGEoKSk7XG5cdH0pO1xuXG59KHdpbmRvdy5aZXB0byB8fCB3aW5kb3cualF1ZXJ5KSk7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/datepair.js/dist/jquery.datepair.js\n");

/***/ }),

/***/ "./node_modules/jquery-timepicker/jquery.timepicker.js":
/*!*************************************************************!*\
  !*** ./node_modules/jquery-timepicker/jquery.timepicker.js ***!
  \*************************************************************/
/***/ (() => {

eval("/**\n * jQuery Timepicker\n * http://timepicker.co\n *\n * Enhances standard form input fields helping users to select (or type) times.\n *\n * Copyright (c) 2016 Willington Vega; Licensed MIT, GPL\n */\n\nif (typeof jQuery !== 'undefined') {\n    (function($, undefined) {\n\n        function pad(str, ch, length) {\n            return (new Array(length + 1 - str.length).join(ch)) + str;\n        }\n\n        function normalize() {\n            if (arguments.length === 1) {\n                var date = arguments[0];\n                if (typeof date === 'string') {\n                    date = $.fn.timepicker.parseTime(date);\n                }\n                return new Date(0, 0, 0, date.getHours(), date.getMinutes(), date.getSeconds());\n            } else if (arguments.length === 3) {\n                return new Date(0, 0, 0, arguments[0], arguments[1], arguments[2]);\n            } else if (arguments.length === 2) {\n                return new Date(0, 0, 0, arguments[0], arguments[1], 0);\n            } else {\n                return new Date(0, 0, 0);\n            }\n        }\n\n        $.TimePicker = function() {\n            var widget = this;\n\n            widget.container = $('.ui-timepicker-container');\n            widget.ui = widget.container.find('.ui-timepicker');\n\n            if (widget.container.length === 0) {\n                widget.container = $('<div></div>').addClass('ui-timepicker-container')\n                                    .addClass('ui-timepicker-hidden ui-helper-hidden')\n                                    .appendTo('body')\n                                    .hide();\n                widget.ui = $( '<div></div>' ).addClass('ui-timepicker')\n                                    .addClass('ui-widget ui-widget-content ui-menu')\n                                    .addClass('ui-corner-all')\n                                    .appendTo(widget.container);\n                widget.viewport = $('<ul></ul>').addClass( 'ui-timepicker-viewport' )\n                                    .appendTo( widget.ui );\n\n                if ($.fn.jquery >= '1.4.2') {\n                    widget.ui.delegate('a', 'mouseenter.timepicker', function() {\n                        // passing false instead of an instance object tells the function\n                        // to use the current instance\n                        widget.activate(false, $(this).parent());\n                    }).delegate('a', 'mouseleave.timepicker', function() {\n                        widget.deactivate(false);\n                    }).delegate('a', 'click.timepicker', function(event) {\n                        event.preventDefault();\n                        widget.select(false, $(this).parent());\n                    });\n                }\n            }\n        };\n\n        $.TimePicker.count = 0;\n        $.TimePicker.instance = function() {\n            if (!$.TimePicker._instance) {\n                $.TimePicker._instance = new $.TimePicker();\n            }\n            return $.TimePicker._instance;\n        };\n\n        $.TimePicker.prototype = {\n            // extracted from from jQuery UI Core\n            // http://github,com/jquery/jquery-ui/blob/master/ui/jquery.ui.core.js\n            keyCode: {\n                ALT: 18,\n                BLOQ_MAYUS: 20,\n                CTRL: 17,\n                DOWN: 40,\n                END: 35,\n                ENTER: 13,\n                HOME: 36,\n                LEFT: 37,\n                NUMPAD_ENTER: 108,\n                PAGE_DOWN: 34,\n                PAGE_UP: 33,\n                RIGHT: 39,\n                SHIFT: 16,\n                TAB: 9,\n                UP: 38\n            },\n\n            _items: function(i, startTime) {\n                var widget = this, ul = $('<ul></ul>'), item = null, time, end;\n\n                // interval should be a multiple of 60 if timeFormat is not\n                // showing minutes\n                if (i.options.timeFormat.indexOf('m') === -1 && i.options.interval % 60 !== 0) {\n                    i.options.interval = Math.max(Math.round(i.options.interval / 60), 1) * 60;\n                }\n\n                if (startTime) {\n                    time = normalize(startTime);\n                } else if (i.options.startTime) {\n                    time = normalize(i.options.startTime);\n                } else {\n                    time = normalize(i.options.startHour, i.options.startMinutes);\n                }\n\n                end = new Date(time.getTime() + 24 * 60 * 60 * 1000);\n\n                while(time < end) {\n                    if (widget._isValidTime(i, time)) {\n                        item = $('<li>').addClass('ui-menu-item').appendTo(ul);\n                        $('<a>').addClass('ui-corner-all').text($.fn.timepicker.formatTime(i.options.timeFormat, time)).appendTo(item);\n                        item.data('time-value', time);\n                    }\n                    time = new Date(time.getTime() + i.options.interval * 60 * 1000);\n                }\n\n                return ul.children();\n            },\n\n            _isValidTime: function(i, time) {\n                var min = null, max = null;\n\n                time = normalize(time);\n\n                if (i.options.minTime !== null) {\n                    min = normalize(i.options.minTime);\n                } else if (i.options.minHour !== null || i.options.minMinutes !== null) {\n                    min = normalize(i.options.minHour, i.options.minMinutes);\n                }\n\n                if (i.options.maxTime !== null) {\n                    max = normalize(i.options.maxTime);\n                } else if (i.options.maxHour !== null || i.options.maxMinutes !== null) {\n                    max = normalize(i.options.maxHour, i.options.maxMinutes);\n                }\n\n                if (min !== null && max !== null) {\n                    return time >= min && time <= max;\n                } else if (min !== null) {\n                    return time >= min;\n                } else if (max !== null) {\n                    return time <= max;\n                }\n\n                return true;\n            },\n\n            _hasScroll: function() {\n                // fix for jQuery 1.6 new prop method\n                var m = typeof this.ui.prop !== 'undefined' ? 'prop' : 'attr';\n                return this.ui.height() < this.ui[m]('scrollHeight');\n            },\n\n            /**\n             * TODO: Write me!\n             *\n             * @param i\n             * @param direction\n             * @param edge\n             * */\n            _move: function(i, direction, edge) {\n                var widget = this;\n                if (widget.closed()) {\n                    widget.open(i);\n                }\n                if (!widget.active) {\n                    widget.activate( i, widget.viewport.children( edge ) );\n                    return;\n                }\n                var next = widget.active[direction + 'All']('.ui-menu-item').eq(0);\n                if (next.length) {\n                    widget.activate(i, next);\n                } else {\n                    widget.activate( i, widget.viewport.children( edge ) );\n                }\n            },\n\n            //\n            // protected methods\n            //\n\n            register: function(node, options) {\n                var widget = this, i = {}; // timepicker instance object\n\n                i.element = $(node);\n\n                if (i.element.data('TimePicker')) {\n                    return;\n                }\n\n                i.options = $.metadata ? $.extend({}, options, i.element.metadata()) : $.extend({}, options);\n                i.widget = widget;\n\n                // proxy functions for the exposed api methods\n                $.extend(i, {\n                    next: function() {return widget.next(i) ;},\n                    previous: function() {return widget.previous(i) ;},\n                    first: function() { return widget.first(i) ;},\n                    last: function() { return widget.last(i) ;},\n                    selected: function() { return widget.selected(i) ;},\n                    open: function() { return widget.open(i) ;},\n                    close: function() { return widget.close(i) ;},\n                    closed: function() { return widget.closed(i) ;},\n                    destroy: function() { return widget.destroy(i) ;},\n\n                    parse: function(str) { return widget.parse(i, str) ;},\n                    format: function(time, format) { return widget.format(i, time, format); },\n                    getTime: function() { return widget.getTime(i) ;},\n                    setTime: function(time, silent) { return widget.setTime(i, time, silent); },\n                    option: function(name, value) { return widget.option(i, name, value); }\n                });\n\n                widget._setDefaultTime(i);\n                widget._addInputEventsHandlers(i);\n\n                i.element.data('TimePicker', i);\n            },\n\n            _setDefaultTime: function(i) {\n                if (i.options.defaultTime === 'now') {\n                    i.setTime(normalize(new Date()));\n                } else if (i.options.defaultTime && i.options.defaultTime.getFullYear) {\n                    i.setTime(normalize(i.options.defaultTime));\n                } else if (i.options.defaultTime) {\n                    i.setTime($.fn.timepicker.parseTime(i.options.defaultTime));\n                }\n            },\n\n            _addInputEventsHandlers: function(i) {\n                var widget = this;\n\n                i.element.bind('keydown.timepicker', function(event) {\n                    switch (event.which || event.keyCode) {\n                    case widget.keyCode.ENTER:\n                    case widget.keyCode.NUMPAD_ENTER:\n                        event.preventDefault();\n                        if (widget.closed()) {\n                            i.element.trigger('change.timepicker');\n                        } else {\n                            widget.select(i, widget.active);\n                        }\n                        break;\n                    case widget.keyCode.UP:\n                        i.previous();\n                        break;\n                    case widget.keyCode.DOWN:\n                        i.next();\n                        break;\n                    default:\n                        if (!widget.closed()) {\n                            i.close(true);\n                        }\n                        break;\n                    }\n                }).bind('focus.timepicker', function() {\n                    i.open();\n                }).bind('blur.timepicker', function() {\n                    setTimeout(function() {\n                        if (i.element.data('timepicker-user-clicked-outside')) {\n                            i.close();\n                        }\n                    });\n                }).bind('change.timepicker', function() {\n                    if (i.closed()) {\n                        i.setTime($.fn.timepicker.parseTime(i.element.val()));\n                    }\n                });\n            },\n\n            select: function(i, item) {\n                var widget = this, instance = i === false ? widget.instance : i;\n                widget.setTime(instance, $.fn.timepicker.parseTime(item.children('a').text()));\n                widget.close(instance, true);\n            },\n\n            activate: function(i, item) {\n                var widget = this, instance = i === false ? widget.instance : i;\n\n                if (instance !== widget.instance) {\n                    return;\n                } else {\n                    widget.deactivate();\n                }\n\n                if (widget._hasScroll()) {\n                    var offset = item.offset().top - widget.ui.offset().top,\n                        scroll = widget.ui.scrollTop(),\n                        height = widget.ui.height();\n                    if (offset < 0) {\n                        widget.ui.scrollTop(scroll + offset);\n                    } else if (offset >= height) {\n                        widget.ui.scrollTop(scroll + offset - height + item.height());\n                    }\n                }\n\n                widget.active = item.eq(0).children('a').addClass('ui-state-hover')\n                                                        .attr('id', 'ui-active-item')\n                                          .end();\n            },\n\n            deactivate: function() {\n                var widget = this;\n                if (!widget.active) { return; }\n                widget.active.children('a').removeClass('ui-state-hover').removeAttr('id');\n                widget.active = null;\n            },\n\n            /**\n             * _activate, _deactivate, first, last, next, previous, _move and\n             * _hasScroll were extracted from jQuery UI Menu\n             * http://github,com/jquery/jquery-ui/blob/menu/ui/jquery.ui.menu.js\n             */\n\n            //\n            // public methods\n            //\n\n            next: function(i) {\n                if (this.closed() || this.instance === i) {\n                    this._move(i, 'next', '.ui-menu-item:first');\n                }\n                return i.element;\n            },\n\n            previous: function(i) {\n                if (this.closed() || this.instance === i) {\n                    this._move(i, 'prev', '.ui-menu-item:last');\n                }\n                return i.element;\n            },\n\n            first: function(i) {\n                if (this.instance === i) {\n                    return this.active && this.active.prevAll('.ui-menu-item').length === 0;\n                }\n                return false;\n            },\n\n            last: function(i) {\n                if (this.instance === i) {\n                    return this.active && this.active.nextAll('.ui-menu-item').length === 0;\n                }\n                return false;\n            },\n\n            selected: function(i) {\n                if (this.instance === i)  {\n                    return this.active ? this.active : null;\n                }\n                return null;\n            },\n\n            open: function(i) {\n                var widget = this,\n                    selectedTime = i.getTime(),\n                    arrange = i.options.dynamic && selectedTime;\n\n                // return if dropdown is disabled\n                if (!i.options.dropdown) { return i.element; }\n\n                // fix for issue https://github.com/wvega/timepicker/issues/56\n                // idea from https://prototype.lighthouseapp.com/projects/8887/tickets/248-results-popup-from-ajaxautocompleter-disappear-when-user-clicks-on-scrollbars-in-ie6ie7\n                i.element.data('timepicker-event-namespace', Math.random());\n\n                $(document).bind('click.timepicker-' + i.element.data('timepicker-event-namespace'), function(event) {\n                    if (i.element.get(0) === event.target) {\n                        i.element.data('timepicker-user-clicked-outside', false);\n                    } else {\n                        i.element.data('timepicker-user-clicked-outside', true).blur();\n                    }\n                });\n\n                // if a date is already selected and options.dynamic is true,\n                // arrange the items in the list so the first item is\n                // cronologically right after the selected date.\n                // TODO: set selectedTime\n                if (i.rebuild || !i.items || arrange) {\n                    i.items = widget._items(i, arrange ? selectedTime : null);\n                }\n\n                // remove old li elements keeping associated events, then append\n                // the new li elements to the ul\n                if (i.rebuild || widget.instance !== i || arrange) {\n                    // handle menu events when using jQuery versions previous to\n                    // 1.4.2 (thanks to Brian Link)\n                    // http://github.com/wvega/timepicker/issues#issue/4\n                    if ($.fn.jquery < '1.4.2') {\n                        widget.viewport.children().remove();\n                        widget.viewport.append(i.items);\n                        widget.viewport.find('a').bind('mouseover.timepicker', function() {\n                            widget.activate(i, $(this).parent());\n                        }).bind('mouseout.timepicker', function() {\n                            widget.deactivate(i);\n                        }).bind('click.timepicker', function(event) {\n                            event.preventDefault();\n                            widget.select(i, $(this).parent());\n                        });\n                    } else {\n                        widget.viewport.children().detach();\n                        widget.viewport.append(i.items);\n                    }\n                }\n\n                i.rebuild = false;\n\n                // theme\n                widget.container.removeClass('ui-helper-hidden ui-timepicker-hidden ui-timepicker-standard ui-timepicker-corners').show();\n\n                switch (i.options.theme) {\n                case 'standard':\n                    widget.container.addClass('ui-timepicker-standard');\n                    break;\n                case 'standard-rounded-corners':\n                    widget.container.addClass('ui-timepicker-standard ui-timepicker-corners');\n                    break;\n                default:\n                    break;\n                }\n\n                /* resize ui */\n\n                // we are hiding the scrollbar in the dropdown menu adding a 40px\n                // padding to the wrapper element making the scrollbar appear in the\n                // part of the wrapper that's hidden by the container (a DIV).\n                if ( ! widget.container.hasClass( 'ui-timepicker-no-scrollbar' ) && ! i.options.scrollbar ) {\n                    widget.container.addClass( 'ui-timepicker-no-scrollbar' );\n                    widget.viewport.css( { paddingRight: 40 } );\n                }\n\n                var containerDecorationHeight = widget.container.outerHeight() - widget.container.height(),\n                    zindex = i.options.zindex ? i.options.zindex : i.element.offsetParent().css( 'z-index' ),\n                    elementOffset = i.element.offset();\n\n                // position the container right below the element, or as close to as possible.\n                widget.container.css( {\n                    top: elementOffset.top + i.element.outerHeight(),\n                    left: elementOffset.left\n                } );\n\n                // then show the container so that the browser can consider the timepicker's\n                // height to calculate the page's total height and decide if adding scrollbars\n                // is necessary.\n                widget.container.show();\n\n                // now we need to calculate the element offset and position the container again.\n                // If the browser added scrollbars, the container's original position is not aligned\n                // with the element's final position. This step fixes that problem.\n                widget.container.css( {\n                    left: i.element.offset().left,\n                    height: widget.ui.outerHeight() + containerDecorationHeight,\n                    width: i.element.outerWidth(),\n                    zIndex: zindex,\n                    cursor: 'default'\n                } );\n\n                var calculatedWidth = widget.container.width() - ( widget.ui.outerWidth() - widget.ui.width() );\n\n                // hardcode ui, viewport and item's width. I couldn't get it to work using CSS only\n                widget.ui.css( { width: calculatedWidth } );\n                widget.viewport.css( { width: calculatedWidth } );\n                i.items.css( { width: calculatedWidth } );\n\n                // XXX: what's this line doing here?\n                widget.instance = i;\n\n                // try to match input field's current value with an item in the\n                // dropdown\n                if (selectedTime) {\n                    i.items.each(function() {\n                        var item = $(this), time;\n\n                        if ($.fn.jquery < '1.4.2') {\n                            time = $.fn.timepicker.parseTime(item.find('a').text());\n                        } else {\n                            time = item.data('time-value');\n                        }\n\n                        if (time.getTime() === selectedTime.getTime()) {\n                            widget.activate(i, item);\n                            return false;\n                        }\n                        return true;\n                    });\n                } else {\n                    widget.deactivate(i);\n                }\n\n                // don't break the chain\n                return i.element;\n            },\n\n            close: function(i) {\n                var widget = this;\n\n                if (widget.instance === i) {\n                    widget.container.addClass('ui-helper-hidden ui-timepicker-hidden').hide();\n                    widget.ui.scrollTop(0);\n                    widget.ui.children().removeClass('ui-state-hover');\n                }\n\n                $(document).unbind('click.timepicker-' + i.element.data('timepicker-event-namespace'));\n\n                return i.element;\n            },\n\n            closed: function() {\n                return this.ui.is(':hidden');\n            },\n\n            destroy: function(i) {\n                var widget = this;\n                widget.close(i, true);\n                return i.element.unbind('.timepicker').data('TimePicker', null);\n            },\n\n            //\n\n            parse: function(i, str) {\n                return $.fn.timepicker.parseTime(str);\n            },\n\n            format: function(i, time, format) {\n                format = format || i.options.timeFormat;\n                return $.fn.timepicker.formatTime(format, time);\n            },\n\n            getTime: function(i) {\n                var widget = this,\n                    current = $.fn.timepicker.parseTime(i.element.val());\n\n                // if current value is not valid, we return null.\n                // stored Date object is ignored, because the current value\n                // (valid or invalid) always takes priority\n                if (current instanceof Date && !widget._isValidTime(i, current)) {\n                    return null;\n                } else if (current instanceof Date && i.selectedTime) {\n                    // if the textfield's value and the stored Date object\n                    // have the same representation using current format\n                    // we prefer the stored Date object to avoid unnecesary\n                    // lost of precision.\n                    if (i.format(current) === i.format(i.selectedTime)) {\n                        return i.selectedTime;\n                    } else {\n                        return current;\n                    }\n                } else if (current instanceof Date) {\n                    return current;\n                } else {\n                    return null;\n                }\n            },\n\n            setTime: function(i, time, silent) {\n                var widget = this, previous = i.selectedTime;\n\n                if (typeof time === 'string') {\n                    time = i.parse(time);\n                }\n\n                if (time && time.getMinutes && widget._isValidTime(i, time)) {\n                    time = normalize(time);\n                    i.selectedTime = time;\n                    i.element.val(i.format(time, i.options.timeFormat));\n\n                    // TODO: add documentaion about setTime being chainable\n                    if (silent) { return i; }\n                } else {\n                    i.selectedTime = null;\n                }\n\n                // custom change event and change callback\n                // TODO: add documentation about this event\n                if (previous !== null || i.selectedTime !== null) {\n                    i.element.trigger('time-change', [time]);\n                    if ($.isFunction(i.options.change)) {\n                        i.options.change.apply(i.element, [time]);\n                    }\n                }\n\n                return i.element;\n            },\n\n            option: function(i, name, value) {\n                if (typeof value === 'undefined') {\n                    return i.options[name];\n                }\n\n                var time = i.getTime(),\n                    options, destructive;\n\n                if (typeof name === 'string') {\n                    options = {};\n                    options[name] = value;\n                } else {\n                    options = name;\n                }\n\n                // some options require rebuilding the dropdown items\n                destructive = ['minHour', 'minMinutes', 'minTime',\n                               'maxHour', 'maxMinutes', 'maxTime',\n                               'startHour', 'startMinutes', 'startTime',\n                               'timeFormat', 'interval', 'dropdown'];\n\n\n                $.each(options, function(name) {\n                    i.options[name] = options[name];\n                    i.rebuild = i.rebuild || $.inArray(name, destructive) > -1;\n                });\n\n                if (i.rebuild) {\n                    i.setTime(time);\n                }\n            }\n        };\n\n        $.TimePicker.defaults =  {\n            timeFormat: 'hh:mm p',\n            minHour: null,\n            minMinutes: null,\n            minTime: null,\n            maxHour: null,\n            maxMinutes: null,\n            maxTime: null,\n            startHour: null,\n            startMinutes: null,\n            startTime: null,\n            interval: 30,\n            dynamic: true,\n            theme: 'standard',\n            zindex: null,\n            dropdown: true,\n            scrollbar: false,\n            // callbacks\n            change: function(/*time*/) {}\n        };\n\n        $.TimePicker.methods = {\n            chainable: [\n                'next',\n                'previous',\n                'open',\n                'close',\n                'destroy',\n                'setTime'\n            ]\n        };\n\n        $.fn.timepicker = function(options) {\n            // support calling API methods using the following syntax:\n            //   $(...).timepicker('parse', '11p');\n            if (typeof options === 'string') {\n                var args = Array.prototype.slice.call(arguments, 1),\n                    method, result;\n\n                // chainable API methods\n                if (options === 'option' && arguments.length > 2) {\n                    method = 'each';\n                } else if ($.inArray(options, $.TimePicker.methods.chainable) !== -1) {\n                    method = 'each';\n                // API methods that return a value\n                } else {\n                    method = 'map';\n                }\n\n                result = this[method](function() {\n                    var element = $(this), i = element.data('TimePicker');\n                    if (typeof i === 'object') {\n                        return i[options].apply(i, args);\n                    }\n                });\n\n                if (method === 'map' && this.length === 1) {\n                    return $.makeArray(result).shift();\n                } else if (method === 'map') {\n                    return $.makeArray(result);\n                } else {\n                    return result;\n                }\n            }\n\n            // calling the constructor again on a jQuery object with a single\n            // element returns a reference to a TimePicker object.\n            if (this.length === 1 && this.data('TimePicker')) {\n                return this.data('TimePicker');\n            }\n\n            var globals = $.extend({}, $.TimePicker.defaults, options);\n\n            return this.each(function() {\n                $.TimePicker.instance().register(this, globals);\n            });\n        };\n\n        /**\n         * TODO: documentation\n         */\n        $.fn.timepicker.formatTime = function(format, time) {\n            var hours = time.getHours(),\n                hours12 = hours % 12,\n                minutes = time.getMinutes(),\n                seconds = time.getSeconds(),\n                replacements = {\n                    hh: pad((hours12 === 0 ? 12 : hours12).toString(), '0', 2),\n                    HH: pad(hours.toString(), '0', 2),\n                    mm: pad(minutes.toString(), '0', 2),\n                    ss: pad(seconds.toString(), '0', 2),\n                    h: (hours12 === 0 ? 12 : hours12),\n                    H: hours,\n                    m: minutes,\n                    s: seconds,\n                    p: hours > 11 ? 'PM' : 'AM'\n                },\n                str = format, k = '';\n            for (k in replacements) {\n                if (replacements.hasOwnProperty(k)) {\n                    str = str.replace(new RegExp(k,'g'), replacements[k]);\n                }\n            }\n            // replacements is not guaranteed to be order and the 'p' can cause problems\n            str = str.replace(new RegExp('a','g'), hours > 11 ? 'pm' : 'am');\n            return str;\n        };\n\n        /**\n         * Convert a string representing a given time into a Date object.\n         *\n         * The Date object will have attributes others than hours, minutes and\n         * seconds set to current local time values. The function will return\n         * false if given string can't be converted.\n         *\n         * If there is an 'a' in the string we set am to true, if there is a 'p'\n         * we set pm to true, if both are present only am is setted to true.\n         *\n         * All non-digit characters are removed from the string before trying to\n         * parse the time.\n         *\n         * ''       can't be converted and the function returns false.\n         * '1'      is converted to     01:00:00 am\n         * '11'     is converted to     11:00:00 am\n         * '111'    is converted to     01:11:00 am\n         * '1111'   is converted to     11:11:00 am\n         * '11111'  is converted to     01:11:11 am\n         * '111111' is converted to     11:11:11 am\n         *\n         * Only the first six (or less) characters are considered.\n         *\n         * Special case:\n         *\n         * When hours is greater than 24 and the last digit is less or equal than 6, and minutes\n         * and seconds are less or equal than 60, we append a trailing zero and\n         * start parsing process again. Examples:\n         *\n         * '95' is treated as '950' and converted to 09:50:00 am\n         * '46' is treated as '460' and converted to 05:00:00 am\n         * '57' can't be converted and the function returns false.\n         *\n         * For a detailed list of supported formats check the unit tests at\n         * http://github.com/wvega/timepicker/tree/master/tests/\n         */\n        $.fn.timepicker.parseTime = (function() {\n            var patterns = [\n                    // 1, 12, 123, 1234, 12345, 123456\n                    [/^(\\d+)$/, '$1'],\n                    // :1, :2, :3, :4 ... :9\n                    [/^:(\\d)$/, '$10'],\n                    // :1, :12, :123, :1234 ...\n                    [/^:(\\d+)/, '$1'],\n                    // 6:06, 5:59, 5:8\n                    [/^(\\d):([7-9])$/, '0$10$2'],\n                    [/^(\\d):(\\d\\d)$/, '$1$2'],\n                    [/^(\\d):(\\d{1,})$/, '0$1$20'],\n                    // 10:8, 10:10, 10:34\n                    [/^(\\d\\d):([7-9])$/, '$10$2'],\n                    [/^(\\d\\d):(\\d)$/, '$1$20'],\n                    [/^(\\d\\d):(\\d*)$/, '$1$2'],\n                    // 123:4, 1234:456\n                    [/^(\\d{3,}):(\\d)$/, '$10$2'],\n                    [/^(\\d{3,}):(\\d{2,})/, '$1$2'],\n                    //\n                    [/^(\\d):(\\d):(\\d)$/, '0$10$20$3'],\n                    [/^(\\d{1,2}):(\\d):(\\d\\d)/, '$10$2$3']\n                ],\n                length = patterns.length;\n\n            return function(str) {\n                var time = normalize(new Date()),\n                    am = false, pm = false, h = false, m = false, s = false;\n\n                if (typeof str === 'undefined' || !str.toLowerCase) { return null; }\n\n                str = str.toLowerCase();\n                am = /a/.test(str);\n                pm = am ? false : /p/.test(str);\n                str = str.replace(/[^0-9:]/g, '').replace(/:+/g, ':');\n\n                for (var k = 0; k < length; k = k + 1) {\n                    if (patterns[k][0].test(str)) {\n                        str = str.replace(patterns[k][0], patterns[k][1]);\n                        break;\n                    }\n                }\n                str = str.replace(/:/g, '');\n\n                if (str.length === 1) {\n                    h = str;\n                } else if (str.length === 2) {\n                    h = str;\n                } else if (str.length === 3 || str.length === 5) {\n                    h = str.substr(0, 1);\n                    m = str.substr(1, 2);\n                    s = str.substr(3, 2);\n                } else if (str.length === 4 || str.length > 5) {\n                    h = str.substr(0, 2);\n                    m = str.substr(2, 2);\n                    s = str.substr(4, 2);\n                }\n\n                if (str.length > 0 && str.length < 5) {\n                    if (str.length < 3) {\n                        m = 0;\n                    }\n                    s = 0;\n                }\n\n                if (h === false || m === false || s === false) {\n                    return false;\n                }\n\n                h = parseInt(h, 10);\n                m = parseInt(m, 10);\n                s = parseInt(s, 10);\n\n                if (am && h === 12) {\n                    h = 0;\n                } else if (pm && h < 12) {\n                    h = h + 12;\n                }\n\n                if (h > 24) {\n                    if (str.length >= 6) {\n                        return $.fn.timepicker.parseTime(str.substr(0,5));\n                    } else {\n                        return $.fn.timepicker.parseTime(str + '0' + (am ? 'a' : '') + (pm ? 'p' : ''));\n                    }\n                } else {\n                    time.setHours(h, m, s);\n                    return time;\n                }\n            };\n        })();\n    })(jQuery);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/jquery-timepicker/jquery.timepicker.js\n");

/***/ }),

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * jQuery JavaScript Library v3.6.1\n * https://jquery.com/\n *\n * Includes Sizzle.js\n * https://sizzlejs.com/\n *\n * Copyright OpenJS Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2022-08-26T17:52Z\n */\n( function( global, factory ) {\n\n\t\"use strict\";\n\n\tif (  true && typeof module.exports === \"object\" ) {\n\n\t\t// For CommonJS and CommonJS-like environments where a proper `window`\n\t\t// is present, execute the factory and get jQuery.\n\t\t// For environments that do not have a `window` with a `document`\n\t\t// (such as Node.js), expose a factory as module.exports.\n\t\t// This accentuates the need for the creation of a real `window`.\n\t\t// e.g. var jQuery = require(\"jquery\")(window);\n\t\t// See ticket trac-14549 for more info.\n\t\tmodule.exports = global.document ?\n\t\t\tfactory( global, true ) :\n\t\t\tfunction( w ) {\n\t\t\t\tif ( !w.document ) {\n\t\t\t\t\tthrow new Error( \"jQuery requires a window with a document\" );\n\t\t\t\t}\n\t\t\t\treturn factory( w );\n\t\t\t};\n\t} else {\n\t\tfactory( global );\n\t}\n\n// Pass this if window is not defined yet\n} )( typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {\n\n// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\n// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\n// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\n// enough that all such attempts are guarded in a try block.\n\"use strict\";\n\nvar arr = [];\n\nvar getProto = Object.getPrototypeOf;\n\nvar slice = arr.slice;\n\nvar flat = arr.flat ? function( array ) {\n\treturn arr.flat.call( array );\n} : function( array ) {\n\treturn arr.concat.apply( [], array );\n};\n\n\nvar push = arr.push;\n\nvar indexOf = arr.indexOf;\n\nvar class2type = {};\n\nvar toString = class2type.toString;\n\nvar hasOwn = class2type.hasOwnProperty;\n\nvar fnToString = hasOwn.toString;\n\nvar ObjectFunctionString = fnToString.call( Object );\n\nvar support = {};\n\nvar isFunction = function isFunction( obj ) {\n\n\t\t// Support: Chrome <=57, Firefox <=52\n\t\t// In some browsers, typeof returns \"function\" for HTML <object> elements\n\t\t// (i.e., `typeof document.createElement( \"object\" ) === \"function\"`).\n\t\t// We don't want to classify *any* DOM node as a function.\n\t\t// Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5\n\t\t// Plus for old WebKit, typeof returns \"function\" for HTML collections\n\t\t// (e.g., `typeof document.getElementsByTagName(\"div\") === \"function\"`). (gh-4756)\n\t\treturn typeof obj === \"function\" && typeof obj.nodeType !== \"number\" &&\n\t\t\ttypeof obj.item !== \"function\";\n\t};\n\n\nvar isWindow = function isWindow( obj ) {\n\t\treturn obj != null && obj === obj.window;\n\t};\n\n\nvar document = window.document;\n\n\n\n\tvar preservedScriptAttributes = {\n\t\ttype: true,\n\t\tsrc: true,\n\t\tnonce: true,\n\t\tnoModule: true\n\t};\n\n\tfunction DOMEval( code, node, doc ) {\n\t\tdoc = doc || document;\n\n\t\tvar i, val,\n\t\t\tscript = doc.createElement( \"script\" );\n\n\t\tscript.text = code;\n\t\tif ( node ) {\n\t\t\tfor ( i in preservedScriptAttributes ) {\n\n\t\t\t\t// Support: Firefox 64+, Edge 18+\n\t\t\t\t// Some browsers don't support the \"nonce\" property on scripts.\n\t\t\t\t// On the other hand, just using `getAttribute` is not enough as\n\t\t\t\t// the `nonce` attribute is reset to an empty string whenever it\n\t\t\t\t// becomes browsing-context connected.\n\t\t\t\t// See https://github.com/whatwg/html/issues/2369\n\t\t\t\t// See https://html.spec.whatwg.org/#nonce-attributes\n\t\t\t\t// The `node.getAttribute` check was added for the sake of\n\t\t\t\t// `jQuery.globalEval` so that it can fake a nonce-containing node\n\t\t\t\t// via an object.\n\t\t\t\tval = node[ i ] || node.getAttribute && node.getAttribute( i );\n\t\t\t\tif ( val ) {\n\t\t\t\t\tscript.setAttribute( i, val );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdoc.head.appendChild( script ).parentNode.removeChild( script );\n\t}\n\n\nfunction toType( obj ) {\n\tif ( obj == null ) {\n\t\treturn obj + \"\";\n\t}\n\n\t// Support: Android <=2.3 only (functionish RegExp)\n\treturn typeof obj === \"object\" || typeof obj === \"function\" ?\n\t\tclass2type[ toString.call( obj ) ] || \"object\" :\n\t\ttypeof obj;\n}\n/* global Symbol */\n// Defining this global in .eslintrc.json would create a danger of using the global\n// unguarded in another place, it seems safer to define global only for this module\n\n\n\nvar\n\tversion = \"3.6.1\",\n\n\t// Define a local copy of jQuery\n\tjQuery = function( selector, context ) {\n\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n\t\treturn new jQuery.fn.init( selector, context );\n\t};\n\njQuery.fn = jQuery.prototype = {\n\n\t// The current version of jQuery being used\n\tjquery: version,\n\n\tconstructor: jQuery,\n\n\t// The default length of a jQuery object is 0\n\tlength: 0,\n\n\ttoArray: function() {\n\t\treturn slice.call( this );\n\t},\n\n\t// Get the Nth element in the matched element set OR\n\t// Get the whole matched element set as a clean array\n\tget: function( num ) {\n\n\t\t// Return all the elements in a clean array\n\t\tif ( num == null ) {\n\t\t\treturn slice.call( this );\n\t\t}\n\n\t\t// Return just the one element from the set\n\t\treturn num < 0 ? this[ num + this.length ] : this[ num ];\n\t},\n\n\t// Take an array of elements and push it onto the stack\n\t// (returning the new matched element set)\n\tpushStack: function( elems ) {\n\n\t\t// Build a new jQuery matched element set\n\t\tvar ret = jQuery.merge( this.constructor(), elems );\n\n\t\t// Add the old object onto the stack (as a reference)\n\t\tret.prevObject = this;\n\n\t\t// Return the newly-formed element set\n\t\treturn ret;\n\t},\n\n\t// Execute a callback for every element in the matched set.\n\teach: function( callback ) {\n\t\treturn jQuery.each( this, callback );\n\t},\n\n\tmap: function( callback ) {\n\t\treturn this.pushStack( jQuery.map( this, function( elem, i ) {\n\t\t\treturn callback.call( elem, i, elem );\n\t\t} ) );\n\t},\n\n\tslice: function() {\n\t\treturn this.pushStack( slice.apply( this, arguments ) );\n\t},\n\n\tfirst: function() {\n\t\treturn this.eq( 0 );\n\t},\n\n\tlast: function() {\n\t\treturn this.eq( -1 );\n\t},\n\n\teven: function() {\n\t\treturn this.pushStack( jQuery.grep( this, function( _elem, i ) {\n\t\t\treturn ( i + 1 ) % 2;\n\t\t} ) );\n\t},\n\n\todd: function() {\n\t\treturn this.pushStack( jQuery.grep( this, function( _elem, i ) {\n\t\t\treturn i % 2;\n\t\t} ) );\n\t},\n\n\teq: function( i ) {\n\t\tvar len = this.length,\n\t\t\tj = +i + ( i < 0 ? len : 0 );\n\t\treturn this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n\t},\n\n\tend: function() {\n\t\treturn this.prevObject || this.constructor();\n\t},\n\n\t// For internal use only.\n\t// Behaves like an Array's method, not like a jQuery method.\n\tpush: push,\n\tsort: arr.sort,\n\tsplice: arr.splice\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[ 0 ] || {},\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\n\t\t// Skip the boolean and the target\n\t\ttarget = arguments[ i ] || {};\n\t\ti++;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && !isFunction( target ) ) {\n\t\ttarget = {};\n\t}\n\n\t// Extend jQuery itself if only one argument is passed\n\tif ( i === length ) {\n\t\ttarget = this;\n\t\ti--;\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\n\t\t// Only deal with non-null/undefined values\n\t\tif ( ( options = arguments[ i ] ) != null ) {\n\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent Object.prototype pollution\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( name === \"__proto__\" || target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n\t\t\t\t\t( copyIsArray = Array.isArray( copy ) ) ) ) {\n\t\t\t\t\tsrc = target[ name ];\n\n\t\t\t\t\t// Ensure proper type for the source value\n\t\t\t\t\tif ( copyIsArray && !Array.isArray( src ) ) {\n\t\t\t\t\t\tclone = [];\n\t\t\t\t\t} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {\n\t\t\t\t\t\tclone = {};\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src;\n\t\t\t\t\t}\n\t\t\t\t\tcopyIsArray = false;\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\njQuery.extend( {\n\n\t// Unique for each copy of jQuery on the page\n\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n\t// Assume jQuery is ready without the ready module\n\tisReady: true,\n\n\terror: function( msg ) {\n\t\tthrow new Error( msg );\n\t},\n\n\tnoop: function() {},\n\n\tisPlainObject: function( obj ) {\n\t\tvar proto, Ctor;\n\n\t\t// Detect obvious negatives\n\t\t// Use toString instead of jQuery.type to catch host objects\n\t\tif ( !obj || toString.call( obj ) !== \"[object Object]\" ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tproto = getProto( obj );\n\n\t\t// Objects with no prototype (e.g., `Object.create( null )`) are plain\n\t\tif ( !proto ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Objects with prototype are plain iff they were constructed by a global Object function\n\t\tCtor = hasOwn.call( proto, \"constructor\" ) && proto.constructor;\n\t\treturn typeof Ctor === \"function\" && fnToString.call( Ctor ) === ObjectFunctionString;\n\t},\n\n\tisEmptyObject: function( obj ) {\n\t\tvar name;\n\n\t\tfor ( name in obj ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\t// Evaluates a script in a provided context; falls back to the global one\n\t// if not specified.\n\tglobalEval: function( code, options, doc ) {\n\t\tDOMEval( code, { nonce: options && options.nonce }, doc );\n\t},\n\n\teach: function( obj, callback ) {\n\t\tvar length, i = 0;\n\n\t\tif ( isArrayLike( obj ) ) {\n\t\t\tlength = obj.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i in obj ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\t// results is for internal usage only\n\tmakeArray: function( arr, results ) {\n\t\tvar ret = results || [];\n\n\t\tif ( arr != null ) {\n\t\t\tif ( isArrayLike( Object( arr ) ) ) {\n\t\t\t\tjQuery.merge( ret,\n\t\t\t\t\ttypeof arr === \"string\" ?\n\t\t\t\t\t\t[ arr ] : arr\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tpush.call( ret, arr );\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tinArray: function( elem, arr, i ) {\n\t\treturn arr == null ? -1 : indexOf.call( arr, elem, i );\n\t},\n\n\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t// push.apply(_, arraylike) throws on ancient WebKit\n\tmerge: function( first, second ) {\n\t\tvar len = +second.length,\n\t\t\tj = 0,\n\t\t\ti = first.length;\n\n\t\tfor ( ; j < len; j++ ) {\n\t\t\tfirst[ i++ ] = second[ j ];\n\t\t}\n\n\t\tfirst.length = i;\n\n\t\treturn first;\n\t},\n\n\tgrep: function( elems, callback, invert ) {\n\t\tvar callbackInverse,\n\t\t\tmatches = [],\n\t\t\ti = 0,\n\t\t\tlength = elems.length,\n\t\t\tcallbackExpect = !invert;\n\n\t\t// Go through the array, only saving the items\n\t\t// that pass the validator function\n\t\tfor ( ; i < length; i++ ) {\n\t\t\tcallbackInverse = !callback( elems[ i ], i );\n\t\t\tif ( callbackInverse !== callbackExpect ) {\n\t\t\t\tmatches.push( elems[ i ] );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t},\n\n\t// arg is for internal usage only\n\tmap: function( elems, callback, arg ) {\n\t\tvar length, value,\n\t\t\ti = 0,\n\t\t\tret = [];\n\n\t\t// Go through the array, translating each of the items to their new values\n\t\tif ( isArrayLike( elems ) ) {\n\t\t\tlength = elems.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Go through every key on the object,\n\t\t} else {\n\t\t\tfor ( i in elems ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Flatten any nested arrays\n\t\treturn flat( ret );\n\t},\n\n\t// A global GUID counter for objects\n\tguid: 1,\n\n\t// jQuery.support is not used in Core but other projects attach their\n\t// properties to it so it needs to exist.\n\tsupport: support\n} );\n\nif ( typeof Symbol === \"function\" ) {\n\tjQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n\n// Populate the class2type map\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\n\tfunction( _i, name ) {\n\t\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n\t} );\n\nfunction isArrayLike( obj ) {\n\n\t// Support: real iOS 8.2 only (not reproducible in simulator)\n\t// `in` check used to prevent JIT error (gh-2145)\n\t// hasOwn isn't used here due to false negatives\n\t// regarding Nodelist length in IE\n\tvar length = !!obj && \"length\" in obj && obj.length,\n\t\ttype = toType( obj );\n\n\tif ( isFunction( obj ) || isWindow( obj ) ) {\n\t\treturn false;\n\t}\n\n\treturn type === \"array\" || length === 0 ||\n\t\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\nvar Sizzle =\n/*!\n * Sizzle CSS Selector Engine v2.3.6\n * https://sizzlejs.com/\n *\n * Copyright JS Foundation and other contributors\n * Released under the MIT license\n * https://js.foundation/\n *\n * Date: 2021-02-16\n */\n( function( window ) {\nvar i,\n\tsupport,\n\tExpr,\n\tgetText,\n\tisXML,\n\ttokenize,\n\tcompile,\n\tselect,\n\toutermostContext,\n\tsortInput,\n\thasDuplicate,\n\n\t// Local document vars\n\tsetDocument,\n\tdocument,\n\tdocElem,\n\tdocumentIsHTML,\n\trbuggyQSA,\n\trbuggyMatches,\n\tmatches,\n\tcontains,\n\n\t// Instance-specific data\n\texpando = \"sizzle\" + 1 * new Date(),\n\tpreferredDoc = window.document,\n\tdirruns = 0,\n\tdone = 0,\n\tclassCache = createCache(),\n\ttokenCache = createCache(),\n\tcompilerCache = createCache(),\n\tnonnativeSelectorCache = createCache(),\n\tsortOrder = function( a, b ) {\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t}\n\t\treturn 0;\n\t},\n\n\t// Instance methods\n\thasOwn = ( {} ).hasOwnProperty,\n\tarr = [],\n\tpop = arr.pop,\n\tpushNative = arr.push,\n\tpush = arr.push,\n\tslice = arr.slice,\n\n\t// Use a stripped-down indexOf as it's faster than native\n\t// https://jsperf.com/thor-indexof-vs-for/5\n\tindexOf = function( list, elem ) {\n\t\tvar i = 0,\n\t\t\tlen = list.length;\n\t\tfor ( ; i < len; i++ ) {\n\t\t\tif ( list[ i ] === elem ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t},\n\n\tbooleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|\" +\n\t\t\"ismap|loop|multiple|open|readonly|required|scoped\",\n\n\t// Regular expressions\n\n\t// http://www.w3.org/TR/css3-selectors/#whitespace\n\twhitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n\n\t// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram\n\tidentifier = \"(?:\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace +\n\t\t\"?|\\\\\\\\[^\\\\r\\\\n\\\\f]|[\\\\w-]|[^\\0-\\\\x7f])+\",\n\n\t// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n\tattributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n\n\t\t// Operator (capture 2)\n\t\t\"*([*^$|!~]?=)\" + whitespace +\n\n\t\t// \"Attribute values must be CSS identifiers [capture 5]\n\t\t// or strings [capture 3 or capture 4]\"\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" +\n\t\twhitespace + \"*\\\\]\",\n\n\tpseudos = \":(\" + identifier + \")(?:\\\\((\" +\n\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\n\t\t// 2. simple (capture 6)\n\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\n\t\t// 3. anything else (capture 2)\n\t\t\".*\" +\n\t\t\")\\\\)|)\",\n\n\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n\trwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n\trtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" +\n\t\twhitespace + \"+$\", \"g\" ),\n\n\trcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n\trcombinators = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace +\n\t\t\"*\" ),\n\trdescend = new RegExp( whitespace + \"|>\" ),\n\n\trpseudo = new RegExp( pseudos ),\n\tridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n\tmatchExpr = {\n\t\t\"ID\": new RegExp( \"^#(\" + identifier + \")\" ),\n\t\t\"CLASS\": new RegExp( \"^\\\\.(\" + identifier + \")\" ),\n\t\t\"TAG\": new RegExp( \"^(\" + identifier + \"|[*])\" ),\n\t\t\"ATTR\": new RegExp( \"^\" + attributes ),\n\t\t\"PSEUDO\": new RegExp( \"^\" + pseudos ),\n\t\t\"CHILD\": new RegExp( \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" +\n\t\t\twhitespace + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" +\n\t\t\twhitespace + \"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n\t\t\"bool\": new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n\n\t\t// For use in libraries implementing .is()\n\t\t// We use this for POS matching in `select`\n\t\t\"needsContext\": new RegExp( \"^\" + whitespace +\n\t\t\t\"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + whitespace +\n\t\t\t\"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n\t},\n\n\trhtml = /HTML$/i,\n\trinputs = /^(?:input|select|textarea|button)$/i,\n\trheader = /^h\\d$/i,\n\n\trnative = /^[^{]+\\{\\s*\\[native \\w/,\n\n\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n\trsibling = /[+~]/,\n\n\t// CSS escapes\n\t// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n\trunescape = new RegExp( \"\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace + \"?|\\\\\\\\([^\\\\r\\\\n\\\\f])\", \"g\" ),\n\tfunescape = function( escape, nonHex ) {\n\t\tvar high = \"0x\" + escape.slice( 1 ) - 0x10000;\n\n\t\treturn nonHex ?\n\n\t\t\t// Strip the backslash prefix from a non-hex escape sequence\n\t\t\tnonHex :\n\n\t\t\t// Replace a hexadecimal escape sequence with the encoded Unicode code point\n\t\t\t// Support: IE <=11+\n\t\t\t// For values outside the Basic Multilingual Plane (BMP), manually construct a\n\t\t\t// surrogate pair\n\t\t\thigh < 0 ?\n\t\t\t\tString.fromCharCode( high + 0x10000 ) :\n\t\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n\t},\n\n\t// CSS string/identifier serialization\n\t// https://drafts.csswg.org/cssom/#common-serializing-idioms\n\trcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n\tfcssescape = function( ch, asCodePoint ) {\n\t\tif ( asCodePoint ) {\n\n\t\t\t// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n\t\t\tif ( ch === \"\\0\" ) {\n\t\t\t\treturn \"\\uFFFD\";\n\t\t\t}\n\n\t\t\t// Control characters and (dependent upon position) numbers get escaped as code points\n\t\t\treturn ch.slice( 0, -1 ) + \"\\\\\" +\n\t\t\t\tch.charCodeAt( ch.length - 1 ).toString( 16 ) + \" \";\n\t\t}\n\n\t\t// Other potentially-special ASCII characters get backslash-escaped\n\t\treturn \"\\\\\" + ch;\n\t},\n\n\t// Used for iframes\n\t// See setDocument()\n\t// Removing the function wrapper causes a \"Permission Denied\"\n\t// error in IE\n\tunloadHandler = function() {\n\t\tsetDocument();\n\t},\n\n\tinDisabledFieldset = addCombinator(\n\t\tfunction( elem ) {\n\t\t\treturn elem.disabled === true && elem.nodeName.toLowerCase() === \"fieldset\";\n\t\t},\n\t\t{ dir: \"parentNode\", next: \"legend\" }\n\t);\n\n// Optimize for push.apply( _, NodeList )\ntry {\n\tpush.apply(\n\t\t( arr = slice.call( preferredDoc.childNodes ) ),\n\t\tpreferredDoc.childNodes\n\t);\n\n\t// Support: Android<4.0\n\t// Detect silently failing push.apply\n\t// eslint-disable-next-line no-unused-expressions\n\tarr[ preferredDoc.childNodes.length ].nodeType;\n} catch ( e ) {\n\tpush = { apply: arr.length ?\n\n\t\t// Leverage slice if possible\n\t\tfunction( target, els ) {\n\t\t\tpushNative.apply( target, slice.call( els ) );\n\t\t} :\n\n\t\t// Support: IE<9\n\t\t// Otherwise append directly\n\t\tfunction( target, els ) {\n\t\t\tvar j = target.length,\n\t\t\t\ti = 0;\n\n\t\t\t// Can't trust NodeList.length\n\t\t\twhile ( ( target[ j++ ] = els[ i++ ] ) ) {}\n\t\t\ttarget.length = j - 1;\n\t\t}\n\t};\n}\n\nfunction Sizzle( selector, context, results, seed ) {\n\tvar m, i, elem, nid, match, groups, newSelector,\n\t\tnewContext = context && context.ownerDocument,\n\n\t\t// nodeType defaults to 9, since context defaults to document\n\t\tnodeType = context ? context.nodeType : 9;\n\n\tresults = results || [];\n\n\t// Return early from calls with invalid selector or context\n\tif ( typeof selector !== \"string\" || !selector ||\n\t\tnodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n\t\treturn results;\n\t}\n\n\t// Try to shortcut find operations (as opposed to filters) in HTML documents\n\tif ( !seed ) {\n\t\tsetDocument( context );\n\t\tcontext = context || document;\n\n\t\tif ( documentIsHTML ) {\n\n\t\t\t// If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n\t\t\t// (excepting DocumentFragment context, where the methods don't exist)\n\t\t\tif ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {\n\n\t\t\t\t// ID selector\n\t\t\t\tif ( ( m = match[ 1 ] ) ) {\n\n\t\t\t\t\t// Document context\n\t\t\t\t\tif ( nodeType === 9 ) {\n\t\t\t\t\t\tif ( ( elem = context.getElementById( m ) ) ) {\n\n\t\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\t\tif ( elem.id === m ) {\n\t\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t// Element context\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\tif ( newContext && ( elem = newContext.getElementById( m ) ) &&\n\t\t\t\t\t\t\tcontains( context, elem ) &&\n\t\t\t\t\t\t\telem.id === m ) {\n\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t// Type selector\n\t\t\t\t} else if ( match[ 2 ] ) {\n\t\t\t\t\tpush.apply( results, context.getElementsByTagName( selector ) );\n\t\t\t\t\treturn results;\n\n\t\t\t\t// Class selector\n\t\t\t\t} else if ( ( m = match[ 3 ] ) && support.getElementsByClassName &&\n\t\t\t\t\tcontext.getElementsByClassName ) {\n\n\t\t\t\t\tpush.apply( results, context.getElementsByClassName( m ) );\n\t\t\t\t\treturn results;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Take advantage of querySelectorAll\n\t\t\tif ( support.qsa &&\n\t\t\t\t!nonnativeSelectorCache[ selector + \" \" ] &&\n\t\t\t\t( !rbuggyQSA || !rbuggyQSA.test( selector ) ) &&\n\n\t\t\t\t// Support: IE 8 only\n\t\t\t\t// Exclude object elements\n\t\t\t\t( nodeType !== 1 || context.nodeName.toLowerCase() !== \"object\" ) ) {\n\n\t\t\t\tnewSelector = selector;\n\t\t\t\tnewContext = context;\n\n\t\t\t\t// qSA considers elements outside a scoping root when evaluating child or\n\t\t\t\t// descendant combinators, which is not what we want.\n\t\t\t\t// In such cases, we work around the behavior by prefixing every selector in the\n\t\t\t\t// list with an ID selector referencing the scope context.\n\t\t\t\t// The technique has to be used as well when a leading combinator is used\n\t\t\t\t// as such selectors are not recognized by querySelectorAll.\n\t\t\t\t// Thanks to Andrew Dupont for this technique.\n\t\t\t\tif ( nodeType === 1 &&\n\t\t\t\t\t( rdescend.test( selector ) || rcombinators.test( selector ) ) ) {\n\n\t\t\t\t\t// Expand context for sibling selectors\n\t\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext;\n\n\t\t\t\t\t// We can use :scope instead of the ID hack if the browser\n\t\t\t\t\t// supports it & if we're not changing the context.\n\t\t\t\t\tif ( newContext !== context || !support.scope ) {\n\n\t\t\t\t\t\t// Capture the context ID, setting it first if necessary\n\t\t\t\t\t\tif ( ( nid = context.getAttribute( \"id\" ) ) ) {\n\t\t\t\t\t\t\tnid = nid.replace( rcssescape, fcssescape );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcontext.setAttribute( \"id\", ( nid = expando ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prefix every selector in the list\n\t\t\t\t\tgroups = tokenize( selector );\n\t\t\t\t\ti = groups.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tgroups[ i ] = ( nid ? \"#\" + nid : \":scope\" ) + \" \" +\n\t\t\t\t\t\t\ttoSelector( groups[ i ] );\n\t\t\t\t\t}\n\t\t\t\t\tnewSelector = groups.join( \",\" );\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tpush.apply( results,\n\t\t\t\t\t\tnewContext.querySelectorAll( newSelector )\n\t\t\t\t\t);\n\t\t\t\t\treturn results;\n\t\t\t\t} catch ( qsaError ) {\n\t\t\t\t\tnonnativeSelectorCache( selector, true );\n\t\t\t\t} finally {\n\t\t\t\t\tif ( nid === expando ) {\n\t\t\t\t\t\tcontext.removeAttribute( \"id\" );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// All others\n\treturn select( selector.replace( rtrim, \"$1\" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *\tdeleting the oldest entry\n */\nfunction createCache() {\n\tvar keys = [];\n\n\tfunction cache( key, value ) {\n\n\t\t// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n\t\tif ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n\n\t\t\t// Only keep the most recent entries\n\t\t\tdelete cache[ keys.shift() ];\n\t\t}\n\t\treturn ( cache[ key + \" \" ] = value );\n\t}\n\treturn cache;\n}\n\n/**\n * Mark a function for special use by Sizzle\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n\tfn[ expando ] = true;\n\treturn fn;\n}\n\n/**\n * Support testing using an element\n * @param {Function} fn Passed the created element and returns a boolean result\n */\nfunction assert( fn ) {\n\tvar el = document.createElement( \"fieldset\" );\n\n\ttry {\n\t\treturn !!fn( el );\n\t} catch ( e ) {\n\t\treturn false;\n\t} finally {\n\n\t\t// Remove from its parent by default\n\t\tif ( el.parentNode ) {\n\t\t\tel.parentNode.removeChild( el );\n\t\t}\n\n\t\t// release memory in IE\n\t\tel = null;\n\t}\n}\n\n/**\n * Adds the same handler for all of the specified attrs\n * @param {String} attrs Pipe-separated list of attributes\n * @param {Function} handler The method that will be applied\n */\nfunction addHandle( attrs, handler ) {\n\tvar arr = attrs.split( \"|\" ),\n\t\ti = arr.length;\n\n\twhile ( i-- ) {\n\t\tExpr.attrHandle[ arr[ i ] ] = handler;\n\t}\n}\n\n/**\n * Checks document order of two siblings\n * @param {Element} a\n * @param {Element} b\n * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n */\nfunction siblingCheck( a, b ) {\n\tvar cur = b && a,\n\t\tdiff = cur && a.nodeType === 1 && b.nodeType === 1 &&\n\t\t\ta.sourceIndex - b.sourceIndex;\n\n\t// Use IE sourceIndex if available on both nodes\n\tif ( diff ) {\n\t\treturn diff;\n\t}\n\n\t// Check if b follows a\n\tif ( cur ) {\n\t\twhile ( ( cur = cur.nextSibling ) ) {\n\t\t\tif ( cur === b ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn a ? 1 : -1;\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn name === \"input\" && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn ( name === \"input\" || name === \"button\" ) && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for :enabled/:disabled\n * @param {Boolean} disabled true for :disabled; false for :enabled\n */\nfunction createDisabledPseudo( disabled ) {\n\n\t// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n\treturn function( elem ) {\n\n\t\t// Only certain elements can match :enabled or :disabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n\t\tif ( \"form\" in elem ) {\n\n\t\t\t// Check for inherited disabledness on relevant non-disabled elements:\n\t\t\t// * listed form-associated elements in a disabled fieldset\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n\t\t\t// * option elements in a disabled optgroup\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n\t\t\t// All such elements have a \"form\" property.\n\t\t\tif ( elem.parentNode && elem.disabled === false ) {\n\n\t\t\t\t// Option elements defer to a parent optgroup if present\n\t\t\t\tif ( \"label\" in elem ) {\n\t\t\t\t\tif ( \"label\" in elem.parentNode ) {\n\t\t\t\t\t\treturn elem.parentNode.disabled === disabled;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn elem.disabled === disabled;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Support: IE 6 - 11\n\t\t\t\t// Use the isDisabled shortcut property to check for disabled fieldset ancestors\n\t\t\t\treturn elem.isDisabled === disabled ||\n\n\t\t\t\t\t// Where there is no isDisabled, check manually\n\t\t\t\t\t/* jshint -W018 */\n\t\t\t\t\telem.isDisabled !== !disabled &&\n\t\t\t\t\tinDisabledFieldset( elem ) === disabled;\n\t\t\t}\n\n\t\t\treturn elem.disabled === disabled;\n\n\t\t// Try to winnow out elements that can't be disabled before trusting the disabled property.\n\t\t// Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n\t\t// even exist on them, let alone have a boolean value.\n\t\t} else if ( \"label\" in elem ) {\n\t\t\treturn elem.disabled === disabled;\n\t\t}\n\n\t\t// Remaining elements are neither :enabled nor :disabled\n\t\treturn false;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n\treturn markFunction( function( argument ) {\n\t\targument = +argument;\n\t\treturn markFunction( function( seed, matches ) {\n\t\t\tvar j,\n\t\t\t\tmatchIndexes = fn( [], seed.length, argument ),\n\t\t\t\ti = matchIndexes.length;\n\n\t\t\t// Match elements found at the specified indexes\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( seed[ ( j = matchIndexes[ i ] ) ] ) {\n\t\t\t\t\tseed[ j ] = !( matches[ j ] = seed[ j ] );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t} );\n}\n\n/**\n * Checks a node for validity as a Sizzle context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\n}\n\n// Expose support vars for convenience\nsupport = Sizzle.support = {};\n\n/**\n * Detects XML nodes\n * @param {Element|Object} elem An element or a document\n * @returns {Boolean} True iff elem is a non-HTML XML node\n */\nisXML = Sizzle.isXML = function( elem ) {\n\tvar namespace = elem && elem.namespaceURI,\n\t\tdocElem = elem && ( elem.ownerDocument || elem ).documentElement;\n\n\t// Support: IE <=8\n\t// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes\n\t// https://bugs.jquery.com/ticket/4833\n\treturn !rhtml.test( namespace || docElem && docElem.nodeName || \"HTML\" );\n};\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [doc] An element or document object to use to set the document\n * @returns {Object} Returns the current document\n */\nsetDocument = Sizzle.setDocument = function( node ) {\n\tvar hasCompare, subWindow,\n\t\tdoc = node ? node.ownerDocument || node : preferredDoc;\n\n\t// Return early if doc is invalid or already selected\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {\n\t\treturn document;\n\t}\n\n\t// Update global variables\n\tdocument = doc;\n\tdocElem = document.documentElement;\n\tdocumentIsHTML = !isXML( document );\n\n\t// Support: IE 9 - 11+, Edge 12 - 18+\n\t// Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( preferredDoc != document &&\n\t\t( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {\n\n\t\t// Support: IE 11, Edge\n\t\tif ( subWindow.addEventListener ) {\n\t\t\tsubWindow.addEventListener( \"unload\", unloadHandler, false );\n\n\t\t// Support: IE 9 - 10 only\n\t\t} else if ( subWindow.attachEvent ) {\n\t\t\tsubWindow.attachEvent( \"onunload\", unloadHandler );\n\t\t}\n\t}\n\n\t// Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,\n\t// Safari 4 - 5 only, Opera <=11.6 - 12.x only\n\t// IE/Edge & older browsers don't support the :scope pseudo-class.\n\t// Support: Safari 6.0 only\n\t// Safari 6.0 supports :scope but it's an alias of :root there.\n\tsupport.scope = assert( function( el ) {\n\t\tdocElem.appendChild( el ).appendChild( document.createElement( \"div\" ) );\n\t\treturn typeof el.querySelectorAll !== \"undefined\" &&\n\t\t\t!el.querySelectorAll( \":scope fieldset div\" ).length;\n\t} );\n\n\t/* Attributes\n\t---------------------------------------------------------------------- */\n\n\t// Support: IE<8\n\t// Verify that getAttribute really returns attributes and not properties\n\t// (excepting IE8 booleans)\n\tsupport.attributes = assert( function( el ) {\n\t\tel.className = \"i\";\n\t\treturn !el.getAttribute( \"className\" );\n\t} );\n\n\t/* getElement(s)By*\n\t---------------------------------------------------------------------- */\n\n\t// Check if getElementsByTagName(\"*\") returns only elements\n\tsupport.getElementsByTagName = assert( function( el ) {\n\t\tel.appendChild( document.createComment( \"\" ) );\n\t\treturn !el.getElementsByTagName( \"*\" ).length;\n\t} );\n\n\t// Support: IE<9\n\tsupport.getElementsByClassName = rnative.test( document.getElementsByClassName );\n\n\t// Support: IE<10\n\t// Check if getElementById returns elements by name\n\t// The broken getElementById methods don't pick up programmatically-set names,\n\t// so use a roundabout getElementsByName test\n\tsupport.getById = assert( function( el ) {\n\t\tdocElem.appendChild( el ).id = expando;\n\t\treturn !document.getElementsByName || !document.getElementsByName( expando ).length;\n\t} );\n\n\t// ID filter and find\n\tif ( support.getById ) {\n\t\tExpr.filter[ \"ID\" ] = function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn elem.getAttribute( \"id\" ) === attrId;\n\t\t\t};\n\t\t};\n\t\tExpr.find[ \"ID\" ] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar elem = context.getElementById( id );\n\t\t\t\treturn elem ? [ elem ] : [];\n\t\t\t}\n\t\t};\n\t} else {\n\t\tExpr.filter[ \"ID\" ] =  function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\tvar node = typeof elem.getAttributeNode !== \"undefined\" &&\n\t\t\t\t\telem.getAttributeNode( \"id\" );\n\t\t\t\treturn node && node.value === attrId;\n\t\t\t};\n\t\t};\n\n\t\t// Support: IE 6 - 7 only\n\t\t// getElementById is not reliable as a find shortcut\n\t\tExpr.find[ \"ID\" ] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar node, i, elems,\n\t\t\t\t\telem = context.getElementById( id );\n\n\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t// Verify the id attribute\n\t\t\t\t\tnode = elem.getAttributeNode( \"id\" );\n\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Fall back on getElementsByName\n\t\t\t\t\telems = context.getElementsByName( id );\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile ( ( elem = elems[ i++ ] ) ) {\n\t\t\t\t\t\tnode = elem.getAttributeNode( \"id\" );\n\t\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn [];\n\t\t\t}\n\t\t};\n\t}\n\n\t// Tag\n\tExpr.find[ \"TAG\" ] = support.getElementsByTagName ?\n\t\tfunction( tag, context ) {\n\t\t\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\t\t\treturn context.getElementsByTagName( tag );\n\n\t\t\t// DocumentFragment nodes don't have gEBTN\n\t\t\t} else if ( support.qsa ) {\n\t\t\t\treturn context.querySelectorAll( tag );\n\t\t\t}\n\t\t} :\n\n\t\tfunction( tag, context ) {\n\t\t\tvar elem,\n\t\t\t\ttmp = [],\n\t\t\t\ti = 0,\n\n\t\t\t\t// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n\t\t\t\tresults = context.getElementsByTagName( tag );\n\n\t\t\t// Filter out possible comments\n\t\t\tif ( tag === \"*\" ) {\n\t\t\t\twhile ( ( elem = results[ i++ ] ) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\ttmp.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn tmp;\n\t\t\t}\n\t\t\treturn results;\n\t\t};\n\n\t// Class\n\tExpr.find[ \"CLASS\" ] = support.getElementsByClassName && function( className, context ) {\n\t\tif ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\n\t\t\treturn context.getElementsByClassName( className );\n\t\t}\n\t};\n\n\t/* QSA/matchesSelector\n\t---------------------------------------------------------------------- */\n\n\t// QSA and matchesSelector support\n\n\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\trbuggyMatches = [];\n\n\t// qSa(:focus) reports false when true (Chrome 21)\n\t// We allow this because of a bug in IE8/9 that throws an error\n\t// whenever `document.activeElement` is accessed on an iframe\n\t// So, we allow :focus to pass through QSA all the time to avoid the IE error\n\t// See https://bugs.jquery.com/ticket/13378\n\trbuggyQSA = [];\n\n\tif ( ( support.qsa = rnative.test( document.querySelectorAll ) ) ) {\n\n\t\t// Build QSA regex\n\t\t// Regex strategy adopted from Diego Perini\n\t\tassert( function( el ) {\n\n\t\t\tvar input;\n\n\t\t\t// Select is set to empty string on purpose\n\t\t\t// This is to test IE's treatment of not explicitly\n\t\t\t// setting a boolean content attribute,\n\t\t\t// since its presence should be enough\n\t\t\t// https://bugs.jquery.com/ticket/12359\n\t\t\tdocElem.appendChild( el ).innerHTML = \"<a id='\" + expando + \"'></a>\" +\n\t\t\t\t\"<select id='\" + expando + \"-\\r\\\\' msallowcapture=''>\" +\n\t\t\t\t\"<option selected=''></option></select>\";\n\n\t\t\t// Support: IE8, Opera 11-12.16\n\t\t\t// Nothing should be selected when empty strings follow ^= or $= or *=\n\t\t\t// The test attribute must be unknown in Opera but \"safe\" for WinRT\n\t\t\t// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\t\t\tif ( el.querySelectorAll( \"[msallowcapture^='']\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\" );\n\t\t\t}\n\n\t\t\t// Support: IE8\n\t\t\t// Boolean attributes and \"value\" are not treated correctly\n\t\t\tif ( !el.querySelectorAll( \"[selected]\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\" );\n\t\t\t}\n\n\t\t\t// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n\t\t\tif ( !el.querySelectorAll( \"[id~=\" + expando + \"-]\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"~=\" );\n\t\t\t}\n\n\t\t\t// Support: IE 11+, Edge 15 - 18+\n\t\t\t// IE 11/Edge don't find elements on a `[name='']` query in some cases.\n\t\t\t// Adding a temporary attribute to the document before the selection works\n\t\t\t// around the issue.\n\t\t\t// Interestingly, IE 10 & older don't seem to have the issue.\n\t\t\tinput = document.createElement( \"input\" );\n\t\t\tinput.setAttribute( \"name\", \"\" );\n\t\t\tel.appendChild( input );\n\t\t\tif ( !el.querySelectorAll( \"[name='']\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*name\" + whitespace + \"*=\" +\n\t\t\t\t\twhitespace + \"*(?:''|\\\"\\\")\" );\n\t\t\t}\n\n\t\t\t// Webkit/Opera - :checked should return selected option elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( !el.querySelectorAll( \":checked\" ).length ) {\n\t\t\t\trbuggyQSA.push( \":checked\" );\n\t\t\t}\n\n\t\t\t// Support: Safari 8+, iOS 8+\n\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\n\t\t\t// In-page `selector#id sibling-combinator selector` fails\n\t\t\tif ( !el.querySelectorAll( \"a#\" + expando + \"+*\" ).length ) {\n\t\t\t\trbuggyQSA.push( \".#.+[+~]\" );\n\t\t\t}\n\n\t\t\t// Support: Firefox <=3.6 - 5 only\n\t\t\t// Old Firefox doesn't throw on a badly-escaped identifier.\n\t\t\tel.querySelectorAll( \"\\\\\\f\" );\n\t\t\trbuggyQSA.push( \"[\\\\r\\\\n\\\\f]\" );\n\t\t} );\n\n\t\tassert( function( el ) {\n\t\t\tel.innerHTML = \"<a href='' disabled='disabled'></a>\" +\n\t\t\t\t\"<select disabled='disabled'><option/></select>\";\n\n\t\t\t// Support: Windows 8 Native Apps\n\t\t\t// The type and name attributes are restricted during .innerHTML assignment\n\t\t\tvar input = document.createElement( \"input\" );\n\t\t\tinput.setAttribute( \"type\", \"hidden\" );\n\t\t\tel.appendChild( input ).setAttribute( \"name\", \"D\" );\n\n\t\t\t// Support: IE8\n\t\t\t// Enforce case-sensitivity of name attribute\n\t\t\tif ( el.querySelectorAll( \"[name=d]\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"name\" + whitespace + \"*[*^$|!~]?=\" );\n\t\t\t}\n\n\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( el.querySelectorAll( \":enabled\" ).length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Support: IE9-11+\n\t\t\t// IE's :disabled selector does not pick up the children of disabled fieldsets\n\t\t\tdocElem.appendChild( el ).disabled = true;\n\t\t\tif ( el.querySelectorAll( \":disabled\" ).length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Support: Opera 10 - 11 only\n\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos\n\t\t\tel.querySelectorAll( \"*,:x\" );\n\t\t\trbuggyQSA.push( \",.*:\" );\n\t\t} );\n\t}\n\n\tif ( ( support.matchesSelector = rnative.test( ( matches = docElem.matches ||\n\t\tdocElem.webkitMatchesSelector ||\n\t\tdocElem.mozMatchesSelector ||\n\t\tdocElem.oMatchesSelector ||\n\t\tdocElem.msMatchesSelector ) ) ) ) {\n\n\t\tassert( function( el ) {\n\n\t\t\t// Check to see if it's possible to do matchesSelector\n\t\t\t// on a disconnected node (IE 9)\n\t\t\tsupport.disconnectedMatch = matches.call( el, \"*\" );\n\n\t\t\t// This should fail with an exception\n\t\t\t// Gecko does not error, returns false instead\n\t\t\tmatches.call( el, \"[s!='']:x\" );\n\t\t\trbuggyMatches.push( \"!=\", pseudos );\n\t\t} );\n\t}\n\n\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( \"|\" ) );\n\trbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join( \"|\" ) );\n\n\t/* Contains\n\t---------------------------------------------------------------------- */\n\thasCompare = rnative.test( docElem.compareDocumentPosition );\n\n\t// Element contains another\n\t// Purposefully self-exclusive\n\t// As in, an element does not contain itself\n\tcontains = hasCompare || rnative.test( docElem.contains ) ?\n\t\tfunction( a, b ) {\n\t\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\t\t\tbup = b && b.parentNode;\n\t\t\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n\t\t\t\tadown.contains ?\n\t\t\t\t\tadown.contains( bup ) :\n\t\t\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n\t\t\t) );\n\t\t} :\n\t\tfunction( a, b ) {\n\t\t\tif ( b ) {\n\t\t\t\twhile ( ( b = b.parentNode ) ) {\n\t\t\t\t\tif ( b === a ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t/* Sorting\n\t---------------------------------------------------------------------- */\n\n\t// Document order sorting\n\tsortOrder = hasCompare ?\n\tfunction( a, b ) {\n\n\t\t// Flag for duplicate removal\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Sort on method existence if only one input has compareDocumentPosition\n\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\t\tif ( compare ) {\n\t\t\treturn compare;\n\t\t}\n\n\t\t// Calculate position if both inputs belong to the same document\n\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t// two documents; shallow comparisons work.\n\t\t// eslint-disable-next-line eqeqeq\n\t\tcompare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?\n\t\t\ta.compareDocumentPosition( b ) :\n\n\t\t\t// Otherwise we know they are disconnected\n\t\t\t1;\n\n\t\t// Disconnected nodes\n\t\tif ( compare & 1 ||\n\t\t\t( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {\n\n\t\t\t// Choose the first element that is related to our preferred document\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\tif ( a == document || a.ownerDocument == preferredDoc &&\n\t\t\t\tcontains( preferredDoc, a ) ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\tif ( b == document || b.ownerDocument == preferredDoc &&\n\t\t\t\tcontains( preferredDoc, b ) ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// Maintain original order\n\t\t\treturn sortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\t\t}\n\n\t\treturn compare & 4 ? -1 : 1;\n\t} :\n\tfunction( a, b ) {\n\n\t\t// Exit early if the nodes are identical\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\taup = a.parentNode,\n\t\t\tbup = b.parentNode,\n\t\t\tap = [ a ],\n\t\t\tbp = [ b ];\n\n\t\t// Parentless nodes are either documents or disconnected\n\t\tif ( !aup || !bup ) {\n\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t/* eslint-disable eqeqeq */\n\t\t\treturn a == document ? -1 :\n\t\t\t\tb == document ? 1 :\n\t\t\t\t/* eslint-enable eqeqeq */\n\t\t\t\taup ? -1 :\n\t\t\t\tbup ? 1 :\n\t\t\t\tsortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\n\t\t// If the nodes are siblings, we can do a quick check\n\t\t} else if ( aup === bup ) {\n\t\t\treturn siblingCheck( a, b );\n\t\t}\n\n\t\t// Otherwise we need full lists of their ancestors for comparison\n\t\tcur = a;\n\t\twhile ( ( cur = cur.parentNode ) ) {\n\t\t\tap.unshift( cur );\n\t\t}\n\t\tcur = b;\n\t\twhile ( ( cur = cur.parentNode ) ) {\n\t\t\tbp.unshift( cur );\n\t\t}\n\n\t\t// Walk down the tree looking for a discrepancy\n\t\twhile ( ap[ i ] === bp[ i ] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i ?\n\n\t\t\t// Do a sibling check if the nodes have a common ancestor\n\t\t\tsiblingCheck( ap[ i ], bp[ i ] ) :\n\n\t\t\t// Otherwise nodes in our document sort first\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t/* eslint-disable eqeqeq */\n\t\t\tap[ i ] == preferredDoc ? -1 :\n\t\t\tbp[ i ] == preferredDoc ? 1 :\n\t\t\t/* eslint-enable eqeqeq */\n\t\t\t0;\n\t};\n\n\treturn document;\n};\n\nSizzle.matches = function( expr, elements ) {\n\treturn Sizzle( expr, null, null, elements );\n};\n\nSizzle.matchesSelector = function( elem, expr ) {\n\tsetDocument( elem );\n\n\tif ( support.matchesSelector && documentIsHTML &&\n\t\t!nonnativeSelectorCache[ expr + \" \" ] &&\n\t\t( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&\n\t\t( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {\n\n\t\ttry {\n\t\t\tvar ret = matches.call( elem, expr );\n\n\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\n\t\t\tif ( ret || support.disconnectedMatch ||\n\n\t\t\t\t// As well, disconnected nodes are said to be in a document\n\t\t\t\t// fragment in IE 9\n\t\t\t\telem.document && elem.document.nodeType !== 11 ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t} catch ( e ) {\n\t\t\tnonnativeSelectorCache( expr, true );\n\t\t}\n\t}\n\n\treturn Sizzle( expr, document, null, [ elem ] ).length > 0;\n};\n\nSizzle.contains = function( context, elem ) {\n\n\t// Set document vars if needed\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( ( context.ownerDocument || context ) != document ) {\n\t\tsetDocument( context );\n\t}\n\treturn contains( context, elem );\n};\n\nSizzle.attr = function( elem, name ) {\n\n\t// Set document vars if needed\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( ( elem.ownerDocument || elem ) != document ) {\n\t\tsetDocument( elem );\n\t}\n\n\tvar fn = Expr.attrHandle[ name.toLowerCase() ],\n\n\t\t// Don't get fooled by Object.prototype properties (jQuery #13807)\n\t\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\n\t\t\tfn( elem, name, !documentIsHTML ) :\n\t\t\tundefined;\n\n\treturn val !== undefined ?\n\t\tval :\n\t\tsupport.attributes || !documentIsHTML ?\n\t\t\telem.getAttribute( name ) :\n\t\t\t( val = elem.getAttributeNode( name ) ) && val.specified ?\n\t\t\t\tval.value :\n\t\t\t\tnull;\n};\n\nSizzle.escape = function( sel ) {\n\treturn ( sel + \"\" ).replace( rcssescape, fcssescape );\n};\n\nSizzle.error = function( msg ) {\n\tthrow new Error( \"Syntax error, unrecognized expression: \" + msg );\n};\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\nSizzle.uniqueSort = function( results ) {\n\tvar elem,\n\t\tduplicates = [],\n\t\tj = 0,\n\t\ti = 0;\n\n\t// Unless we *know* we can detect duplicates, assume their presence\n\thasDuplicate = !support.detectDuplicates;\n\tsortInput = !support.sortStable && results.slice( 0 );\n\tresults.sort( sortOrder );\n\n\tif ( hasDuplicate ) {\n\t\twhile ( ( elem = results[ i++ ] ) ) {\n\t\t\tif ( elem === results[ i ] ) {\n\t\t\t\tj = duplicates.push( i );\n\t\t\t}\n\t\t}\n\t\twhile ( j-- ) {\n\t\t\tresults.splice( duplicates[ j ], 1 );\n\t\t}\n\t}\n\n\t// Clear input after sorting to release objects\n\t// See https://github.com/jquery/sizzle/pull/225\n\tsortInput = null;\n\n\treturn results;\n};\n\n/**\n * Utility function for retrieving the text value of an array of DOM nodes\n * @param {Array|Element} elem\n */\ngetText = Sizzle.getText = function( elem ) {\n\tvar node,\n\t\tret = \"\",\n\t\ti = 0,\n\t\tnodeType = elem.nodeType;\n\n\tif ( !nodeType ) {\n\n\t\t// If no nodeType, this is expected to be an array\n\t\twhile ( ( node = elem[ i++ ] ) ) {\n\n\t\t\t// Do not traverse comment nodes\n\t\t\tret += getText( node );\n\t\t}\n\t} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n\n\t\t// Use textContent for elements\n\t\t// innerText usage removed for consistency of new lines (jQuery #11153)\n\t\tif ( typeof elem.textContent === \"string\" ) {\n\t\t\treturn elem.textContent;\n\t\t} else {\n\n\t\t\t// Traverse its children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tret += getText( elem );\n\t\t\t}\n\t\t}\n\t} else if ( nodeType === 3 || nodeType === 4 ) {\n\t\treturn elem.nodeValue;\n\t}\n\n\t// Do not include comment or processing instruction nodes\n\n\treturn ret;\n};\n\nExpr = Sizzle.selectors = {\n\n\t// Can be adjusted by the user\n\tcacheLength: 50,\n\n\tcreatePseudo: markFunction,\n\n\tmatch: matchExpr,\n\n\tattrHandle: {},\n\n\tfind: {},\n\n\trelative: {\n\t\t\">\": { dir: \"parentNode\", first: true },\n\t\t\" \": { dir: \"parentNode\" },\n\t\t\"+\": { dir: \"previousSibling\", first: true },\n\t\t\"~\": { dir: \"previousSibling\" }\n\t},\n\n\tpreFilter: {\n\t\t\"ATTR\": function( match ) {\n\t\t\tmatch[ 1 ] = match[ 1 ].replace( runescape, funescape );\n\n\t\t\t// Move the given value to match[3] whether quoted or unquoted\n\t\t\tmatch[ 3 ] = ( match[ 3 ] || match[ 4 ] ||\n\t\t\t\tmatch[ 5 ] || \"\" ).replace( runescape, funescape );\n\n\t\t\tif ( match[ 2 ] === \"~=\" ) {\n\t\t\t\tmatch[ 3 ] = \" \" + match[ 3 ] + \" \";\n\t\t\t}\n\n\t\t\treturn match.slice( 0, 4 );\n\t\t},\n\n\t\t\"CHILD\": function( match ) {\n\n\t\t\t/* matches from matchExpr[\"CHILD\"]\n\t\t\t\t1 type (only|nth|...)\n\t\t\t\t2 what (child|of-type)\n\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)\n\t\t\t\t5 sign of xn-component\n\t\t\t\t6 x of xn-component\n\t\t\t\t7 sign of y-component\n\t\t\t\t8 y of y-component\n\t\t\t*/\n\t\t\tmatch[ 1 ] = match[ 1 ].toLowerCase();\n\n\t\t\tif ( match[ 1 ].slice( 0, 3 ) === \"nth\" ) {\n\n\t\t\t\t// nth-* requires argument\n\t\t\t\tif ( !match[ 3 ] ) {\n\t\t\t\t\tSizzle.error( match[ 0 ] );\n\t\t\t\t}\n\n\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n\t\t\t\t// remember that false/true cast respectively to 0/1\n\t\t\t\tmatch[ 4 ] = +( match[ 4 ] ?\n\t\t\t\t\tmatch[ 5 ] + ( match[ 6 ] || 1 ) :\n\t\t\t\t\t2 * ( match[ 3 ] === \"even\" || match[ 3 ] === \"odd\" ) );\n\t\t\t\tmatch[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === \"odd\" );\n\n\t\t\t\t// other types prohibit arguments\n\t\t\t} else if ( match[ 3 ] ) {\n\t\t\t\tSizzle.error( match[ 0 ] );\n\t\t\t}\n\n\t\t\treturn match;\n\t\t},\n\n\t\t\"PSEUDO\": function( match ) {\n\t\t\tvar excess,\n\t\t\t\tunquoted = !match[ 6 ] && match[ 2 ];\n\n\t\t\tif ( matchExpr[ \"CHILD\" ].test( match[ 0 ] ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Accept quoted arguments as-is\n\t\t\tif ( match[ 3 ] ) {\n\t\t\t\tmatch[ 2 ] = match[ 4 ] || match[ 5 ] || \"\";\n\n\t\t\t// Strip excess characters from unquoted arguments\n\t\t\t} else if ( unquoted && rpseudo.test( unquoted ) &&\n\n\t\t\t\t// Get excess from tokenize (recursively)\n\t\t\t\t( excess = tokenize( unquoted, true ) ) &&\n\n\t\t\t\t// advance to the next closing parenthesis\n\t\t\t\t( excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length ) ) {\n\n\t\t\t\t// excess is a negative index\n\t\t\t\tmatch[ 0 ] = match[ 0 ].slice( 0, excess );\n\t\t\t\tmatch[ 2 ] = unquoted.slice( 0, excess );\n\t\t\t}\n\n\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n\t\t\treturn match.slice( 0, 3 );\n\t\t}\n\t},\n\n\tfilter: {\n\n\t\t\"TAG\": function( nodeNameSelector ) {\n\t\t\tvar nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn nodeNameSelector === \"*\" ?\n\t\t\t\tfunction() {\n\t\t\t\t\treturn true;\n\t\t\t\t} :\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n\t\t\t\t};\n\t\t},\n\n\t\t\"CLASS\": function( className ) {\n\t\t\tvar pattern = classCache[ className + \" \" ];\n\n\t\t\treturn pattern ||\n\t\t\t\t( pattern = new RegExp( \"(^|\" + whitespace +\n\t\t\t\t\t\")\" + className + \"(\" + whitespace + \"|$)\" ) ) && classCache(\n\t\t\t\t\t\tclassName, function( elem ) {\n\t\t\t\t\t\t\treturn pattern.test(\n\t\t\t\t\t\t\t\ttypeof elem.className === \"string\" && elem.className ||\n\t\t\t\t\t\t\t\ttypeof elem.getAttribute !== \"undefined\" &&\n\t\t\t\t\t\t\t\t\telem.getAttribute( \"class\" ) ||\n\t\t\t\t\t\t\t\t\"\"\n\t\t\t\t\t\t\t);\n\t\t\t\t} );\n\t\t},\n\n\t\t\"ATTR\": function( name, operator, check ) {\n\t\t\treturn function( elem ) {\n\t\t\t\tvar result = Sizzle.attr( elem, name );\n\n\t\t\t\tif ( result == null ) {\n\t\t\t\t\treturn operator === \"!=\";\n\t\t\t\t}\n\t\t\t\tif ( !operator ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tresult += \"\";\n\n\t\t\t\t/* eslint-disable max-len */\n\n\t\t\t\treturn operator === \"=\" ? result === check :\n\t\t\t\t\toperator === \"!=\" ? result !== check :\n\t\t\t\t\toperator === \"^=\" ? check && result.indexOf( check ) === 0 :\n\t\t\t\t\toperator === \"*=\" ? check && result.indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"$=\" ? check && result.slice( -check.length ) === check :\n\t\t\t\t\toperator === \"~=\" ? ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" ).indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"|=\" ? result === check || result.slice( 0, check.length + 1 ) === check + \"-\" :\n\t\t\t\t\tfalse;\n\t\t\t\t/* eslint-enable max-len */\n\n\t\t\t};\n\t\t},\n\n\t\t\"CHILD\": function( type, what, _argument, first, last ) {\n\t\t\tvar simple = type.slice( 0, 3 ) !== \"nth\",\n\t\t\t\tforward = type.slice( -4 ) !== \"last\",\n\t\t\t\tofType = what === \"of-type\";\n\n\t\t\treturn first === 1 && last === 0 ?\n\n\t\t\t\t// Shortcut for :nth-*(n)\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn !!elem.parentNode;\n\t\t\t\t} :\n\n\t\t\t\tfunction( elem, _context, xml ) {\n\t\t\t\t\tvar cache, uniqueCache, outerCache, node, nodeIndex, start,\n\t\t\t\t\t\tdir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n\t\t\t\t\t\tparent = elem.parentNode,\n\t\t\t\t\t\tname = ofType && elem.nodeName.toLowerCase(),\n\t\t\t\t\t\tuseCache = !xml && !ofType,\n\t\t\t\t\t\tdiff = false;\n\n\t\t\t\t\tif ( parent ) {\n\n\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n\t\t\t\t\t\tif ( simple ) {\n\t\t\t\t\t\t\twhile ( dir ) {\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\twhile ( ( node = node[ dir ] ) ) {\n\t\t\t\t\t\t\t\t\tif ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) {\n\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\n\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstart = [ forward ? parent.firstChild : parent.lastChild ];\n\n\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n\t\t\t\t\t\tif ( forward && useCache ) {\n\n\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n\n\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\tnode = parent;\n\t\t\t\t\t\t\touterCache = node[ expando ] || ( node[ expando ] = {} );\n\n\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t( outerCache[ node.uniqueID ] = {} );\n\n\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\tdiff = nodeIndex && cache[ 2 ];\n\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[ nodeIndex ];\n\n\t\t\t\t\t\t\twhile ( ( node = ++nodeIndex && node && node[ dir ] ||\n\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n\t\t\t\t\t\t\t\t( diff = nodeIndex = 0 ) || start.pop() ) ) {\n\n\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n\t\t\t\t\t\t\t\tif ( node.nodeType === 1 && ++diff && node === elem ) {\n\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, nodeIndex, diff ];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Use previously-cached element index if available\n\t\t\t\t\t\t\tif ( useCache ) {\n\n\t\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\touterCache = node[ expando ] || ( node[ expando ] = {} );\n\n\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t( outerCache[ node.uniqueID ] = {} );\n\n\t\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\t\tdiff = nodeIndex;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// xml :nth-child(...)\n\t\t\t\t\t\t\t// or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\t\t\t\t\t\t\tif ( diff === false ) {\n\n\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n\t\t\t\t\t\t\t\twhile ( ( node = ++nodeIndex && node && node[ dir ] ||\n\t\t\t\t\t\t\t\t\t( diff = nodeIndex = 0 ) || start.pop() ) ) {\n\n\t\t\t\t\t\t\t\t\tif ( ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) &&\n\t\t\t\t\t\t\t\t\t\t++diff ) {\n\n\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n\t\t\t\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t\t\t\touterCache = node[ expando ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t( node[ expando ] = {} );\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t( outerCache[ node.uniqueID ] = {} );\n\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, diff ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ( node === elem ) {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n\t\t\t\t\t\tdiff -= last;\n\t\t\t\t\t\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t},\n\n\t\t\"PSEUDO\": function( pseudo, argument ) {\n\n\t\t\t// pseudo-class names are case-insensitive\n\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes\n\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n\t\t\t// Remember that setFilters inherits from pseudos\n\t\t\tvar args,\n\t\t\t\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n\t\t\t\t\tSizzle.error( \"unsupported pseudo: \" + pseudo );\n\n\t\t\t// The user may use createPseudo to indicate that\n\t\t\t// arguments are needed to create the filter function\n\t\t\t// just as Sizzle does\n\t\t\tif ( fn[ expando ] ) {\n\t\t\t\treturn fn( argument );\n\t\t\t}\n\n\t\t\t// But maintain support for old signatures\n\t\t\tif ( fn.length > 1 ) {\n\t\t\t\targs = [ pseudo, pseudo, \"\", argument ];\n\t\t\t\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n\t\t\t\t\tmarkFunction( function( seed, matches ) {\n\t\t\t\t\t\tvar idx,\n\t\t\t\t\t\t\tmatched = fn( seed, argument ),\n\t\t\t\t\t\t\ti = matched.length;\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tidx = indexOf( seed, matched[ i ] );\n\t\t\t\t\t\t\tseed[ idx ] = !( matches[ idx ] = matched[ i ] );\n\t\t\t\t\t\t}\n\t\t\t\t\t} ) :\n\t\t\t\t\tfunction( elem ) {\n\t\t\t\t\t\treturn fn( elem, 0, args );\n\t\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn fn;\n\t\t}\n\t},\n\n\tpseudos: {\n\n\t\t// Potentially complex pseudos\n\t\t\"not\": markFunction( function( selector ) {\n\n\t\t\t// Trim the selector passed to compile\n\t\t\t// to avoid treating leading and trailing\n\t\t\t// spaces as combinators\n\t\t\tvar input = [],\n\t\t\t\tresults = [],\n\t\t\t\tmatcher = compile( selector.replace( rtrim, \"$1\" ) );\n\n\t\t\treturn matcher[ expando ] ?\n\t\t\t\tmarkFunction( function( seed, matches, _context, xml ) {\n\t\t\t\t\tvar elem,\n\t\t\t\t\t\tunmatched = matcher( seed, null, xml, [] ),\n\t\t\t\t\t\ti = seed.length;\n\n\t\t\t\t\t// Match elements unmatched by `matcher`\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( ( elem = unmatched[ i ] ) ) {\n\t\t\t\t\t\t\tseed[ i ] = !( matches[ i ] = elem );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} ) :\n\t\t\t\tfunction( elem, _context, xml ) {\n\t\t\t\t\tinput[ 0 ] = elem;\n\t\t\t\t\tmatcher( input, null, xml, results );\n\n\t\t\t\t\t// Don't keep the element (issue #299)\n\t\t\t\t\tinput[ 0 ] = null;\n\t\t\t\t\treturn !results.pop();\n\t\t\t\t};\n\t\t} ),\n\n\t\t\"has\": markFunction( function( selector ) {\n\t\t\treturn function( elem ) {\n\t\t\t\treturn Sizzle( selector, elem ).length > 0;\n\t\t\t};\n\t\t} ),\n\n\t\t\"contains\": markFunction( function( text ) {\n\t\t\ttext = text.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;\n\t\t\t};\n\t\t} ),\n\n\t\t// \"Whether an element is represented by a :lang() selector\n\t\t// is based solely on the element's language value\n\t\t// being equal to the identifier C,\n\t\t// or beginning with the identifier C immediately followed by \"-\".\n\t\t// The matching of C against the element's language value is performed case-insensitively.\n\t\t// The identifier C does not have to be a valid language name.\"\n\t\t// http://www.w3.org/TR/selectors/#lang-pseudo\n\t\t\"lang\": markFunction( function( lang ) {\n\n\t\t\t// lang value must be a valid identifier\n\t\t\tif ( !ridentifier.test( lang || \"\" ) ) {\n\t\t\t\tSizzle.error( \"unsupported lang: \" + lang );\n\t\t\t}\n\t\t\tlang = lang.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn function( elem ) {\n\t\t\t\tvar elemLang;\n\t\t\t\tdo {\n\t\t\t\t\tif ( ( elemLang = documentIsHTML ?\n\t\t\t\t\t\telem.lang :\n\t\t\t\t\t\telem.getAttribute( \"xml:lang\" ) || elem.getAttribute( \"lang\" ) ) ) {\n\n\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n\t\t\t\t\t}\n\t\t\t\t} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );\n\t\t\t\treturn false;\n\t\t\t};\n\t\t} ),\n\n\t\t// Miscellaneous\n\t\t\"target\": function( elem ) {\n\t\t\tvar hash = window.location && window.location.hash;\n\t\t\treturn hash && hash.slice( 1 ) === elem.id;\n\t\t},\n\n\t\t\"root\": function( elem ) {\n\t\t\treturn elem === docElem;\n\t\t},\n\n\t\t\"focus\": function( elem ) {\n\t\t\treturn elem === document.activeElement &&\n\t\t\t\t( !document.hasFocus || document.hasFocus() ) &&\n\t\t\t\t!!( elem.type || elem.href || ~elem.tabIndex );\n\t\t},\n\n\t\t// Boolean properties\n\t\t\"enabled\": createDisabledPseudo( false ),\n\t\t\"disabled\": createDisabledPseudo( true ),\n\n\t\t\"checked\": function( elem ) {\n\n\t\t\t// In CSS3, :checked should return both checked and selected elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\tvar nodeName = elem.nodeName.toLowerCase();\n\t\t\treturn ( nodeName === \"input\" && !!elem.checked ) ||\n\t\t\t\t( nodeName === \"option\" && !!elem.selected );\n\t\t},\n\n\t\t\"selected\": function( elem ) {\n\n\t\t\t// Accessing this property makes selected-by-default\n\t\t\t// options in Safari work properly\n\t\t\tif ( elem.parentNode ) {\n\t\t\t\t// eslint-disable-next-line no-unused-expressions\n\t\t\t\telem.parentNode.selectedIndex;\n\t\t\t}\n\n\t\t\treturn elem.selected === true;\n\t\t},\n\n\t\t// Contents\n\t\t\"empty\": function( elem ) {\n\n\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo\n\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\n\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tif ( elem.nodeType < 6 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\t\"parent\": function( elem ) {\n\t\t\treturn !Expr.pseudos[ \"empty\" ]( elem );\n\t\t},\n\n\t\t// Element/input types\n\t\t\"header\": function( elem ) {\n\t\t\treturn rheader.test( elem.nodeName );\n\t\t},\n\n\t\t\"input\": function( elem ) {\n\t\t\treturn rinputs.test( elem.nodeName );\n\t\t},\n\n\t\t\"button\": function( elem ) {\n\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\treturn name === \"input\" && elem.type === \"button\" || name === \"button\";\n\t\t},\n\n\t\t\"text\": function( elem ) {\n\t\t\tvar attr;\n\t\t\treturn elem.nodeName.toLowerCase() === \"input\" &&\n\t\t\t\telem.type === \"text\" &&\n\n\t\t\t\t// Support: IE<8\n\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\n\t\t\t\t( ( attr = elem.getAttribute( \"type\" ) ) == null ||\n\t\t\t\t\tattr.toLowerCase() === \"text\" );\n\t\t},\n\n\t\t// Position-in-collection\n\t\t\"first\": createPositionalPseudo( function() {\n\t\t\treturn [ 0 ];\n\t\t} ),\n\n\t\t\"last\": createPositionalPseudo( function( _matchIndexes, length ) {\n\t\t\treturn [ length - 1 ];\n\t\t} ),\n\n\t\t\"eq\": createPositionalPseudo( function( _matchIndexes, length, argument ) {\n\t\t\treturn [ argument < 0 ? argument + length : argument ];\n\t\t} ),\n\n\t\t\"even\": createPositionalPseudo( function( matchIndexes, length ) {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} ),\n\n\t\t\"odd\": createPositionalPseudo( function( matchIndexes, length ) {\n\t\t\tvar i = 1;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} ),\n\n\t\t\"lt\": createPositionalPseudo( function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ?\n\t\t\t\targument + length :\n\t\t\t\targument > length ?\n\t\t\t\t\tlength :\n\t\t\t\t\targument;\n\t\t\tfor ( ; --i >= 0; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} ),\n\n\t\t\"gt\": createPositionalPseudo( function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; ++i < length; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} )\n\t}\n};\n\nExpr.pseudos[ \"nth\" ] = Expr.pseudos[ \"eq\" ];\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n\tExpr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n\tExpr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\ntokenize = Sizzle.tokenize = function( selector, parseOnly ) {\n\tvar matched, match, tokens, type,\n\t\tsoFar, groups, preFilters,\n\t\tcached = tokenCache[ selector + \" \" ];\n\n\tif ( cached ) {\n\t\treturn parseOnly ? 0 : cached.slice( 0 );\n\t}\n\n\tsoFar = selector;\n\tgroups = [];\n\tpreFilters = Expr.preFilter;\n\n\twhile ( soFar ) {\n\n\t\t// Comma and first run\n\t\tif ( !matched || ( match = rcomma.exec( soFar ) ) ) {\n\t\t\tif ( match ) {\n\n\t\t\t\t// Don't consume trailing commas as valid\n\t\t\t\tsoFar = soFar.slice( match[ 0 ].length ) || soFar;\n\t\t\t}\n\t\t\tgroups.push( ( tokens = [] ) );\n\t\t}\n\n\t\tmatched = false;\n\n\t\t// Combinators\n\t\tif ( ( match = rcombinators.exec( soFar ) ) ) {\n\t\t\tmatched = match.shift();\n\t\t\ttokens.push( {\n\t\t\t\tvalue: matched,\n\n\t\t\t\t// Cast descendant combinators to space\n\t\t\t\ttype: match[ 0 ].replace( rtrim, \" \" )\n\t\t\t} );\n\t\t\tsoFar = soFar.slice( matched.length );\n\t\t}\n\n\t\t// Filters\n\t\tfor ( type in Expr.filter ) {\n\t\t\tif ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||\n\t\t\t\t( match = preFilters[ type ]( match ) ) ) ) {\n\t\t\t\tmatched = match.shift();\n\t\t\t\ttokens.push( {\n\t\t\t\t\tvalue: matched,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tmatches: match\n\t\t\t\t} );\n\t\t\t\tsoFar = soFar.slice( matched.length );\n\t\t\t}\n\t\t}\n\n\t\tif ( !matched ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Return the length of the invalid excess\n\t// if we're just parsing\n\t// Otherwise, throw an error or return tokens\n\treturn parseOnly ?\n\t\tsoFar.length :\n\t\tsoFar ?\n\t\t\tSizzle.error( selector ) :\n\n\t\t\t// Cache the tokens\n\t\t\ttokenCache( selector, groups ).slice( 0 );\n};\n\nfunction toSelector( tokens ) {\n\tvar i = 0,\n\t\tlen = tokens.length,\n\t\tselector = \"\";\n\tfor ( ; i < len; i++ ) {\n\t\tselector += tokens[ i ].value;\n\t}\n\treturn selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n\tvar dir = combinator.dir,\n\t\tskip = combinator.next,\n\t\tkey = skip || dir,\n\t\tcheckNonElements = base && key === \"parentNode\",\n\t\tdoneName = done++;\n\n\treturn combinator.first ?\n\n\t\t// Check against closest ancestor/preceding element\n\t\tfunction( elem, context, xml ) {\n\t\t\twhile ( ( elem = elem[ dir ] ) ) {\n\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\treturn matcher( elem, context, xml );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t} :\n\n\t\t// Check against all ancestor/preceding elements\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar oldCache, uniqueCache, outerCache,\n\t\t\t\tnewCache = [ dirruns, doneName ];\n\n\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n\t\t\tif ( xml ) {\n\t\t\t\twhile ( ( elem = elem[ dir ] ) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile ( ( elem = elem[ dir ] ) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\touterCache = elem[ expando ] || ( elem[ expando ] = {} );\n\n\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\tuniqueCache = outerCache[ elem.uniqueID ] ||\n\t\t\t\t\t\t\t( outerCache[ elem.uniqueID ] = {} );\n\n\t\t\t\t\t\tif ( skip && skip === elem.nodeName.toLowerCase() ) {\n\t\t\t\t\t\t\telem = elem[ dir ] || elem;\n\t\t\t\t\t\t} else if ( ( oldCache = uniqueCache[ key ] ) &&\n\t\t\t\t\t\t\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\n\t\t\t\t\t\t\treturn ( newCache[ 2 ] = oldCache[ 2 ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\n\t\t\t\t\t\t\tuniqueCache[ key ] = newCache;\n\n\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\n\t\t\t\t\t\t\tif ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n}\n\nfunction elementMatcher( matchers ) {\n\treturn matchers.length > 1 ?\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar i = matchers.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( !matchers[ i ]( elem, context, xml ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} :\n\t\tmatchers[ 0 ];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n\tvar i = 0,\n\t\tlen = contexts.length;\n\tfor ( ; i < len; i++ ) {\n\t\tSizzle( selector, contexts[ i ], results );\n\t}\n\treturn results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n\tvar elem,\n\t\tnewUnmatched = [],\n\t\ti = 0,\n\t\tlen = unmatched.length,\n\t\tmapped = map != null;\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( ( elem = unmatched[ i ] ) ) {\n\t\t\tif ( !filter || filter( elem, context, xml ) ) {\n\t\t\t\tnewUnmatched.push( elem );\n\t\t\t\tif ( mapped ) {\n\t\t\t\t\tmap.push( i );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n\tif ( postFilter && !postFilter[ expando ] ) {\n\t\tpostFilter = setMatcher( postFilter );\n\t}\n\tif ( postFinder && !postFinder[ expando ] ) {\n\t\tpostFinder = setMatcher( postFinder, postSelector );\n\t}\n\treturn markFunction( function( seed, results, context, xml ) {\n\t\tvar temp, i, elem,\n\t\t\tpreMap = [],\n\t\t\tpostMap = [],\n\t\t\tpreexisting = results.length,\n\n\t\t\t// Get initial elements from seed or context\n\t\t\telems = seed || multipleContexts(\n\t\t\t\tselector || \"*\",\n\t\t\t\tcontext.nodeType ? [ context ] : context,\n\t\t\t\t[]\n\t\t\t),\n\n\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n\t\t\tmatcherIn = preFilter && ( seed || !selector ) ?\n\t\t\t\tcondense( elems, preMap, preFilter, context, xml ) :\n\t\t\t\telems,\n\n\t\t\tmatcherOut = matcher ?\n\n\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n\t\t\t\tpostFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n\t\t\t\t\t// ...intermediate processing is necessary\n\t\t\t\t\t[] :\n\n\t\t\t\t\t// ...otherwise use results directly\n\t\t\t\t\tresults :\n\t\t\t\tmatcherIn;\n\n\t\t// Find primary matches\n\t\tif ( matcher ) {\n\t\t\tmatcher( matcherIn, matcherOut, context, xml );\n\t\t}\n\n\t\t// Apply postFilter\n\t\tif ( postFilter ) {\n\t\t\ttemp = condense( matcherOut, postMap );\n\t\t\tpostFilter( temp, [], context, xml );\n\n\t\t\t// Un-match failing elements by moving them back to matcherIn\n\t\t\ti = temp.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( ( elem = temp[ i ] ) ) {\n\t\t\t\t\tmatcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( seed ) {\n\t\t\tif ( postFinder || preFilter ) {\n\t\t\t\tif ( postFinder ) {\n\n\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n\t\t\t\t\ttemp = [];\n\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( ( elem = matcherOut[ i ] ) ) {\n\n\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n\t\t\t\t\t\t\ttemp.push( ( matcherIn[ i ] = elem ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpostFinder( null, ( matcherOut = [] ), temp, xml );\n\t\t\t\t}\n\n\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n\t\t\t\ti = matcherOut.length;\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\tif ( ( elem = matcherOut[ i ] ) &&\n\t\t\t\t\t\t( temp = postFinder ? indexOf( seed, elem ) : preMap[ i ] ) > -1 ) {\n\n\t\t\t\t\t\tseed[ temp ] = !( results[ temp ] = elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Add elements to results, through postFinder if defined\n\t\t} else {\n\t\t\tmatcherOut = condense(\n\t\t\t\tmatcherOut === results ?\n\t\t\t\t\tmatcherOut.splice( preexisting, matcherOut.length ) :\n\t\t\t\t\tmatcherOut\n\t\t\t);\n\t\t\tif ( postFinder ) {\n\t\t\t\tpostFinder( null, results, matcherOut, xml );\n\t\t\t} else {\n\t\t\t\tpush.apply( results, matcherOut );\n\t\t\t}\n\t\t}\n\t} );\n}\n\nfunction matcherFromTokens( tokens ) {\n\tvar checkContext, matcher, j,\n\t\tlen = tokens.length,\n\t\tleadingRelative = Expr.relative[ tokens[ 0 ].type ],\n\t\timplicitRelative = leadingRelative || Expr.relative[ \" \" ],\n\t\ti = leadingRelative ? 1 : 0,\n\n\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n\t\tmatchContext = addCombinator( function( elem ) {\n\t\t\treturn elem === checkContext;\n\t\t}, implicitRelative, true ),\n\t\tmatchAnyContext = addCombinator( function( elem ) {\n\t\t\treturn indexOf( checkContext, elem ) > -1;\n\t\t}, implicitRelative, true ),\n\t\tmatchers = [ function( elem, context, xml ) {\n\t\t\tvar ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\n\t\t\t\t( checkContext = context ).nodeType ?\n\t\t\t\t\tmatchContext( elem, context, xml ) :\n\t\t\t\t\tmatchAnyContext( elem, context, xml ) );\n\n\t\t\t// Avoid hanging onto element (issue #299)\n\t\t\tcheckContext = null;\n\t\t\treturn ret;\n\t\t} ];\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {\n\t\t\tmatchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];\n\t\t} else {\n\t\t\tmatcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );\n\n\t\t\t// Return special upon seeing a positional matcher\n\t\t\tif ( matcher[ expando ] ) {\n\n\t\t\t\t// Find the next relative operator (if any) for proper handling\n\t\t\t\tj = ++i;\n\t\t\t\tfor ( ; j < len; j++ ) {\n\t\t\t\t\tif ( Expr.relative[ tokens[ j ].type ] ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn setMatcher(\n\t\t\t\t\ti > 1 && elementMatcher( matchers ),\n\t\t\t\t\ti > 1 && toSelector(\n\n\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n\t\t\t\t\ttokens\n\t\t\t\t\t\t.slice( 0, i - 1 )\n\t\t\t\t\t\t.concat( { value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" } )\n\t\t\t\t\t).replace( rtrim, \"$1\" ),\n\t\t\t\t\tmatcher,\n\t\t\t\t\ti < j && matcherFromTokens( tokens.slice( i, j ) ),\n\t\t\t\t\tj < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),\n\t\t\t\t\tj < len && toSelector( tokens )\n\t\t\t\t);\n\t\t\t}\n\t\t\tmatchers.push( matcher );\n\t\t}\n\t}\n\n\treturn elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n\tvar bySet = setMatchers.length > 0,\n\t\tbyElement = elementMatchers.length > 0,\n\t\tsuperMatcher = function( seed, context, xml, results, outermost ) {\n\t\t\tvar elem, j, matcher,\n\t\t\t\tmatchedCount = 0,\n\t\t\t\ti = \"0\",\n\t\t\t\tunmatched = seed && [],\n\t\t\t\tsetMatched = [],\n\t\t\t\tcontextBackup = outermostContext,\n\n\t\t\t\t// We must always have either seed elements or outermost context\n\t\t\t\telems = seed || byElement && Expr.find[ \"TAG\" ]( \"*\", outermost ),\n\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n\t\t\t\tdirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),\n\t\t\t\tlen = elems.length;\n\n\t\t\tif ( outermost ) {\n\n\t\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t\t// two documents; shallow comparisons work.\n\t\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\t\toutermostContext = context == document || context || outermost;\n\t\t\t}\n\n\t\t\t// Add elements passing elementMatchers directly to results\n\t\t\t// Support: IE<9, Safari\n\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\n\t\t\tfor ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {\n\t\t\t\tif ( byElement && elem ) {\n\t\t\t\t\tj = 0;\n\n\t\t\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t\t\t// two documents; shallow comparisons work.\n\t\t\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\t\t\tif ( !context && elem.ownerDocument != document ) {\n\t\t\t\t\t\tsetDocument( elem );\n\t\t\t\t\t\txml = !documentIsHTML;\n\t\t\t\t\t}\n\t\t\t\t\twhile ( ( matcher = elementMatchers[ j++ ] ) ) {\n\t\t\t\t\t\tif ( matcher( elem, context || document, xml ) ) {\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( outermost ) {\n\t\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Track unmatched elements for set filters\n\t\t\t\tif ( bySet ) {\n\n\t\t\t\t\t// They will have gone through all possible matchers\n\t\t\t\t\tif ( ( elem = !matcher && elem ) ) {\n\t\t\t\t\t\tmatchedCount--;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Lengthen the array for every element, matched or not\n\t\t\t\t\tif ( seed ) {\n\t\t\t\t\t\tunmatched.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// `i` is now the count of elements visited above, and adding it to `matchedCount`\n\t\t\t// makes the latter nonnegative.\n\t\t\tmatchedCount += i;\n\n\t\t\t// Apply set filters to unmatched elements\n\t\t\t// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n\t\t\t// equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n\t\t\t// no element matchers and no seed.\n\t\t\t// Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n\t\t\t// case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n\t\t\t// numerically zero.\n\t\t\tif ( bySet && i !== matchedCount ) {\n\t\t\t\tj = 0;\n\t\t\t\twhile ( ( matcher = setMatchers[ j++ ] ) ) {\n\t\t\t\t\tmatcher( unmatched, setMatched, context, xml );\n\t\t\t\t}\n\n\t\t\t\tif ( seed ) {\n\n\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n\t\t\t\t\tif ( matchedCount > 0 ) {\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tif ( !( unmatched[ i ] || setMatched[ i ] ) ) {\n\t\t\t\t\t\t\t\tsetMatched[ i ] = pop.call( results );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Discard index placeholder values to get only actual matches\n\t\t\t\t\tsetMatched = condense( setMatched );\n\t\t\t\t}\n\n\t\t\t\t// Add matches to results\n\t\t\t\tpush.apply( results, setMatched );\n\n\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n\t\t\t\tif ( outermost && !seed && setMatched.length > 0 &&\n\t\t\t\t\t( matchedCount + setMatchers.length ) > 1 ) {\n\n\t\t\t\t\tSizzle.uniqueSort( results );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Override manipulation of globals by nested matchers\n\t\t\tif ( outermost ) {\n\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\toutermostContext = contextBackup;\n\t\t\t}\n\n\t\t\treturn unmatched;\n\t\t};\n\n\treturn bySet ?\n\t\tmarkFunction( superMatcher ) :\n\t\tsuperMatcher;\n}\n\ncompile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {\n\tvar i,\n\t\tsetMatchers = [],\n\t\telementMatchers = [],\n\t\tcached = compilerCache[ selector + \" \" ];\n\n\tif ( !cached ) {\n\n\t\t// Generate a function of recursive functions that can be used to check each element\n\t\tif ( !match ) {\n\t\t\tmatch = tokenize( selector );\n\t\t}\n\t\ti = match.length;\n\t\twhile ( i-- ) {\n\t\t\tcached = matcherFromTokens( match[ i ] );\n\t\t\tif ( cached[ expando ] ) {\n\t\t\t\tsetMatchers.push( cached );\n\t\t\t} else {\n\t\t\t\telementMatchers.push( cached );\n\t\t\t}\n\t\t}\n\n\t\t// Cache the compiled function\n\t\tcached = compilerCache(\n\t\t\tselector,\n\t\t\tmatcherFromGroupMatchers( elementMatchers, setMatchers )\n\t\t);\n\n\t\t// Save selector and tokenization\n\t\tcached.selector = selector;\n\t}\n\treturn cached;\n};\n\n/**\n * A low-level selection function that works with Sizzle's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with Sizzle.compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nselect = Sizzle.select = function( selector, context, results, seed ) {\n\tvar i, tokens, token, type, find,\n\t\tcompiled = typeof selector === \"function\" && selector,\n\t\tmatch = !seed && tokenize( ( selector = compiled.selector || selector ) );\n\n\tresults = results || [];\n\n\t// Try to minimize operations if there is only one selector in the list and no seed\n\t// (the latter of which guarantees us context)\n\tif ( match.length === 1 ) {\n\n\t\t// Reduce context if the leading compound selector is an ID\n\t\ttokens = match[ 0 ] = match[ 0 ].slice( 0 );\n\t\tif ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === \"ID\" &&\n\t\t\tcontext.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {\n\n\t\t\tcontext = ( Expr.find[ \"ID\" ]( token.matches[ 0 ]\n\t\t\t\t.replace( runescape, funescape ), context ) || [] )[ 0 ];\n\t\t\tif ( !context ) {\n\t\t\t\treturn results;\n\n\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\n\t\t\t} else if ( compiled ) {\n\t\t\t\tcontext = context.parentNode;\n\t\t\t}\n\n\t\t\tselector = selector.slice( tokens.shift().value.length );\n\t\t}\n\n\t\t// Fetch a seed set for right-to-left matching\n\t\ti = matchExpr[ \"needsContext\" ].test( selector ) ? 0 : tokens.length;\n\t\twhile ( i-- ) {\n\t\t\ttoken = tokens[ i ];\n\n\t\t\t// Abort if we hit a combinator\n\t\t\tif ( Expr.relative[ ( type = token.type ) ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( ( find = Expr.find[ type ] ) ) {\n\n\t\t\t\t// Search, expanding context for leading sibling combinators\n\t\t\t\tif ( ( seed = find(\n\t\t\t\t\ttoken.matches[ 0 ].replace( runescape, funescape ),\n\t\t\t\t\trsibling.test( tokens[ 0 ].type ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext\n\t\t\t\t) ) ) {\n\n\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n\t\t\t\t\ttokens.splice( i, 1 );\n\t\t\t\t\tselector = seed.length && toSelector( tokens );\n\t\t\t\t\tif ( !selector ) {\n\t\t\t\t\t\tpush.apply( results, seed );\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Compile and execute a filtering function if one is not provided\n\t// Provide `match` to avoid retokenization if we modified the selector above\n\t( compiled || compile( selector, match ) )(\n\t\tseed,\n\t\tcontext,\n\t\t!documentIsHTML,\n\t\tresults,\n\t\t!context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n\t);\n\treturn results;\n};\n\n// One-time assignments\n\n// Sort stability\nsupport.sortStable = expando.split( \"\" ).sort( sortOrder ).join( \"\" ) === expando;\n\n// Support: Chrome 14-35+\n// Always assume duplicates if they aren't passed to the comparison function\nsupport.detectDuplicates = !!hasDuplicate;\n\n// Initialize against the default document\nsetDocument();\n\n// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n// Detached nodes confoundingly follow *each other*\nsupport.sortDetached = assert( function( el ) {\n\n\t// Should return 1, but returns 4 (following)\n\treturn el.compareDocumentPosition( document.createElement( \"fieldset\" ) ) & 1;\n} );\n\n// Support: IE<8\n// Prevent attribute/property \"interpolation\"\n// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\nif ( !assert( function( el ) {\n\tel.innerHTML = \"<a href='#'></a>\";\n\treturn el.firstChild.getAttribute( \"href\" ) === \"#\";\n} ) ) {\n\taddHandle( \"type|href|height|width\", function( elem, name, isXML ) {\n\t\tif ( !isXML ) {\n\t\t\treturn elem.getAttribute( name, name.toLowerCase() === \"type\" ? 1 : 2 );\n\t\t}\n\t} );\n}\n\n// Support: IE<9\n// Use defaultValue in place of getAttribute(\"value\")\nif ( !support.attributes || !assert( function( el ) {\n\tel.innerHTML = \"<input/>\";\n\tel.firstChild.setAttribute( \"value\", \"\" );\n\treturn el.firstChild.getAttribute( \"value\" ) === \"\";\n} ) ) {\n\taddHandle( \"value\", function( elem, _name, isXML ) {\n\t\tif ( !isXML && elem.nodeName.toLowerCase() === \"input\" ) {\n\t\t\treturn elem.defaultValue;\n\t\t}\n\t} );\n}\n\n// Support: IE<9\n// Use getAttributeNode to fetch booleans when getAttribute lies\nif ( !assert( function( el ) {\n\treturn el.getAttribute( \"disabled\" ) == null;\n} ) ) {\n\taddHandle( booleans, function( elem, name, isXML ) {\n\t\tvar val;\n\t\tif ( !isXML ) {\n\t\t\treturn elem[ name ] === true ? name.toLowerCase() :\n\t\t\t\t( val = elem.getAttributeNode( name ) ) && val.specified ?\n\t\t\t\t\tval.value :\n\t\t\t\t\tnull;\n\t\t}\n\t} );\n}\n\nreturn Sizzle;\n\n} )( window );\n\n\n\njQuery.find = Sizzle;\njQuery.expr = Sizzle.selectors;\n\n// Deprecated\njQuery.expr[ \":\" ] = jQuery.expr.pseudos;\njQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\njQuery.text = Sizzle.getText;\njQuery.isXMLDoc = Sizzle.isXML;\njQuery.contains = Sizzle.contains;\njQuery.escapeSelector = Sizzle.escape;\n\n\n\n\nvar dir = function( elem, dir, until ) {\n\tvar matched = [],\n\t\ttruncate = until !== undefined;\n\n\twhile ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {\n\t\tif ( elem.nodeType === 1 ) {\n\t\t\tif ( truncate && jQuery( elem ).is( until ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmatched.push( elem );\n\t\t}\n\t}\n\treturn matched;\n};\n\n\nvar siblings = function( n, elem ) {\n\tvar matched = [];\n\n\tfor ( ; n; n = n.nextSibling ) {\n\t\tif ( n.nodeType === 1 && n !== elem ) {\n\t\t\tmatched.push( n );\n\t\t}\n\t}\n\n\treturn matched;\n};\n\n\nvar rneedsContext = jQuery.expr.match.needsContext;\n\n\n\nfunction nodeName( elem, name ) {\n\n\treturn elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\n}\nvar rsingleTag = ( /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i );\n\n\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n\tif ( isFunction( qualifier ) ) {\n\t\treturn jQuery.grep( elements, function( elem, i ) {\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n\t\t} );\n\t}\n\n\t// Single element\n\tif ( qualifier.nodeType ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( elem === qualifier ) !== not;\n\t\t} );\n\t}\n\n\t// Arraylike of elements (jQuery, arguments, Array)\n\tif ( typeof qualifier !== \"string\" ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n\t\t} );\n\t}\n\n\t// Filtered directly for both simple and complex selectors\n\treturn jQuery.filter( qualifier, elements, not );\n}\n\njQuery.filter = function( expr, elems, not ) {\n\tvar elem = elems[ 0 ];\n\n\tif ( not ) {\n\t\texpr = \":not(\" + expr + \")\";\n\t}\n\n\tif ( elems.length === 1 && elem.nodeType === 1 ) {\n\t\treturn jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];\n\t}\n\n\treturn jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n\t\treturn elem.nodeType === 1;\n\t} ) );\n};\n\njQuery.fn.extend( {\n\tfind: function( selector ) {\n\t\tvar i, ret,\n\t\t\tlen = this.length,\n\t\t\tself = this;\n\n\t\tif ( typeof selector !== \"string\" ) {\n\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ) );\n\t\t}\n\n\t\tret = this.pushStack( [] );\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[ i ], ret );\n\t\t}\n\n\t\treturn len > 1 ? jQuery.uniqueSort( ret ) : ret;\n\t},\n\tfilter: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], false ) );\n\t},\n\tnot: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], true ) );\n\t},\n\tis: function( selector ) {\n\t\treturn !!winnow(\n\t\t\tthis,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\n\t\t\t\tjQuery( selector ) :\n\t\t\t\tselector || [],\n\t\t\tfalse\n\t\t).length;\n\t}\n} );\n\n\n// Initialize a jQuery object\n\n\n// A central reference to the root jQuery(document)\nvar rootjQuery,\n\n\t// A simple way to check for HTML strings\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (trac-9521)\n\t// Strict HTML recognition (trac-11290: must start with <)\n\t// Shortcut simple #id case for speed\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n\n\tinit = jQuery.fn.init = function( selector, context, root ) {\n\t\tvar match, elem;\n\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\t\tif ( !selector ) {\n\t\t\treturn this;\n\t\t}\n\n\t\t// Method init() accepts an alternate rootjQuery\n\t\t// so migrate can support jQuery.sub (gh-2101)\n\t\troot = root || rootjQuery;\n\n\t\t// Handle HTML strings\n\t\tif ( typeof selector === \"string\" ) {\n\t\t\tif ( selector[ 0 ] === \"<\" &&\n\t\t\t\tselector[ selector.length - 1 ] === \">\" &&\n\t\t\t\tselector.length >= 3 ) {\n\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\t\t\tmatch = [ null, selector, null ];\n\n\t\t\t} else {\n\t\t\t\tmatch = rquickExpr.exec( selector );\n\t\t\t}\n\n\t\t\t// Match html or make sure no context is specified for #id\n\t\t\tif ( match && ( match[ 1 ] || !context ) ) {\n\n\t\t\t\t// HANDLE: $(html) -> $(array)\n\t\t\t\tif ( match[ 1 ] ) {\n\t\t\t\t\tcontext = context instanceof jQuery ? context[ 0 ] : context;\n\n\t\t\t\t\t// Option to run scripts is true for back-compat\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\n\t\t\t\t\tjQuery.merge( this, jQuery.parseHTML(\n\t\t\t\t\t\tmatch[ 1 ],\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t) );\n\n\t\t\t\t\t// HANDLE: $(html, props)\n\t\t\t\t\tif ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {\n\t\t\t\t\t\tfor ( match in context ) {\n\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n\t\t\t\t\t\t\tif ( isFunction( this[ match ] ) ) {\n\t\t\t\t\t\t\t\tthis[ match ]( context[ match ] );\n\n\t\t\t\t\t\t\t// ...and otherwise set as attributes\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.attr( match, context[ match ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t// HANDLE: $(#id)\n\t\t\t\t} else {\n\t\t\t\t\telem = document.getElementById( match[ 2 ] );\n\n\t\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t\t// Inject the element directly into the jQuery object\n\t\t\t\t\t\tthis[ 0 ] = elem;\n\t\t\t\t\t\tthis.length = 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t// HANDLE: $(expr, $(...))\n\t\t\t} else if ( !context || context.jquery ) {\n\t\t\t\treturn ( context || root ).find( selector );\n\n\t\t\t// HANDLE: $(expr, context)\n\t\t\t// (which is just equivalent to: $(context).find(expr)\n\t\t\t} else {\n\t\t\t\treturn this.constructor( context ).find( selector );\n\t\t\t}\n\n\t\t// HANDLE: $(DOMElement)\n\t\t} else if ( selector.nodeType ) {\n\t\t\tthis[ 0 ] = selector;\n\t\t\tthis.length = 1;\n\t\t\treturn this;\n\n\t\t// HANDLE: $(function)\n\t\t// Shortcut for document ready\n\t\t} else if ( isFunction( selector ) ) {\n\t\t\treturn root.ready !== undefined ?\n\t\t\t\troot.ready( selector ) :\n\n\t\t\t\t// Execute immediately if ready is not present\n\t\t\t\tselector( jQuery );\n\t\t}\n\n\t\treturn jQuery.makeArray( selector, this );\n\t};\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery( document );\n\n\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\n\t// Methods guaranteed to produce a unique set when starting from a unique set\n\tguaranteedUnique = {\n\t\tchildren: true,\n\t\tcontents: true,\n\t\tnext: true,\n\t\tprev: true\n\t};\n\njQuery.fn.extend( {\n\thas: function( target ) {\n\t\tvar targets = jQuery( target, this ),\n\t\t\tl = targets.length;\n\n\t\treturn this.filter( function() {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tif ( jQuery.contains( this, targets[ i ] ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\tclosest: function( selectors, context ) {\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\tl = this.length,\n\t\t\tmatched = [],\n\t\t\ttargets = typeof selectors !== \"string\" && jQuery( selectors );\n\n\t\t// Positional selectors never match, since there's no _selection_ context\n\t\tif ( !rneedsContext.test( selectors ) ) {\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tfor ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {\n\n\t\t\t\t\t// Always skip document fragments\n\t\t\t\t\tif ( cur.nodeType < 11 && ( targets ?\n\t\t\t\t\t\ttargets.index( cur ) > -1 :\n\n\t\t\t\t\t\t// Don't pass non-elements to Sizzle\n\t\t\t\t\t\tcur.nodeType === 1 &&\n\t\t\t\t\t\t\tjQuery.find.matchesSelector( cur, selectors ) ) ) {\n\n\t\t\t\t\t\tmatched.push( cur );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );\n\t},\n\n\t// Determine the position of an element within the set\n\tindex: function( elem ) {\n\n\t\t// No argument, return index in parent\n\t\tif ( !elem ) {\n\t\t\treturn ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;\n\t\t}\n\n\t\t// Index in selector\n\t\tif ( typeof elem === \"string\" ) {\n\t\t\treturn indexOf.call( jQuery( elem ), this[ 0 ] );\n\t\t}\n\n\t\t// Locate the position of the desired element\n\t\treturn indexOf.call( this,\n\n\t\t\t// If it receives a jQuery object, the first element is used\n\t\t\telem.jquery ? elem[ 0 ] : elem\n\t\t);\n\t},\n\n\tadd: function( selector, context ) {\n\t\treturn this.pushStack(\n\t\t\tjQuery.uniqueSort(\n\t\t\t\tjQuery.merge( this.get(), jQuery( selector, context ) )\n\t\t\t)\n\t\t);\n\t},\n\n\taddBack: function( selector ) {\n\t\treturn this.add( selector == null ?\n\t\t\tthis.prevObject : this.prevObject.filter( selector )\n\t\t);\n\t}\n} );\n\nfunction sibling( cur, dir ) {\n\twhile ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}\n\treturn cur;\n}\n\njQuery.each( {\n\tparent: function( elem ) {\n\t\tvar parent = elem.parentNode;\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t},\n\tparents: function( elem ) {\n\t\treturn dir( elem, \"parentNode\" );\n\t},\n\tparentsUntil: function( elem, _i, until ) {\n\t\treturn dir( elem, \"parentNode\", until );\n\t},\n\tnext: function( elem ) {\n\t\treturn sibling( elem, \"nextSibling\" );\n\t},\n\tprev: function( elem ) {\n\t\treturn sibling( elem, \"previousSibling\" );\n\t},\n\tnextAll: function( elem ) {\n\t\treturn dir( elem, \"nextSibling\" );\n\t},\n\tprevAll: function( elem ) {\n\t\treturn dir( elem, \"previousSibling\" );\n\t},\n\tnextUntil: function( elem, _i, until ) {\n\t\treturn dir( elem, \"nextSibling\", until );\n\t},\n\tprevUntil: function( elem, _i, until ) {\n\t\treturn dir( elem, \"previousSibling\", until );\n\t},\n\tsiblings: function( elem ) {\n\t\treturn siblings( ( elem.parentNode || {} ).firstChild, elem );\n\t},\n\tchildren: function( elem ) {\n\t\treturn siblings( elem.firstChild );\n\t},\n\tcontents: function( elem ) {\n\t\tif ( elem.contentDocument != null &&\n\n\t\t\t// Support: IE 11+\n\t\t\t// <object> elements with no `data` attribute has an object\n\t\t\t// `contentDocument` with a `null` prototype.\n\t\t\tgetProto( elem.contentDocument ) ) {\n\n\t\t\treturn elem.contentDocument;\n\t\t}\n\n\t\t// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only\n\t\t// Treat the template element as a regular one in browsers that\n\t\t// don't support it.\n\t\tif ( nodeName( elem, \"template\" ) ) {\n\t\t\telem = elem.content || elem;\n\t\t}\n\n\t\treturn jQuery.merge( [], elem.childNodes );\n\t}\n}, function( name, fn ) {\n\tjQuery.fn[ name ] = function( until, selector ) {\n\t\tvar matched = jQuery.map( this, fn, until );\n\n\t\tif ( name.slice( -5 ) !== \"Until\" ) {\n\t\t\tselector = until;\n\t\t}\n\n\t\tif ( selector && typeof selector === \"string\" ) {\n\t\t\tmatched = jQuery.filter( selector, matched );\n\t\t}\n\n\t\tif ( this.length > 1 ) {\n\n\t\t\t// Remove duplicates\n\t\t\tif ( !guaranteedUnique[ name ] ) {\n\t\t\t\tjQuery.uniqueSort( matched );\n\t\t\t}\n\n\t\t\t// Reverse order for parents* and prev-derivatives\n\t\t\tif ( rparentsprev.test( name ) ) {\n\t\t\t\tmatched.reverse();\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched );\n\t};\n} );\nvar rnothtmlwhite = ( /[^\\x20\\t\\r\\n\\f]+/g );\n\n\n\n// Convert String-formatted options into Object-formatted ones\nfunction createOptions( options ) {\n\tvar object = {};\n\tjQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {\n\t\tobject[ flag ] = true;\n\t} );\n\treturn object;\n}\n\n/*\n * Create a callback list using the following parameters:\n *\n *\toptions: an optional list of space-separated options that will change how\n *\t\t\tthe callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * \"fired\" multiple times.\n *\n * Possible options:\n *\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n *\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n *\t\t\t\t\tvalues (like a Deferred)\n *\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n *\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\n *\n */\njQuery.Callbacks = function( options ) {\n\n\t// Convert options from String-formatted to Object-formatted if needed\n\t// (we check in cache first)\n\toptions = typeof options === \"string\" ?\n\t\tcreateOptions( options ) :\n\t\tjQuery.extend( {}, options );\n\n\tvar // Flag to know if list is currently firing\n\t\tfiring,\n\n\t\t// Last fire value for non-forgettable lists\n\t\tmemory,\n\n\t\t// Flag to know if list was already fired\n\t\tfired,\n\n\t\t// Flag to prevent firing\n\t\tlocked,\n\n\t\t// Actual callback list\n\t\tlist = [],\n\n\t\t// Queue of execution data for repeatable lists\n\t\tqueue = [],\n\n\t\t// Index of currently firing callback (modified by add/remove as needed)\n\t\tfiringIndex = -1,\n\n\t\t// Fire callbacks\n\t\tfire = function() {\n\n\t\t\t// Enforce single-firing\n\t\t\tlocked = locked || options.once;\n\n\t\t\t// Execute callbacks for all pending executions,\n\t\t\t// respecting firingIndex overrides and runtime changes\n\t\t\tfired = firing = true;\n\t\t\tfor ( ; queue.length; firingIndex = -1 ) {\n\t\t\t\tmemory = queue.shift();\n\t\t\t\twhile ( ++firingIndex < list.length ) {\n\n\t\t\t\t\t// Run callback and check for early termination\n\t\t\t\t\tif ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&\n\t\t\t\t\t\toptions.stopOnFalse ) {\n\n\t\t\t\t\t\t// Jump to end and forget the data so .add doesn't re-fire\n\t\t\t\t\t\tfiringIndex = list.length;\n\t\t\t\t\t\tmemory = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Forget the data if we're done with it\n\t\t\tif ( !options.memory ) {\n\t\t\t\tmemory = false;\n\t\t\t}\n\n\t\t\tfiring = false;\n\n\t\t\t// Clean up if we're done firing for good\n\t\t\tif ( locked ) {\n\n\t\t\t\t// Keep an empty list if we have data for future add calls\n\t\t\t\tif ( memory ) {\n\t\t\t\t\tlist = [];\n\n\t\t\t\t// Otherwise, this object is spent\n\t\t\t\t} else {\n\t\t\t\t\tlist = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Actual Callbacks object\n\t\tself = {\n\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function() {\n\t\t\t\tif ( list ) {\n\n\t\t\t\t\t// If we have memory from a past run, we should fire after adding\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfiringIndex = list.length - 1;\n\t\t\t\t\t\tqueue.push( memory );\n\t\t\t\t\t}\n\n\t\t\t\t\t( function add( args ) {\n\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {\n\t\t\t\t\t\t\tif ( isFunction( arg ) ) {\n\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {\n\t\t\t\t\t\t\t\t\tlist.push( arg );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if ( arg && arg.length && toType( arg ) !== \"string\" ) {\n\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd( arg );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t} )( arguments );\n\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function() {\n\t\t\t\tjQuery.each( arguments, function( _, arg ) {\n\t\t\t\t\tvar index;\n\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\n\t\t\t\t\t\tlist.splice( index, 1 );\n\n\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\tif ( index <= firingIndex ) {\n\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function( fn ) {\n\t\t\t\treturn fn ?\n\t\t\t\t\tjQuery.inArray( fn, list ) > -1 :\n\t\t\t\t\tlist.length > 0;\n\t\t\t},\n\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function() {\n\t\t\t\tif ( list ) {\n\t\t\t\t\tlist = [];\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Disable .fire and .add\n\t\t\t// Abort any current/pending executions\n\t\t\t// Clear all callbacks and values\n\t\t\tdisable: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tlist = memory = \"\";\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tdisabled: function() {\n\t\t\t\treturn !list;\n\t\t\t},\n\n\t\t\t// Disable .fire\n\t\t\t// Also disable .add unless we have memory (since it would have no effect)\n\t\t\t// Abort any pending executions\n\t\t\tlock: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tif ( !memory && !firing ) {\n\t\t\t\t\tlist = memory = \"\";\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tlocked: function() {\n\t\t\t\treturn !!locked;\n\t\t\t},\n\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function( context, args ) {\n\t\t\t\tif ( !locked ) {\n\t\t\t\t\targs = args || [];\n\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];\n\t\t\t\t\tqueue.push( args );\n\t\t\t\t\tif ( !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function() {\n\t\t\t\tself.fireWith( this, arguments );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function() {\n\t\t\t\treturn !!fired;\n\t\t\t}\n\t\t};\n\n\treturn self;\n};\n\n\nfunction Identity( v ) {\n\treturn v;\n}\nfunction Thrower( ex ) {\n\tthrow ex;\n}\n\nfunction adoptValue( value, resolve, reject, noValue ) {\n\tvar method;\n\n\ttry {\n\n\t\t// Check for promise aspect first to privilege synchronous behavior\n\t\tif ( value && isFunction( ( method = value.promise ) ) ) {\n\t\t\tmethod.call( value ).done( resolve ).fail( reject );\n\n\t\t// Other thenables\n\t\t} else if ( value && isFunction( ( method = value.then ) ) ) {\n\t\t\tmethod.call( value, resolve, reject );\n\n\t\t// Other non-thenables\n\t\t} else {\n\n\t\t\t// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:\n\t\t\t// * false: [ value ].slice( 0 ) => resolve( value )\n\t\t\t// * true: [ value ].slice( 1 ) => resolve()\n\t\t\tresolve.apply( undefined, [ value ].slice( noValue ) );\n\t\t}\n\n\t// For Promises/A+, convert exceptions into rejections\n\t// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in\n\t// Deferred#then to conditionally suppress rejection.\n\t} catch ( value ) {\n\n\t\t// Support: Android 4.0 only\n\t\t// Strict mode functions invoked without .call/.apply get global-object context\n\t\treject.apply( undefined, [ value ] );\n\t}\n}\n\njQuery.extend( {\n\n\tDeferred: function( func ) {\n\t\tvar tuples = [\n\n\t\t\t\t// action, add listener, callbacks,\n\t\t\t\t// ... .then handlers, argument index, [final state]\n\t\t\t\t[ \"notify\", \"progress\", jQuery.Callbacks( \"memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"memory\" ), 2 ],\n\t\t\t\t[ \"resolve\", \"done\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 0, \"resolved\" ],\n\t\t\t\t[ \"reject\", \"fail\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 1, \"rejected\" ]\n\t\t\t],\n\t\t\tstate = \"pending\",\n\t\t\tpromise = {\n\t\t\t\tstate: function() {\n\t\t\t\t\treturn state;\n\t\t\t\t},\n\t\t\t\talways: function() {\n\t\t\t\t\tdeferred.done( arguments ).fail( arguments );\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\t\"catch\": function( fn ) {\n\t\t\t\t\treturn promise.then( null, fn );\n\t\t\t\t},\n\n\t\t\t\t// Keep pipe for back-compat\n\t\t\t\tpipe: function( /* fnDone, fnFail, fnProgress */ ) {\n\t\t\t\t\tvar fns = arguments;\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\t\t\t\t\t\tjQuery.each( tuples, function( _i, tuple ) {\n\n\t\t\t\t\t\t\t// Map tuples (progress, done, fail) to arguments (done, fail, progress)\n\t\t\t\t\t\t\tvar fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];\n\n\t\t\t\t\t\t\t// deferred.progress(function() { bind to newDefer or newDefer.notify })\n\t\t\t\t\t\t\t// deferred.done(function() { bind to newDefer or newDefer.resolve })\n\t\t\t\t\t\t\t// deferred.fail(function() { bind to newDefer or newDefer.reject })\n\t\t\t\t\t\t\tdeferred[ tuple[ 1 ] ]( function() {\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply( this, arguments );\n\t\t\t\t\t\t\t\tif ( returned && isFunction( returned.promise ) ) {\n\t\t\t\t\t\t\t\t\treturned.promise()\n\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify )\n\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )\n\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewDefer[ tuple[ 0 ] + \"With\" ](\n\t\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t\tfn ? [ returned ] : arguments\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\t\t\t\tthen: function( onFulfilled, onRejected, onProgress ) {\n\t\t\t\t\tvar maxDepth = 0;\n\t\t\t\t\tfunction resolve( depth, deferred, handler, special ) {\n\t\t\t\t\t\treturn function() {\n\t\t\t\t\t\t\tvar that = this,\n\t\t\t\t\t\t\t\targs = arguments,\n\t\t\t\t\t\t\t\tmightThrow = function() {\n\t\t\t\t\t\t\t\t\tvar returned, then;\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.3\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-59\n\t\t\t\t\t\t\t\t\t// Ignore double-resolution attempts\n\t\t\t\t\t\t\t\t\tif ( depth < maxDepth ) {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturned = handler.apply( that, args );\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.1\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-48\n\t\t\t\t\t\t\t\t\tif ( returned === deferred.promise() ) {\n\t\t\t\t\t\t\t\t\t\tthrow new TypeError( \"Thenable self-resolution\" );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ sections 2.3.3.1, 3.5\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-54\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-75\n\t\t\t\t\t\t\t\t\t// Retrieve `then` only once\n\t\t\t\t\t\t\t\t\tthen = returned &&\n\n\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.4\n\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-64\n\t\t\t\t\t\t\t\t\t\t// Only check objects and functions for thenability\n\t\t\t\t\t\t\t\t\t\t( typeof returned === \"object\" ||\n\t\t\t\t\t\t\t\t\t\t\ttypeof returned === \"function\" ) &&\n\t\t\t\t\t\t\t\t\t\treturned.then;\n\n\t\t\t\t\t\t\t\t\t// Handle a returned thenable\n\t\t\t\t\t\t\t\t\tif ( isFunction( then ) ) {\n\n\t\t\t\t\t\t\t\t\t\t// Special processors (notify) just wait for resolution\n\t\t\t\t\t\t\t\t\t\tif ( special ) {\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special )\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t// Normal processors (resolve) also hook into progress\n\t\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t\t// ...and disregard older resolution values\n\t\t\t\t\t\t\t\t\t\t\tmaxDepth++;\n\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity,\n\t\t\t\t\t\t\t\t\t\t\t\t\tdeferred.notifyWith )\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Handle all other returned values\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\tif ( handler !== Identity ) {\n\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\targs = [ returned ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// Process the value(s)\n\t\t\t\t\t\t\t\t\t\t// Default process is resolve\n\t\t\t\t\t\t\t\t\t\t( special || deferred.resolveWith )( that, args );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\t\t// Only normal processors (resolve) catch and reject exceptions\n\t\t\t\t\t\t\t\tprocess = special ?\n\t\t\t\t\t\t\t\t\tmightThrow :\n\t\t\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tmightThrow();\n\t\t\t\t\t\t\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t\t\t\t\t\t\tif ( jQuery.Deferred.exceptionHook ) {\n\t\t\t\t\t\t\t\t\t\t\t\tjQuery.Deferred.exceptionHook( e,\n\t\t\t\t\t\t\t\t\t\t\t\t\tprocess.stackTrace );\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.4.1\n\t\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-61\n\t\t\t\t\t\t\t\t\t\t\t// Ignore post-resolution exceptions\n\t\t\t\t\t\t\t\t\t\t\tif ( depth + 1 >= maxDepth ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\t\t\tif ( handler !== Thrower ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\t\t\targs = [ e ];\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tdeferred.rejectWith( that, args );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.1\n\t\t\t\t\t\t\t// https://promisesaplus.com/#point-57\n\t\t\t\t\t\t\t// Re-resolve promises immediately to dodge false rejection from\n\t\t\t\t\t\t\t// subsequent errors\n\t\t\t\t\t\t\tif ( depth ) {\n\t\t\t\t\t\t\t\tprocess();\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// Call an optional hook to record the stack, in case of exception\n\t\t\t\t\t\t\t\t// since it's otherwise lost when execution goes async\n\t\t\t\t\t\t\t\tif ( jQuery.Deferred.getStackHook ) {\n\t\t\t\t\t\t\t\t\tprocess.stackTrace = jQuery.Deferred.getStackHook();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\twindow.setTimeout( process );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\n\t\t\t\t\t\t// progress_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 0 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onProgress ) ?\n\t\t\t\t\t\t\t\t\tonProgress :\n\t\t\t\t\t\t\t\t\tIdentity,\n\t\t\t\t\t\t\t\tnewDefer.notifyWith\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// fulfilled_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 1 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onFulfilled ) ?\n\t\t\t\t\t\t\t\t\tonFulfilled :\n\t\t\t\t\t\t\t\t\tIdentity\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// rejected_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 2 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onRejected ) ?\n\t\t\t\t\t\t\t\t\tonRejected :\n\t\t\t\t\t\t\t\t\tThrower\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function( obj ) {\n\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdeferred = {};\n\n\t\t// Add list-specific methods\n\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\tvar list = tuple[ 2 ],\n\t\t\t\tstateString = tuple[ 5 ];\n\n\t\t\t// promise.progress = list.add\n\t\t\t// promise.done = list.add\n\t\t\t// promise.fail = list.add\n\t\t\tpromise[ tuple[ 1 ] ] = list.add;\n\n\t\t\t// Handle state\n\t\t\tif ( stateString ) {\n\t\t\t\tlist.add(\n\t\t\t\t\tfunction() {\n\n\t\t\t\t\t\t// state = \"resolved\" (i.e., fulfilled)\n\t\t\t\t\t\t// state = \"rejected\"\n\t\t\t\t\t\tstate = stateString;\n\t\t\t\t\t},\n\n\t\t\t\t\t// rejected_callbacks.disable\n\t\t\t\t\t// fulfilled_callbacks.disable\n\t\t\t\t\ttuples[ 3 - i ][ 2 ].disable,\n\n\t\t\t\t\t// rejected_handlers.disable\n\t\t\t\t\t// fulfilled_handlers.disable\n\t\t\t\t\ttuples[ 3 - i ][ 3 ].disable,\n\n\t\t\t\t\t// progress_callbacks.lock\n\t\t\t\t\ttuples[ 0 ][ 2 ].lock,\n\n\t\t\t\t\t// progress_handlers.lock\n\t\t\t\t\ttuples[ 0 ][ 3 ].lock\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// progress_handlers.fire\n\t\t\t// fulfilled_handlers.fire\n\t\t\t// rejected_handlers.fire\n\t\t\tlist.add( tuple[ 3 ].fire );\n\n\t\t\t// deferred.notify = function() { deferred.notifyWith(...) }\n\t\t\t// deferred.resolve = function() { deferred.resolveWith(...) }\n\t\t\t// deferred.reject = function() { deferred.rejectWith(...) }\n\t\t\tdeferred[ tuple[ 0 ] ] = function() {\n\t\t\t\tdeferred[ tuple[ 0 ] + \"With\" ]( this === deferred ? undefined : this, arguments );\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\t// deferred.notifyWith = list.fireWith\n\t\t\t// deferred.resolveWith = list.fireWith\n\t\t\t// deferred.rejectWith = list.fireWith\n\t\t\tdeferred[ tuple[ 0 ] + \"With\" ] = list.fireWith;\n\t\t} );\n\n\t\t// Make the deferred a promise\n\t\tpromise.promise( deferred );\n\n\t\t// Call given func if any\n\t\tif ( func ) {\n\t\t\tfunc.call( deferred, deferred );\n\t\t}\n\n\t\t// All done!\n\t\treturn deferred;\n\t},\n\n\t// Deferred helper\n\twhen: function( singleValue ) {\n\t\tvar\n\n\t\t\t// count of uncompleted subordinates\n\t\t\tremaining = arguments.length,\n\n\t\t\t// count of unprocessed arguments\n\t\t\ti = remaining,\n\n\t\t\t// subordinate fulfillment data\n\t\t\tresolveContexts = Array( i ),\n\t\t\tresolveValues = slice.call( arguments ),\n\n\t\t\t// the primary Deferred\n\t\t\tprimary = jQuery.Deferred(),\n\n\t\t\t// subordinate callback factory\n\t\t\tupdateFunc = function( i ) {\n\t\t\t\treturn function( value ) {\n\t\t\t\t\tresolveContexts[ i ] = this;\n\t\t\t\t\tresolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\n\t\t\t\t\tif ( !( --remaining ) ) {\n\t\t\t\t\t\tprimary.resolveWith( resolveContexts, resolveValues );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t// Single- and empty arguments are adopted like Promise.resolve\n\t\tif ( remaining <= 1 ) {\n\t\t\tadoptValue( singleValue, primary.done( updateFunc( i ) ).resolve, primary.reject,\n\t\t\t\t!remaining );\n\n\t\t\t// Use .then() to unwrap secondary thenables (cf. gh-3000)\n\t\t\tif ( primary.state() === \"pending\" ||\n\t\t\t\tisFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {\n\n\t\t\t\treturn primary.then();\n\t\t\t}\n\t\t}\n\n\t\t// Multiple arguments are aggregated like Promise.all array elements\n\t\twhile ( i-- ) {\n\t\t\tadoptValue( resolveValues[ i ], updateFunc( i ), primary.reject );\n\t\t}\n\n\t\treturn primary.promise();\n\t}\n} );\n\n\n// These usually indicate a programmer mistake during development,\n// warn about them ASAP rather than swallowing them by default.\nvar rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n\njQuery.Deferred.exceptionHook = function( error, stack ) {\n\n\t// Support: IE 8 - 9 only\n\t// Console exists when dev tools are open, which can happen at any time\n\tif ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {\n\t\twindow.console.warn( \"jQuery.Deferred exception: \" + error.message, error.stack, stack );\n\t}\n};\n\n\n\n\njQuery.readyException = function( error ) {\n\twindow.setTimeout( function() {\n\t\tthrow error;\n\t} );\n};\n\n\n\n\n// The deferred used on DOM ready\nvar readyList = jQuery.Deferred();\n\njQuery.fn.ready = function( fn ) {\n\n\treadyList\n\t\t.then( fn )\n\n\t\t// Wrap jQuery.readyException in a function so that the lookup\n\t\t// happens at the time of error handling instead of callback\n\t\t// registration.\n\t\t.catch( function( error ) {\n\t\t\tjQuery.readyException( error );\n\t\t} );\n\n\treturn this;\n};\n\njQuery.extend( {\n\n\t// Is the DOM ready to be used? Set to true once it occurs.\n\tisReady: false,\n\n\t// A counter to track how many items to wait for before\n\t// the ready event fires. See trac-6781\n\treadyWait: 1,\n\n\t// Handle when the DOM is ready\n\tready: function( wait ) {\n\n\t\t// Abort if there are pending holds or we're already ready\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remember that the DOM is ready\n\t\tjQuery.isReady = true;\n\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there are functions bound, to execute\n\t\treadyList.resolveWith( document, [ jQuery ] );\n\t}\n} );\n\njQuery.ready.then = readyList.then;\n\n// The ready event handler and self cleanup method\nfunction completed() {\n\tdocument.removeEventListener( \"DOMContentLoaded\", completed );\n\twindow.removeEventListener( \"load\", completed );\n\tjQuery.ready();\n}\n\n// Catch cases where $(document).ready() is called\n// after the browser event has already occurred.\n// Support: IE <=9 - 10 only\n// Older IE sometimes signals \"interactive\" too soon\nif ( document.readyState === \"complete\" ||\n\t( document.readyState !== \"loading\" && !document.documentElement.doScroll ) ) {\n\n\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\twindow.setTimeout( jQuery.ready );\n\n} else {\n\n\t// Use the handy event callback\n\tdocument.addEventListener( \"DOMContentLoaded\", completed );\n\n\t// A fallback to window.onload, that will always work\n\twindow.addEventListener( \"load\", completed );\n}\n\n\n\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\n\tvar i = 0,\n\t\tlen = elems.length,\n\t\tbulk = key == null;\n\n\t// Sets many values\n\tif ( toType( key ) === \"object\" ) {\n\t\tchainable = true;\n\t\tfor ( i in key ) {\n\t\t\taccess( elems, fn, i, key[ i ], true, emptyGet, raw );\n\t\t}\n\n\t// Sets one value\n\t} else if ( value !== undefined ) {\n\t\tchainable = true;\n\n\t\tif ( !isFunction( value ) ) {\n\t\t\traw = true;\n\t\t}\n\n\t\tif ( bulk ) {\n\n\t\t\t// Bulk operations run against the entire set\n\t\t\tif ( raw ) {\n\t\t\t\tfn.call( elems, value );\n\t\t\t\tfn = null;\n\n\t\t\t// ...except when executing function values\n\t\t\t} else {\n\t\t\t\tbulk = fn;\n\t\t\t\tfn = function( elem, _key, value ) {\n\t\t\t\t\treturn bulk.call( jQuery( elem ), value );\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( fn ) {\n\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\tfn(\n\t\t\t\t\telems[ i ], key, raw ?\n\t\t\t\t\t\tvalue :\n\t\t\t\t\t\tvalue.call( elems[ i ], i, fn( elems[ i ], key ) )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( chainable ) {\n\t\treturn elems;\n\t}\n\n\t// Gets\n\tif ( bulk ) {\n\t\treturn fn.call( elems );\n\t}\n\n\treturn len ? fn( elems[ 0 ], key ) : emptyGet;\n};\n\n\n// Matches dashed string for camelizing\nvar rmsPrefix = /^-ms-/,\n\trdashAlpha = /-([a-z])/g;\n\n// Used by camelCase as callback to replace()\nfunction fcamelCase( _all, letter ) {\n\treturn letter.toUpperCase();\n}\n\n// Convert dashed to camelCase; used by the css and data modules\n// Support: IE <=9 - 11, Edge 12 - 15\n// Microsoft forgot to hump their vendor prefix (trac-9572)\nfunction camelCase( string ) {\n\treturn string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );\n}\nvar acceptData = function( owner ) {\n\n\t// Accepts only:\n\t//  - Node\n\t//    - Node.ELEMENT_NODE\n\t//    - Node.DOCUMENT_NODE\n\t//  - Object\n\t//    - Any\n\treturn owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );\n};\n\n\n\n\nfunction Data() {\n\tthis.expando = jQuery.expando + Data.uid++;\n}\n\nData.uid = 1;\n\nData.prototype = {\n\n\tcache: function( owner ) {\n\n\t\t// Check if the owner object already has a cache\n\t\tvar value = owner[ this.expando ];\n\n\t\t// If not, create one\n\t\tif ( !value ) {\n\t\t\tvalue = {};\n\n\t\t\t// We can accept data for non-element nodes in modern browsers,\n\t\t\t// but we should not, see trac-8335.\n\t\t\t// Always return an empty object.\n\t\t\tif ( acceptData( owner ) ) {\n\n\t\t\t\t// If it is a node unlikely to be stringify-ed or looped over\n\t\t\t\t// use plain assignment\n\t\t\t\tif ( owner.nodeType ) {\n\t\t\t\t\towner[ this.expando ] = value;\n\n\t\t\t\t// Otherwise secure it in a non-enumerable property\n\t\t\t\t// configurable must be true to allow the property to be\n\t\t\t\t// deleted when data is removed\n\t\t\t\t} else {\n\t\t\t\t\tObject.defineProperty( owner, this.expando, {\n\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t},\n\tset: function( owner, data, value ) {\n\t\tvar prop,\n\t\t\tcache = this.cache( owner );\n\n\t\t// Handle: [ owner, key, value ] args\n\t\t// Always use camelCase key (gh-2257)\n\t\tif ( typeof data === \"string\" ) {\n\t\t\tcache[ camelCase( data ) ] = value;\n\n\t\t// Handle: [ owner, { properties } ] args\n\t\t} else {\n\n\t\t\t// Copy the properties one-by-one to the cache object\n\t\t\tfor ( prop in data ) {\n\t\t\t\tcache[ camelCase( prop ) ] = data[ prop ];\n\t\t\t}\n\t\t}\n\t\treturn cache;\n\t},\n\tget: function( owner, key ) {\n\t\treturn key === undefined ?\n\t\t\tthis.cache( owner ) :\n\n\t\t\t// Always use camelCase key (gh-2257)\n\t\t\towner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];\n\t},\n\taccess: function( owner, key, value ) {\n\n\t\t// In cases where either:\n\t\t//\n\t\t//   1. No key was specified\n\t\t//   2. A string key was specified, but no value provided\n\t\t//\n\t\t// Take the \"read\" path and allow the get method to determine\n\t\t// which value to return, respectively either:\n\t\t//\n\t\t//   1. The entire cache object\n\t\t//   2. The data stored at the key\n\t\t//\n\t\tif ( key === undefined ||\n\t\t\t\t( ( key && typeof key === \"string\" ) && value === undefined ) ) {\n\n\t\t\treturn this.get( owner, key );\n\t\t}\n\n\t\t// When the key is not a string, or both a key and value\n\t\t// are specified, set or extend (existing objects) with either:\n\t\t//\n\t\t//   1. An object of properties\n\t\t//   2. A key and value\n\t\t//\n\t\tthis.set( owner, key, value );\n\n\t\t// Since the \"set\" path can have two possible entry points\n\t\t// return the expected data based on which path was taken[*]\n\t\treturn value !== undefined ? value : key;\n\t},\n\tremove: function( owner, key ) {\n\t\tvar i,\n\t\t\tcache = owner[ this.expando ];\n\n\t\tif ( cache === undefined ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( key !== undefined ) {\n\n\t\t\t// Support array or space separated string of keys\n\t\t\tif ( Array.isArray( key ) ) {\n\n\t\t\t\t// If key is an array of keys...\n\t\t\t\t// We always set camelCase keys, so remove that.\n\t\t\t\tkey = key.map( camelCase );\n\t\t\t} else {\n\t\t\t\tkey = camelCase( key );\n\n\t\t\t\t// If a key with the spaces exists, use it.\n\t\t\t\t// Otherwise, create an array by matching non-whitespace\n\t\t\t\tkey = key in cache ?\n\t\t\t\t\t[ key ] :\n\t\t\t\t\t( key.match( rnothtmlwhite ) || [] );\n\t\t\t}\n\n\t\t\ti = key.length;\n\n\t\t\twhile ( i-- ) {\n\t\t\t\tdelete cache[ key[ i ] ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove the expando if there's no more data\n\t\tif ( key === undefined || jQuery.isEmptyObject( cache ) ) {\n\n\t\t\t// Support: Chrome <=35 - 45\n\t\t\t// Webkit & Blink performance suffers when deleting properties\n\t\t\t// from DOM nodes, so set to undefined instead\n\t\t\t// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n\t\t\tif ( owner.nodeType ) {\n\t\t\t\towner[ this.expando ] = undefined;\n\t\t\t} else {\n\t\t\t\tdelete owner[ this.expando ];\n\t\t\t}\n\t\t}\n\t},\n\thasData: function( owner ) {\n\t\tvar cache = owner[ this.expando ];\n\t\treturn cache !== undefined && !jQuery.isEmptyObject( cache );\n\t}\n};\nvar dataPriv = new Data();\n\nvar dataUser = new Data();\n\n\n\n//\tImplementation Summary\n//\n//\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n//\t2. Improve the module's maintainability by reducing the storage\n//\t\tpaths to a single mechanism.\n//\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n//\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n//\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n//\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n\trmultiDash = /[A-Z]/g;\n\nfunction getData( data ) {\n\tif ( data === \"true\" ) {\n\t\treturn true;\n\t}\n\n\tif ( data === \"false\" ) {\n\t\treturn false;\n\t}\n\n\tif ( data === \"null\" ) {\n\t\treturn null;\n\t}\n\n\t// Only convert to a number if it doesn't change the string\n\tif ( data === +data + \"\" ) {\n\t\treturn +data;\n\t}\n\n\tif ( rbrace.test( data ) ) {\n\t\treturn JSON.parse( data );\n\t}\n\n\treturn data;\n}\n\nfunction dataAttr( elem, key, data ) {\n\tvar name;\n\n\t// If nothing was found internally, try to fetch any\n\t// data from the HTML5 data-* attribute\n\tif ( data === undefined && elem.nodeType === 1 ) {\n\t\tname = \"data-\" + key.replace( rmultiDash, \"-$&\" ).toLowerCase();\n\t\tdata = elem.getAttribute( name );\n\n\t\tif ( typeof data === \"string\" ) {\n\t\t\ttry {\n\t\t\t\tdata = getData( data );\n\t\t\t} catch ( e ) {}\n\n\t\t\t// Make sure we set the data so it isn't changed later\n\t\t\tdataUser.set( elem, key, data );\n\t\t} else {\n\t\t\tdata = undefined;\n\t\t}\n\t}\n\treturn data;\n}\n\njQuery.extend( {\n\thasData: function( elem ) {\n\t\treturn dataUser.hasData( elem ) || dataPriv.hasData( elem );\n\t},\n\n\tdata: function( elem, name, data ) {\n\t\treturn dataUser.access( elem, name, data );\n\t},\n\n\tremoveData: function( elem, name ) {\n\t\tdataUser.remove( elem, name );\n\t},\n\n\t// TODO: Now that all calls to _data and _removeData have been replaced\n\t// with direct calls to dataPriv methods, these can be deprecated.\n\t_data: function( elem, name, data ) {\n\t\treturn dataPriv.access( elem, name, data );\n\t},\n\n\t_removeData: function( elem, name ) {\n\t\tdataPriv.remove( elem, name );\n\t}\n} );\n\njQuery.fn.extend( {\n\tdata: function( key, value ) {\n\t\tvar i, name, data,\n\t\t\telem = this[ 0 ],\n\t\t\tattrs = elem && elem.attributes;\n\n\t\t// Gets all values\n\t\tif ( key === undefined ) {\n\t\t\tif ( this.length ) {\n\t\t\t\tdata = dataUser.get( elem );\n\n\t\t\t\tif ( elem.nodeType === 1 && !dataPriv.get( elem, \"hasDataAttrs\" ) ) {\n\t\t\t\t\ti = attrs.length;\n\t\t\t\t\twhile ( i-- ) {\n\n\t\t\t\t\t\t// Support: IE 11 only\n\t\t\t\t\t\t// The attrs elements can be null (trac-14894)\n\t\t\t\t\t\tif ( attrs[ i ] ) {\n\t\t\t\t\t\t\tname = attrs[ i ].name;\n\t\t\t\t\t\t\tif ( name.indexOf( \"data-\" ) === 0 ) {\n\t\t\t\t\t\t\t\tname = camelCase( name.slice( 5 ) );\n\t\t\t\t\t\t\t\tdataAttr( elem, name, data[ name ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdataPriv.set( elem, \"hasDataAttrs\", true );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\t// Sets multiple values\n\t\tif ( typeof key === \"object\" ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tdataUser.set( this, key );\n\t\t\t} );\n\t\t}\n\n\t\treturn access( this, function( value ) {\n\t\t\tvar data;\n\n\t\t\t// The calling jQuery object (element matches) is not empty\n\t\t\t// (and therefore has an element appears at this[ 0 ]) and the\n\t\t\t// `value` parameter was not undefined. An empty jQuery object\n\t\t\t// will result in `undefined` for elem = this[ 0 ] which will\n\t\t\t// throw an exception if an attempt to read a data cache is made.\n\t\t\tif ( elem && value === undefined ) {\n\n\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t// The key will always be camelCased in Data\n\t\t\t\tdata = dataUser.get( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// Attempt to \"discover\" the data in\n\t\t\t\t// HTML5 custom data-* attrs\n\t\t\t\tdata = dataAttr( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// We tried really hard, but the data doesn't exist.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Set the data...\n\t\t\tthis.each( function() {\n\n\t\t\t\t// We always store the camelCased key\n\t\t\t\tdataUser.set( this, key, value );\n\t\t\t} );\n\t\t}, null, value, arguments.length > 1, null, true );\n\t},\n\n\tremoveData: function( key ) {\n\t\treturn this.each( function() {\n\t\t\tdataUser.remove( this, key );\n\t\t} );\n\t}\n} );\n\n\njQuery.extend( {\n\tqueue: function( elem, type, data ) {\n\t\tvar queue;\n\n\t\tif ( elem ) {\n\t\t\ttype = ( type || \"fx\" ) + \"queue\";\n\t\t\tqueue = dataPriv.get( elem, type );\n\n\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n\t\t\tif ( data ) {\n\t\t\t\tif ( !queue || Array.isArray( data ) ) {\n\t\t\t\t\tqueue = dataPriv.access( elem, type, jQuery.makeArray( data ) );\n\t\t\t\t} else {\n\t\t\t\t\tqueue.push( data );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn queue || [];\n\t\t}\n\t},\n\n\tdequeue: function( elem, type ) {\n\t\ttype = type || \"fx\";\n\n\t\tvar queue = jQuery.queue( elem, type ),\n\t\t\tstartLength = queue.length,\n\t\t\tfn = queue.shift(),\n\t\t\thooks = jQuery._queueHooks( elem, type ),\n\t\t\tnext = function() {\n\t\t\t\tjQuery.dequeue( elem, type );\n\t\t\t};\n\n\t\t// If the fx queue is dequeued, always remove the progress sentinel\n\t\tif ( fn === \"inprogress\" ) {\n\t\t\tfn = queue.shift();\n\t\t\tstartLength--;\n\t\t}\n\n\t\tif ( fn ) {\n\n\t\t\t// Add a progress sentinel to prevent the fx queue from being\n\t\t\t// automatically dequeued\n\t\t\tif ( type === \"fx\" ) {\n\t\t\t\tqueue.unshift( \"inprogress\" );\n\t\t\t}\n\n\t\t\t// Clear up the last queue stop function\n\t\t\tdelete hooks.stop;\n\t\t\tfn.call( elem, next, hooks );\n\t\t}\n\n\t\tif ( !startLength && hooks ) {\n\t\t\thooks.empty.fire();\n\t\t}\n\t},\n\n\t// Not public - generate a queueHooks object, or return the current one\n\t_queueHooks: function( elem, type ) {\n\t\tvar key = type + \"queueHooks\";\n\t\treturn dataPriv.get( elem, key ) || dataPriv.access( elem, key, {\n\t\t\tempty: jQuery.Callbacks( \"once memory\" ).add( function() {\n\t\t\t\tdataPriv.remove( elem, [ type + \"queue\", key ] );\n\t\t\t} )\n\t\t} );\n\t}\n} );\n\njQuery.fn.extend( {\n\tqueue: function( type, data ) {\n\t\tvar setter = 2;\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tdata = type;\n\t\t\ttype = \"fx\";\n\t\t\tsetter--;\n\t\t}\n\n\t\tif ( arguments.length < setter ) {\n\t\t\treturn jQuery.queue( this[ 0 ], type );\n\t\t}\n\n\t\treturn data === undefined ?\n\t\t\tthis :\n\t\t\tthis.each( function() {\n\t\t\t\tvar queue = jQuery.queue( this, type, data );\n\n\t\t\t\t// Ensure a hooks for this queue\n\t\t\t\tjQuery._queueHooks( this, type );\n\n\t\t\t\tif ( type === \"fx\" && queue[ 0 ] !== \"inprogress\" ) {\n\t\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t\t}\n\t\t\t} );\n\t},\n\tdequeue: function( type ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.dequeue( this, type );\n\t\t} );\n\t},\n\tclearQueue: function( type ) {\n\t\treturn this.queue( type || \"fx\", [] );\n\t},\n\n\t// Get a promise resolved when queues of a certain type\n\t// are emptied (fx is the type by default)\n\tpromise: function( type, obj ) {\n\t\tvar tmp,\n\t\t\tcount = 1,\n\t\t\tdefer = jQuery.Deferred(),\n\t\t\telements = this,\n\t\t\ti = this.length,\n\t\t\tresolve = function() {\n\t\t\t\tif ( !( --count ) ) {\n\t\t\t\t\tdefer.resolveWith( elements, [ elements ] );\n\t\t\t\t}\n\t\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tobj = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\ttype = type || \"fx\";\n\n\t\twhile ( i-- ) {\n\t\t\ttmp = dataPriv.get( elements[ i ], type + \"queueHooks\" );\n\t\t\tif ( tmp && tmp.empty ) {\n\t\t\t\tcount++;\n\t\t\t\ttmp.empty.add( resolve );\n\t\t\t}\n\t\t}\n\t\tresolve();\n\t\treturn defer.promise( obj );\n\t}\n} );\nvar pnum = ( /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/ ).source;\n\nvar rcssNum = new RegExp( \"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\" );\n\n\nvar cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ];\n\nvar documentElement = document.documentElement;\n\n\n\n\tvar isAttached = function( elem ) {\n\t\t\treturn jQuery.contains( elem.ownerDocument, elem );\n\t\t},\n\t\tcomposed = { composed: true };\n\n\t// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only\n\t// Check attachment across shadow DOM boundaries when possible (gh-3504)\n\t// Support: iOS 10.0-10.2 only\n\t// Early iOS 10 versions support `attachShadow` but not `getRootNode`,\n\t// leading to errors. We need to check for `getRootNode`.\n\tif ( documentElement.getRootNode ) {\n\t\tisAttached = function( elem ) {\n\t\t\treturn jQuery.contains( elem.ownerDocument, elem ) ||\n\t\t\t\telem.getRootNode( composed ) === elem.ownerDocument;\n\t\t};\n\t}\nvar isHiddenWithinTree = function( elem, el ) {\n\n\t\t// isHiddenWithinTree might be called from jQuery#filter function;\n\t\t// in that case, element will be second argument\n\t\telem = el || elem;\n\n\t\t// Inline style trumps all\n\t\treturn elem.style.display === \"none\" ||\n\t\t\telem.style.display === \"\" &&\n\n\t\t\t// Otherwise, check computed style\n\t\t\t// Support: Firefox <=43 - 45\n\t\t\t// Disconnected elements can have computed display: none, so first confirm that elem is\n\t\t\t// in the document.\n\t\t\tisAttached( elem ) &&\n\n\t\t\tjQuery.css( elem, \"display\" ) === \"none\";\n\t};\n\n\n\nfunction adjustCSS( elem, prop, valueParts, tween ) {\n\tvar adjusted, scale,\n\t\tmaxIterations = 20,\n\t\tcurrentValue = tween ?\n\t\t\tfunction() {\n\t\t\t\treturn tween.cur();\n\t\t\t} :\n\t\t\tfunction() {\n\t\t\t\treturn jQuery.css( elem, prop, \"\" );\n\t\t\t},\n\t\tinitial = currentValue(),\n\t\tunit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),\n\n\t\t// Starting value computation is required for potential unit mismatches\n\t\tinitialInUnit = elem.nodeType &&\n\t\t\t( jQuery.cssNumber[ prop ] || unit !== \"px\" && +initial ) &&\n\t\t\trcssNum.exec( jQuery.css( elem, prop ) );\n\n\tif ( initialInUnit && initialInUnit[ 3 ] !== unit ) {\n\n\t\t// Support: Firefox <=54\n\t\t// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)\n\t\tinitial = initial / 2;\n\n\t\t// Trust units reported by jQuery.css\n\t\tunit = unit || initialInUnit[ 3 ];\n\n\t\t// Iteratively approximate from a nonzero starting point\n\t\tinitialInUnit = +initial || 1;\n\n\t\twhile ( maxIterations-- ) {\n\n\t\t\t// Evaluate and update our best guess (doubling guesses that zero out).\n\t\t\t// Finish if the scale equals or crosses 1 (making the old*new product non-positive).\n\t\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\t\t\tif ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {\n\t\t\t\tmaxIterations = 0;\n\t\t\t}\n\t\t\tinitialInUnit = initialInUnit / scale;\n\n\t\t}\n\n\t\tinitialInUnit = initialInUnit * 2;\n\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\n\t\t// Make sure we update the tween properties later on\n\t\tvalueParts = valueParts || [];\n\t}\n\n\tif ( valueParts ) {\n\t\tinitialInUnit = +initialInUnit || +initial || 0;\n\n\t\t// Apply relative offset (+=/-=) if specified\n\t\tadjusted = valueParts[ 1 ] ?\n\t\t\tinitialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :\n\t\t\t+valueParts[ 2 ];\n\t\tif ( tween ) {\n\t\t\ttween.unit = unit;\n\t\t\ttween.start = initialInUnit;\n\t\t\ttween.end = adjusted;\n\t\t}\n\t}\n\treturn adjusted;\n}\n\n\nvar defaultDisplayMap = {};\n\nfunction getDefaultDisplay( elem ) {\n\tvar temp,\n\t\tdoc = elem.ownerDocument,\n\t\tnodeName = elem.nodeName,\n\t\tdisplay = defaultDisplayMap[ nodeName ];\n\n\tif ( display ) {\n\t\treturn display;\n\t}\n\n\ttemp = doc.body.appendChild( doc.createElement( nodeName ) );\n\tdisplay = jQuery.css( temp, \"display\" );\n\n\ttemp.parentNode.removeChild( temp );\n\n\tif ( display === \"none\" ) {\n\t\tdisplay = \"block\";\n\t}\n\tdefaultDisplayMap[ nodeName ] = display;\n\n\treturn display;\n}\n\nfunction showHide( elements, show ) {\n\tvar display, elem,\n\t\tvalues = [],\n\t\tindex = 0,\n\t\tlength = elements.length;\n\n\t// Determine new display value for elements that need to change\n\tfor ( ; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tdisplay = elem.style.display;\n\t\tif ( show ) {\n\n\t\t\t// Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n\t\t\t// check is required in this first loop unless we have a nonempty display value (either\n\t\t\t// inline or about-to-be-restored)\n\t\t\tif ( display === \"none\" ) {\n\t\t\t\tvalues[ index ] = dataPriv.get( elem, \"display\" ) || null;\n\t\t\t\tif ( !values[ index ] ) {\n\t\t\t\t\telem.style.display = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( elem.style.display === \"\" && isHiddenWithinTree( elem ) ) {\n\t\t\t\tvalues[ index ] = getDefaultDisplay( elem );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( display !== \"none\" ) {\n\t\t\t\tvalues[ index ] = \"none\";\n\n\t\t\t\t// Remember what we're overwriting\n\t\t\t\tdataPriv.set( elem, \"display\", display );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set the display of the elements in a second loop to avoid constant reflow\n\tfor ( index = 0; index < length; index++ ) {\n\t\tif ( values[ index ] != null ) {\n\t\t\telements[ index ].style.display = values[ index ];\n\t\t}\n\t}\n\n\treturn elements;\n}\n\njQuery.fn.extend( {\n\tshow: function() {\n\t\treturn showHide( this, true );\n\t},\n\thide: function() {\n\t\treturn showHide( this );\n\t},\n\ttoggle: function( state ) {\n\t\tif ( typeof state === \"boolean\" ) {\n\t\t\treturn state ? this.show() : this.hide();\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tif ( isHiddenWithinTree( this ) ) {\n\t\t\t\tjQuery( this ).show();\n\t\t\t} else {\n\t\t\t\tjQuery( this ).hide();\n\t\t\t}\n\t\t} );\n\t}\n} );\nvar rcheckableType = ( /^(?:checkbox|radio)$/i );\n\nvar rtagName = ( /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i );\n\nvar rscriptType = ( /^$|^module$|\\/(?:java|ecma)script/i );\n\n\n\n( function() {\n\tvar fragment = document.createDocumentFragment(),\n\t\tdiv = fragment.appendChild( document.createElement( \"div\" ) ),\n\t\tinput = document.createElement( \"input\" );\n\n\t// Support: Android 4.0 - 4.3 only\n\t// Check state lost if the name is set (trac-11217)\n\t// Support: Windows Web Apps (WWA)\n\t// `name` and `type` must use .setAttribute for WWA (trac-14901)\n\tinput.setAttribute( \"type\", \"radio\" );\n\tinput.setAttribute( \"checked\", \"checked\" );\n\tinput.setAttribute( \"name\", \"t\" );\n\n\tdiv.appendChild( input );\n\n\t// Support: Android <=4.1 only\n\t// Older WebKit doesn't clone checked state correctly in fragments\n\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\n\n\t// Support: IE <=11 only\n\t// Make sure textarea (and checkbox) defaultValue is properly cloned\n\tdiv.innerHTML = \"<textarea>x</textarea>\";\n\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\n\n\t// Support: IE <=9 only\n\t// IE <=9 replaces <option> tags with their contents when inserted outside of\n\t// the select element.\n\tdiv.innerHTML = \"<option></option>\";\n\tsupport.option = !!div.lastChild;\n} )();\n\n\n// We have to close these tags to support XHTML (trac-13200)\nvar wrapMap = {\n\n\t// XHTML parsers do not magically insert elements in the\n\t// same way that tag soup parsers do. So we cannot shorten\n\t// this by omitting <tbody> or other required elements.\n\tthead: [ 1, \"<table>\", \"</table>\" ],\n\tcol: [ 2, \"<table><colgroup>\", \"</colgroup></table>\" ],\n\ttr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\n\ttd: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\n\n\t_default: [ 0, \"\", \"\" ]\n};\n\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\nwrapMap.th = wrapMap.td;\n\n// Support: IE <=9 only\nif ( !support.option ) {\n\twrapMap.optgroup = wrapMap.option = [ 1, \"<select multiple='multiple'>\", \"</select>\" ];\n}\n\n\nfunction getAll( context, tag ) {\n\n\t// Support: IE <=9 - 11 only\n\t// Use typeof to avoid zero-argument method invocation on host objects (trac-15151)\n\tvar ret;\n\n\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\tret = context.getElementsByTagName( tag || \"*\" );\n\n\t} else if ( typeof context.querySelectorAll !== \"undefined\" ) {\n\t\tret = context.querySelectorAll( tag || \"*\" );\n\n\t} else {\n\t\tret = [];\n\t}\n\n\tif ( tag === undefined || tag && nodeName( context, tag ) ) {\n\t\treturn jQuery.merge( [ context ], ret );\n\t}\n\n\treturn ret;\n}\n\n\n// Mark scripts as having already been evaluated\nfunction setGlobalEval( elems, refElements ) {\n\tvar i = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\tdataPriv.set(\n\t\t\telems[ i ],\n\t\t\t\"globalEval\",\n\t\t\t!refElements || dataPriv.get( refElements[ i ], \"globalEval\" )\n\t\t);\n\t}\n}\n\n\nvar rhtml = /<|&#?\\w+;/;\n\nfunction buildFragment( elems, context, scripts, selection, ignored ) {\n\tvar elem, tmp, tag, wrap, attached, j,\n\t\tfragment = context.createDocumentFragment(),\n\t\tnodes = [],\n\t\ti = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\telem = elems[ i ];\n\n\t\tif ( elem || elem === 0 ) {\n\n\t\t\t// Add nodes directly\n\t\t\tif ( toType( elem ) === \"object\" ) {\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\n\n\t\t\t// Convert non-html into a text node\n\t\t\t} else if ( !rhtml.test( elem ) ) {\n\t\t\t\tnodes.push( context.createTextNode( elem ) );\n\n\t\t\t// Convert html into DOM nodes\n\t\t\t} else {\n\t\t\t\ttmp = tmp || fragment.appendChild( context.createElement( \"div\" ) );\n\n\t\t\t\t// Deserialize a standard representation\n\t\t\t\ttag = ( rtagName.exec( elem ) || [ \"\", \"\" ] )[ 1 ].toLowerCase();\n\t\t\t\twrap = wrapMap[ tag ] || wrapMap._default;\n\t\t\t\ttmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];\n\n\t\t\t\t// Descend through wrappers to the right content\n\t\t\t\tj = wrap[ 0 ];\n\t\t\t\twhile ( j-- ) {\n\t\t\t\t\ttmp = tmp.lastChild;\n\t\t\t\t}\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, tmp.childNodes );\n\n\t\t\t\t// Remember the top-level container\n\t\t\t\ttmp = fragment.firstChild;\n\n\t\t\t\t// Ensure the created nodes are orphaned (trac-12392)\n\t\t\t\ttmp.textContent = \"\";\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove wrapper from fragment\n\tfragment.textContent = \"\";\n\n\ti = 0;\n\twhile ( ( elem = nodes[ i++ ] ) ) {\n\n\t\t// Skip elements already in the context collection (trac-4087)\n\t\tif ( selection && jQuery.inArray( elem, selection ) > -1 ) {\n\t\t\tif ( ignored ) {\n\t\t\t\tignored.push( elem );\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tattached = isAttached( elem );\n\n\t\t// Append to fragment\n\t\ttmp = getAll( fragment.appendChild( elem ), \"script\" );\n\n\t\t// Preserve script evaluation history\n\t\tif ( attached ) {\n\t\t\tsetGlobalEval( tmp );\n\t\t}\n\n\t\t// Capture executables\n\t\tif ( scripts ) {\n\t\t\tj = 0;\n\t\t\twhile ( ( elem = tmp[ j++ ] ) ) {\n\t\t\t\tif ( rscriptType.test( elem.type || \"\" ) ) {\n\t\t\t\t\tscripts.push( elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn fragment;\n}\n\n\nvar rtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\nfunction returnTrue() {\n\treturn true;\n}\n\nfunction returnFalse() {\n\treturn false;\n}\n\n// Support: IE <=9 - 11+\n// focus() and blur() are asynchronous, except when they are no-op.\n// So expect focus to be synchronous when the element is already active,\n// and blur to be synchronous when the element is not already active.\n// (focus and blur are always synchronous in other supported browsers,\n// this just defines when we can count on it).\nfunction expectSync( elem, type ) {\n\treturn ( elem === safeActiveElement() ) === ( type === \"focus\" );\n}\n\n// Support: IE <=9 only\n// Accessing document.activeElement can throw unexpectedly\n// https://bugs.jquery.com/ticket/13393\nfunction safeActiveElement() {\n\ttry {\n\t\treturn document.activeElement;\n\t} catch ( err ) { }\n}\n\nfunction on( elem, types, selector, data, fn, one ) {\n\tvar origFn, type;\n\n\t// Types can be a map of types/handlers\n\tif ( typeof types === \"object\" ) {\n\n\t\t// ( types-Object, selector, data )\n\t\tif ( typeof selector !== \"string\" ) {\n\n\t\t\t// ( types-Object, data )\n\t\t\tdata = data || selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tfor ( type in types ) {\n\t\t\ton( elem, type, selector, data, types[ type ], one );\n\t\t}\n\t\treturn elem;\n\t}\n\n\tif ( data == null && fn == null ) {\n\n\t\t// ( types, fn )\n\t\tfn = selector;\n\t\tdata = selector = undefined;\n\t} else if ( fn == null ) {\n\t\tif ( typeof selector === \"string\" ) {\n\n\t\t\t// ( types, selector, fn )\n\t\t\tfn = data;\n\t\t\tdata = undefined;\n\t\t} else {\n\n\t\t\t// ( types, data, fn )\n\t\t\tfn = data;\n\t\t\tdata = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t}\n\tif ( fn === false ) {\n\t\tfn = returnFalse;\n\t} else if ( !fn ) {\n\t\treturn elem;\n\t}\n\n\tif ( one === 1 ) {\n\t\torigFn = fn;\n\t\tfn = function( event ) {\n\n\t\t\t// Can use an empty set, since event contains the info\n\t\t\tjQuery().off( event );\n\t\t\treturn origFn.apply( this, arguments );\n\t\t};\n\n\t\t// Use same guid so caller can remove using origFn\n\t\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\n\t}\n\treturn elem.each( function() {\n\t\tjQuery.event.add( this, types, fn, data, selector );\n\t} );\n}\n\n/*\n * Helper functions for managing events -- not part of the public interface.\n * Props to Dean Edwards' addEvent library for many of the ideas.\n */\njQuery.event = {\n\n\tglobal: {},\n\n\tadd: function( elem, types, handler, data, selector ) {\n\n\t\tvar handleObjIn, eventHandle, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.get( elem );\n\n\t\t// Only attach events to objects that accept data\n\t\tif ( !acceptData( elem ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Caller can pass in an object of custom data in lieu of the handler\n\t\tif ( handler.handler ) {\n\t\t\thandleObjIn = handler;\n\t\t\thandler = handleObjIn.handler;\n\t\t\tselector = handleObjIn.selector;\n\t\t}\n\n\t\t// Ensure that invalid selectors throw exceptions at attach time\n\t\t// Evaluate against documentElement in case elem is a non-element node (e.g., document)\n\t\tif ( selector ) {\n\t\t\tjQuery.find.matchesSelector( documentElement, selector );\n\t\t}\n\n\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n\t\tif ( !handler.guid ) {\n\t\t\thandler.guid = jQuery.guid++;\n\t\t}\n\n\t\t// Init the element's event structure and main handler, if this is the first\n\t\tif ( !( events = elemData.events ) ) {\n\t\t\tevents = elemData.events = Object.create( null );\n\t\t}\n\t\tif ( !( eventHandle = elemData.handle ) ) {\n\t\t\teventHandle = elemData.handle = function( e ) {\n\n\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n\t\t\t\t// when an event is called after a page has unloaded\n\t\t\t\treturn typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ?\n\t\t\t\t\tjQuery.event.dispatch.apply( elem, arguments ) : undefined;\n\t\t\t};\n\t\t}\n\n\t\t// Handle multiple events separated by a space\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// There *must* be a type, no attaching namespace-only handlers\n\t\t\tif ( !type ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If event changes its type, use the special event handlers for the changed type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// If selector defined, determine special event api type, otherwise given type\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\n\t\t\t// Update special based on newly reset type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// handleObj is passed to all event handlers\n\t\t\thandleObj = jQuery.extend( {\n\t\t\t\ttype: type,\n\t\t\t\torigType: origType,\n\t\t\t\tdata: data,\n\t\t\t\thandler: handler,\n\t\t\t\tguid: handler.guid,\n\t\t\t\tselector: selector,\n\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),\n\t\t\t\tnamespace: namespaces.join( \".\" )\n\t\t\t}, handleObjIn );\n\n\t\t\t// Init the event handler queue if we're the first\n\t\t\tif ( !( handlers = events[ type ] ) ) {\n\t\t\t\thandlers = events[ type ] = [];\n\t\t\t\thandlers.delegateCount = 0;\n\n\t\t\t\t// Only use addEventListener if the special events handler returns false\n\t\t\t\tif ( !special.setup ||\n\t\t\t\t\tspecial.setup.call( elem, data, namespaces, eventHandle ) === false ) {\n\n\t\t\t\t\tif ( elem.addEventListener ) {\n\t\t\t\t\t\telem.addEventListener( type, eventHandle );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( special.add ) {\n\t\t\t\tspecial.add.call( elem, handleObj );\n\n\t\t\t\tif ( !handleObj.handler.guid ) {\n\t\t\t\t\thandleObj.handler.guid = handler.guid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add to the element's handler list, delegates in front\n\t\t\tif ( selector ) {\n\t\t\t\thandlers.splice( handlers.delegateCount++, 0, handleObj );\n\t\t\t} else {\n\t\t\t\thandlers.push( handleObj );\n\t\t\t}\n\n\t\t\t// Keep track of which events have ever been used, for event optimization\n\t\t\tjQuery.event.global[ type ] = true;\n\t\t}\n\n\t},\n\n\t// Detach an event or set of events from an element\n\tremove: function( elem, types, handler, selector, mappedTypes ) {\n\n\t\tvar j, origCount, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.hasData( elem ) && dataPriv.get( elem );\n\n\t\tif ( !elemData || !( events = elemData.events ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Once for each type.namespace in types; type may be omitted\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// Unbind all events (on this namespace, if provided) for the element\n\t\t\tif ( !type ) {\n\t\t\t\tfor ( type in events ) {\n\t\t\t\t\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\t\t\thandlers = events[ type ] || [];\n\t\t\ttmp = tmp[ 2 ] &&\n\t\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" );\n\n\t\t\t// Remove matching events\n\t\t\torigCount = j = handlers.length;\n\t\t\twhile ( j-- ) {\n\t\t\t\thandleObj = handlers[ j ];\n\n\t\t\t\tif ( ( mappedTypes || origType === handleObj.origType ) &&\n\t\t\t\t\t( !handler || handler.guid === handleObj.guid ) &&\n\t\t\t\t\t( !tmp || tmp.test( handleObj.namespace ) ) &&\n\t\t\t\t\t( !selector || selector === handleObj.selector ||\n\t\t\t\t\t\tselector === \"**\" && handleObj.selector ) ) {\n\t\t\t\t\thandlers.splice( j, 1 );\n\n\t\t\t\t\tif ( handleObj.selector ) {\n\t\t\t\t\t\thandlers.delegateCount--;\n\t\t\t\t\t}\n\t\t\t\t\tif ( special.remove ) {\n\t\t\t\t\t\tspecial.remove.call( elem, handleObj );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n\t\t\tif ( origCount && !handlers.length ) {\n\t\t\t\tif ( !special.teardown ||\n\t\t\t\t\tspecial.teardown.call( elem, namespaces, elemData.handle ) === false ) {\n\n\t\t\t\t\tjQuery.removeEvent( elem, type, elemData.handle );\n\t\t\t\t}\n\n\t\t\t\tdelete events[ type ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove data and the expando if it's no longer used\n\t\tif ( jQuery.isEmptyObject( events ) ) {\n\t\t\tdataPriv.remove( elem, \"handle events\" );\n\t\t}\n\t},\n\n\tdispatch: function( nativeEvent ) {\n\n\t\tvar i, j, ret, matched, handleObj, handlerQueue,\n\t\t\targs = new Array( arguments.length ),\n\n\t\t\t// Make a writable jQuery.Event from the native event object\n\t\t\tevent = jQuery.event.fix( nativeEvent ),\n\n\t\t\thandlers = (\n\t\t\t\tdataPriv.get( this, \"events\" ) || Object.create( null )\n\t\t\t)[ event.type ] || [],\n\t\t\tspecial = jQuery.event.special[ event.type ] || {};\n\n\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n\t\targs[ 0 ] = event;\n\n\t\tfor ( i = 1; i < arguments.length; i++ ) {\n\t\t\targs[ i ] = arguments[ i ];\n\t\t}\n\n\t\tevent.delegateTarget = this;\n\n\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n\t\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine handlers\n\t\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );\n\n\t\t// Run delegates first; they may want to stop propagation beneath us\n\t\ti = 0;\n\t\twhile ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tevent.currentTarget = matched.elem;\n\n\t\t\tj = 0;\n\t\t\twhile ( ( handleObj = matched.handlers[ j++ ] ) &&\n\t\t\t\t!event.isImmediatePropagationStopped() ) {\n\n\t\t\t\t// If the event is namespaced, then each handler is only invoked if it is\n\t\t\t\t// specially universal or its namespaces are a superset of the event's.\n\t\t\t\tif ( !event.rnamespace || handleObj.namespace === false ||\n\t\t\t\t\tevent.rnamespace.test( handleObj.namespace ) ) {\n\n\t\t\t\t\tevent.handleObj = handleObj;\n\t\t\t\t\tevent.data = handleObj.data;\n\n\t\t\t\t\tret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||\n\t\t\t\t\t\thandleObj.handler ).apply( matched.elem, args );\n\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\tif ( ( event.result = ret ) === false ) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Call the postDispatch hook for the mapped type\n\t\tif ( special.postDispatch ) {\n\t\t\tspecial.postDispatch.call( this, event );\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\thandlers: function( event, handlers ) {\n\t\tvar i, handleObj, sel, matchedHandlers, matchedSelectors,\n\t\t\thandlerQueue = [],\n\t\t\tdelegateCount = handlers.delegateCount,\n\t\t\tcur = event.target;\n\n\t\t// Find delegate handlers\n\t\tif ( delegateCount &&\n\n\t\t\t// Support: IE <=9\n\t\t\t// Black-hole SVG <use> instance trees (trac-13180)\n\t\t\tcur.nodeType &&\n\n\t\t\t// Support: Firefox <=42\n\t\t\t// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\n\t\t\t// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\n\t\t\t// Support: IE 11 only\n\t\t\t// ...but not arrow key \"clicks\" of radio inputs, which can have `button` -1 (gh-2343)\n\t\t\t!( event.type === \"click\" && event.button >= 1 ) ) {\n\n\t\t\tfor ( ; cur !== this; cur = cur.parentNode || this ) {\n\n\t\t\t\t// Don't check non-elements (trac-13208)\n\t\t\t\t// Don't process clicks on disabled elements (trac-6911, trac-8165, trac-11382, trac-11764)\n\t\t\t\tif ( cur.nodeType === 1 && !( event.type === \"click\" && cur.disabled === true ) ) {\n\t\t\t\t\tmatchedHandlers = [];\n\t\t\t\t\tmatchedSelectors = {};\n\t\t\t\t\tfor ( i = 0; i < delegateCount; i++ ) {\n\t\t\t\t\t\thandleObj = handlers[ i ];\n\n\t\t\t\t\t\t// Don't conflict with Object.prototype properties (trac-13203)\n\t\t\t\t\t\tsel = handleObj.selector + \" \";\n\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] === undefined ) {\n\t\t\t\t\t\t\tmatchedSelectors[ sel ] = handleObj.needsContext ?\n\t\t\t\t\t\t\t\tjQuery( sel, this ).index( cur ) > -1 :\n\t\t\t\t\t\t\t\tjQuery.find( sel, this, null, [ cur ] ).length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] ) {\n\t\t\t\t\t\t\tmatchedHandlers.push( handleObj );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( matchedHandlers.length ) {\n\t\t\t\t\t\thandlerQueue.push( { elem: cur, handlers: matchedHandlers } );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add the remaining (directly-bound) handlers\n\t\tcur = this;\n\t\tif ( delegateCount < handlers.length ) {\n\t\t\thandlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );\n\t\t}\n\n\t\treturn handlerQueue;\n\t},\n\n\taddProp: function( name, hook ) {\n\t\tObject.defineProperty( jQuery.Event.prototype, name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\n\t\t\tget: isFunction( hook ) ?\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\treturn hook( this.originalEvent );\n\t\t\t\t\t}\n\t\t\t\t} :\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\treturn this.originalEvent[ name ];\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\tset: function( value ) {\n\t\t\t\tObject.defineProperty( this, name, {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\twritable: true,\n\t\t\t\t\tvalue: value\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t},\n\n\tfix: function( originalEvent ) {\n\t\treturn originalEvent[ jQuery.expando ] ?\n\t\t\toriginalEvent :\n\t\t\tnew jQuery.Event( originalEvent );\n\t},\n\n\tspecial: {\n\t\tload: {\n\n\t\t\t// Prevent triggered image.load events from bubbling to window.load\n\t\t\tnoBubble: true\n\t\t},\n\t\tclick: {\n\n\t\t\t// Utilize native event to ensure correct state for checkable inputs\n\t\t\tsetup: function( data ) {\n\n\t\t\t\t// For mutual compressibility with _default, replace `this` access with a local var.\n\t\t\t\t// `|| data` is dead code meant only to preserve the variable through minification.\n\t\t\t\tvar el = this || data;\n\n\t\t\t\t// Claim the first handler\n\t\t\t\tif ( rcheckableType.test( el.type ) &&\n\t\t\t\t\tel.click && nodeName( el, \"input\" ) ) {\n\n\t\t\t\t\t// dataPriv.set( el, \"click\", ... )\n\t\t\t\t\tleverageNative( el, \"click\", returnTrue );\n\t\t\t\t}\n\n\t\t\t\t// Return false to allow normal processing in the caller\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\ttrigger: function( data ) {\n\n\t\t\t\t// For mutual compressibility with _default, replace `this` access with a local var.\n\t\t\t\t// `|| data` is dead code meant only to preserve the variable through minification.\n\t\t\t\tvar el = this || data;\n\n\t\t\t\t// Force setup before triggering a click\n\t\t\t\tif ( rcheckableType.test( el.type ) &&\n\t\t\t\t\tel.click && nodeName( el, \"input\" ) ) {\n\n\t\t\t\t\tleverageNative( el, \"click\" );\n\t\t\t\t}\n\n\t\t\t\t// Return non-false to allow normal event-path propagation\n\t\t\t\treturn true;\n\t\t\t},\n\n\t\t\t// For cross-browser consistency, suppress native .click() on links\n\t\t\t// Also prevent it if we're currently inside a leveraged native-event stack\n\t\t\t_default: function( event ) {\n\t\t\t\tvar target = event.target;\n\t\t\t\treturn rcheckableType.test( target.type ) &&\n\t\t\t\t\ttarget.click && nodeName( target, \"input\" ) &&\n\t\t\t\t\tdataPriv.get( target, \"click\" ) ||\n\t\t\t\t\tnodeName( target, \"a\" );\n\t\t\t}\n\t\t},\n\n\t\tbeforeunload: {\n\t\t\tpostDispatch: function( event ) {\n\n\t\t\t\t// Support: Firefox 20+\n\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\n\t\t\t\tif ( event.result !== undefined && event.originalEvent ) {\n\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Ensure the presence of an event listener that handles manually-triggered\n// synthetic events by interrupting progress until reinvoked in response to\n// *native* events that it fires directly, ensuring that state changes have\n// already occurred before other listeners are invoked.\nfunction leverageNative( el, type, expectSync ) {\n\n\t// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add\n\tif ( !expectSync ) {\n\t\tif ( dataPriv.get( el, type ) === undefined ) {\n\t\t\tjQuery.event.add( el, type, returnTrue );\n\t\t}\n\t\treturn;\n\t}\n\n\t// Register the controller as a special universal handler for all event namespaces\n\tdataPriv.set( el, type, false );\n\tjQuery.event.add( el, type, {\n\t\tnamespace: false,\n\t\thandler: function( event ) {\n\t\t\tvar notAsync, result,\n\t\t\t\tsaved = dataPriv.get( this, type );\n\n\t\t\tif ( ( event.isTrigger & 1 ) && this[ type ] ) {\n\n\t\t\t\t// Interrupt processing of the outer synthetic .trigger()ed event\n\t\t\t\t// Saved data should be false in such cases, but might be a leftover capture object\n\t\t\t\t// from an async native handler (gh-4350)\n\t\t\t\tif ( !saved.length ) {\n\n\t\t\t\t\t// Store arguments for use when handling the inner native event\n\t\t\t\t\t// There will always be at least one argument (an event object), so this array\n\t\t\t\t\t// will not be confused with a leftover capture object.\n\t\t\t\t\tsaved = slice.call( arguments );\n\t\t\t\t\tdataPriv.set( this, type, saved );\n\n\t\t\t\t\t// Trigger the native event and capture its result\n\t\t\t\t\t// Support: IE <=9 - 11+\n\t\t\t\t\t// focus() and blur() are asynchronous\n\t\t\t\t\tnotAsync = expectSync( this, type );\n\t\t\t\t\tthis[ type ]();\n\t\t\t\t\tresult = dataPriv.get( this, type );\n\t\t\t\t\tif ( saved !== result || notAsync ) {\n\t\t\t\t\t\tdataPriv.set( this, type, false );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult = {};\n\t\t\t\t\t}\n\t\t\t\t\tif ( saved !== result ) {\n\n\t\t\t\t\t\t// Cancel the outer synthetic event\n\t\t\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t\t\t\tevent.preventDefault();\n\n\t\t\t\t\t\t// Support: Chrome 86+\n\t\t\t\t\t\t// In Chrome, if an element having a focusout handler is blurred by\n\t\t\t\t\t\t// clicking outside of it, it invokes the handler synchronously. If\n\t\t\t\t\t\t// that handler calls `.remove()` on the element, the data is cleared,\n\t\t\t\t\t\t// leaving `result` undefined. We need to guard against this.\n\t\t\t\t\t\treturn result && result.value;\n\t\t\t\t\t}\n\n\t\t\t\t// If this is an inner synthetic event for an event with a bubbling surrogate\n\t\t\t\t// (focus or blur), assume that the surrogate already propagated from triggering the\n\t\t\t\t// native event and prevent that from happening again here.\n\t\t\t\t// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the\n\t\t\t\t// bubbling surrogate propagates *after* the non-bubbling base), but that seems\n\t\t\t\t// less bad than duplication.\n\t\t\t\t} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t}\n\n\t\t\t// If this is a native event triggered above, everything is now in order\n\t\t\t// Fire an inner synthetic event with the original arguments\n\t\t\t} else if ( saved.length ) {\n\n\t\t\t\t// ...and capture the result\n\t\t\t\tdataPriv.set( this, type, {\n\t\t\t\t\tvalue: jQuery.event.trigger(\n\n\t\t\t\t\t\t// Support: IE <=9 - 11+\n\t\t\t\t\t\t// Extend with the prototype to reset the above stopImmediatePropagation()\n\t\t\t\t\t\tjQuery.extend( saved[ 0 ], jQuery.Event.prototype ),\n\t\t\t\t\t\tsaved.slice( 1 ),\n\t\t\t\t\t\tthis\n\t\t\t\t\t)\n\t\t\t\t} );\n\n\t\t\t\t// Abort handling of the native event\n\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t}\n\t\t}\n\t} );\n}\n\njQuery.removeEvent = function( elem, type, handle ) {\n\n\t// This \"if\" is needed for plain objects\n\tif ( elem.removeEventListener ) {\n\t\telem.removeEventListener( type, handle );\n\t}\n};\n\njQuery.Event = function( src, props ) {\n\n\t// Allow instantiation without the 'new' keyword\n\tif ( !( this instanceof jQuery.Event ) ) {\n\t\treturn new jQuery.Event( src, props );\n\t}\n\n\t// Event object\n\tif ( src && src.type ) {\n\t\tthis.originalEvent = src;\n\t\tthis.type = src.type;\n\n\t\t// Events bubbling up the document may have been marked as prevented\n\t\t// by a handler lower down the tree; reflect the correct value.\n\t\tthis.isDefaultPrevented = src.defaultPrevented ||\n\t\t\t\tsrc.defaultPrevented === undefined &&\n\n\t\t\t\t// Support: Android <=2.3 only\n\t\t\t\tsrc.returnValue === false ?\n\t\t\treturnTrue :\n\t\t\treturnFalse;\n\n\t\t// Create target properties\n\t\t// Support: Safari <=6 - 7 only\n\t\t// Target should not be a text node (trac-504, trac-13143)\n\t\tthis.target = ( src.target && src.target.nodeType === 3 ) ?\n\t\t\tsrc.target.parentNode :\n\t\t\tsrc.target;\n\n\t\tthis.currentTarget = src.currentTarget;\n\t\tthis.relatedTarget = src.relatedTarget;\n\n\t// Event type\n\t} else {\n\t\tthis.type = src;\n\t}\n\n\t// Put explicitly provided properties onto the event object\n\tif ( props ) {\n\t\tjQuery.extend( this, props );\n\t}\n\n\t// Create a timestamp if incoming event doesn't have one\n\tthis.timeStamp = src && src.timeStamp || Date.now();\n\n\t// Mark it as fixed\n\tthis[ jQuery.expando ] = true;\n};\n\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\njQuery.Event.prototype = {\n\tconstructor: jQuery.Event,\n\tisDefaultPrevented: returnFalse,\n\tisPropagationStopped: returnFalse,\n\tisImmediatePropagationStopped: returnFalse,\n\tisSimulated: false,\n\n\tpreventDefault: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isDefaultPrevented = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.preventDefault();\n\t\t}\n\t},\n\tstopPropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isPropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopPropagation();\n\t\t}\n\t},\n\tstopImmediatePropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isImmediatePropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopImmediatePropagation();\n\t\t}\n\n\t\tthis.stopPropagation();\n\t}\n};\n\n// Includes all common event props including KeyEvent and MouseEvent specific props\njQuery.each( {\n\taltKey: true,\n\tbubbles: true,\n\tcancelable: true,\n\tchangedTouches: true,\n\tctrlKey: true,\n\tdetail: true,\n\teventPhase: true,\n\tmetaKey: true,\n\tpageX: true,\n\tpageY: true,\n\tshiftKey: true,\n\tview: true,\n\t\"char\": true,\n\tcode: true,\n\tcharCode: true,\n\tkey: true,\n\tkeyCode: true,\n\tbutton: true,\n\tbuttons: true,\n\tclientX: true,\n\tclientY: true,\n\toffsetX: true,\n\toffsetY: true,\n\tpointerId: true,\n\tpointerType: true,\n\tscreenX: true,\n\tscreenY: true,\n\ttargetTouches: true,\n\ttoElement: true,\n\ttouches: true,\n\twhich: true\n}, jQuery.event.addProp );\n\njQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( type, delegateType ) {\n\tjQuery.event.special[ type ] = {\n\n\t\t// Utilize native event if possible so blur/focus sequence is correct\n\t\tsetup: function() {\n\n\t\t\t// Claim the first handler\n\t\t\t// dataPriv.set( this, \"focus\", ... )\n\t\t\t// dataPriv.set( this, \"blur\", ... )\n\t\t\tleverageNative( this, type, expectSync );\n\n\t\t\t// Return false to allow normal processing in the caller\n\t\t\treturn false;\n\t\t},\n\t\ttrigger: function() {\n\n\t\t\t// Force setup before trigger\n\t\t\tleverageNative( this, type );\n\n\t\t\t// Return non-false to allow normal event-path propagation\n\t\t\treturn true;\n\t\t},\n\n\t\t// Suppress native focus or blur if we're currently inside\n\t\t// a leveraged native-event stack\n\t\t_default: function( event ) {\n\t\t\treturn dataPriv.get( event.target, type );\n\t\t},\n\n\t\tdelegateType: delegateType\n\t};\n} );\n\n// Create mouseenter/leave events using mouseover/out and event-time checks\n// so that event delegation works in jQuery.\n// Do the same for pointerenter/pointerleave and pointerover/pointerout\n//\n// Support: Safari 7 only\n// Safari sends mouseenter too often; see:\n// https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n// for the description of the bug (it existed in older Chrome versions as well).\njQuery.each( {\n\tmouseenter: \"mouseover\",\n\tmouseleave: \"mouseout\",\n\tpointerenter: \"pointerover\",\n\tpointerleave: \"pointerout\"\n}, function( orig, fix ) {\n\tjQuery.event.special[ orig ] = {\n\t\tdelegateType: fix,\n\t\tbindType: fix,\n\n\t\thandle: function( event ) {\n\t\t\tvar ret,\n\t\t\t\ttarget = this,\n\t\t\t\trelated = event.relatedTarget,\n\t\t\t\thandleObj = event.handleObj;\n\n\t\t\t// For mouseenter/leave call the handler if related is outside the target.\n\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n\t\t\tif ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {\n\t\t\t\tevent.type = handleObj.origType;\n\t\t\t\tret = handleObj.handler.apply( this, arguments );\n\t\t\t\tevent.type = fix;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t};\n} );\n\njQuery.fn.extend( {\n\n\ton: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn );\n\t},\n\tone: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn, 1 );\n\t},\n\toff: function( types, selector, fn ) {\n\t\tvar handleObj, type;\n\t\tif ( types && types.preventDefault && types.handleObj ) {\n\n\t\t\t// ( event )  dispatched jQuery.Event\n\t\t\thandleObj = types.handleObj;\n\t\t\tjQuery( types.delegateTarget ).off(\n\t\t\t\thandleObj.namespace ?\n\t\t\t\t\thandleObj.origType + \".\" + handleObj.namespace :\n\t\t\t\t\thandleObj.origType,\n\t\t\t\thandleObj.selector,\n\t\t\t\thandleObj.handler\n\t\t\t);\n\t\t\treturn this;\n\t\t}\n\t\tif ( typeof types === \"object\" ) {\n\n\t\t\t// ( types-object [, selector] )\n\t\t\tfor ( type in types ) {\n\t\t\t\tthis.off( type, selector, types[ type ] );\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tif ( selector === false || typeof selector === \"function\" ) {\n\n\t\t\t// ( types [, fn] )\n\t\t\tfn = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tif ( fn === false ) {\n\t\t\tfn = returnFalse;\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.remove( this, types, fn, selector );\n\t\t} );\n\t}\n} );\n\n\nvar\n\n\t// Support: IE <=10 - 11, Edge 12 - 13 only\n\t// In IE/Edge using regex groups here causes severe slowdowns.\n\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\n\trnoInnerhtml = /<script|<style|<link/i,\n\n\t// checked=\"checked\" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\n\trcleanScript = /^\\s*<!\\[CDATA\\[|\\]\\]>\\s*$/g;\n\n// Prefer a tbody over its parent table for containing new rows\nfunction manipulationTarget( elem, content ) {\n\tif ( nodeName( elem, \"table\" ) &&\n\t\tnodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ) {\n\n\t\treturn jQuery( elem ).children( \"tbody\" )[ 0 ] || elem;\n\t}\n\n\treturn elem;\n}\n\n// Replace/restore the type attribute of script elements for safe DOM manipulation\nfunction disableScript( elem ) {\n\telem.type = ( elem.getAttribute( \"type\" ) !== null ) + \"/\" + elem.type;\n\treturn elem;\n}\nfunction restoreScript( elem ) {\n\tif ( ( elem.type || \"\" ).slice( 0, 5 ) === \"true/\" ) {\n\t\telem.type = elem.type.slice( 5 );\n\t} else {\n\t\telem.removeAttribute( \"type\" );\n\t}\n\n\treturn elem;\n}\n\nfunction cloneCopyEvent( src, dest ) {\n\tvar i, l, type, pdataOld, udataOld, udataCur, events;\n\n\tif ( dest.nodeType !== 1 ) {\n\t\treturn;\n\t}\n\n\t// 1. Copy private data: events, handlers, etc.\n\tif ( dataPriv.hasData( src ) ) {\n\t\tpdataOld = dataPriv.get( src );\n\t\tevents = pdataOld.events;\n\n\t\tif ( events ) {\n\t\t\tdataPriv.remove( dest, \"handle events\" );\n\n\t\t\tfor ( type in events ) {\n\t\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\n\t\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 2. Copy user data\n\tif ( dataUser.hasData( src ) ) {\n\t\tudataOld = dataUser.access( src );\n\t\tudataCur = jQuery.extend( {}, udataOld );\n\n\t\tdataUser.set( dest, udataCur );\n\t}\n}\n\n// Fix IE bugs, see support tests\nfunction fixInput( src, dest ) {\n\tvar nodeName = dest.nodeName.toLowerCase();\n\n\t// Fails to persist the checked state of a cloned checkbox or radio button.\n\tif ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\n\t\tdest.checked = src.checked;\n\n\t// Fails to return the selected option to the default selected state when cloning options\n\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\n\t\tdest.defaultValue = src.defaultValue;\n\t}\n}\n\nfunction domManip( collection, args, callback, ignored ) {\n\n\t// Flatten any nested arrays\n\targs = flat( args );\n\n\tvar fragment, first, scripts, hasScripts, node, doc,\n\t\ti = 0,\n\t\tl = collection.length,\n\t\tiNoClone = l - 1,\n\t\tvalue = args[ 0 ],\n\t\tvalueIsFunction = isFunction( value );\n\n\t// We can't cloneNode fragments that contain checked, in WebKit\n\tif ( valueIsFunction ||\n\t\t\t( l > 1 && typeof value === \"string\" &&\n\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {\n\t\treturn collection.each( function( index ) {\n\t\t\tvar self = collection.eq( index );\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\targs[ 0 ] = value.call( this, index, self.html() );\n\t\t\t}\n\t\t\tdomManip( self, args, callback, ignored );\n\t\t} );\n\t}\n\n\tif ( l ) {\n\t\tfragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\n\t\tfirst = fragment.firstChild;\n\n\t\tif ( fragment.childNodes.length === 1 ) {\n\t\t\tfragment = first;\n\t\t}\n\n\t\t// Require either new content or an interest in ignored elements to invoke the callback\n\t\tif ( first || ignored ) {\n\t\t\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\n\t\t\thasScripts = scripts.length;\n\n\t\t\t// Use the original fragment for the last item\n\t\t\t// instead of the first because it can end up\n\t\t\t// being emptied incorrectly in certain situations (trac-8070).\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tnode = fragment;\n\n\t\t\t\tif ( i !== iNoClone ) {\n\t\t\t\t\tnode = jQuery.clone( node, true, true );\n\n\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\tif ( hasScripts ) {\n\n\t\t\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, \"script\" ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcallback.call( collection[ i ], node, i );\n\t\t\t}\n\n\t\t\tif ( hasScripts ) {\n\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\n\n\t\t\t\t// Reenable scripts\n\t\t\t\tjQuery.map( scripts, restoreScript );\n\n\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {\n\t\t\t\t\tnode = scripts[ i ];\n\t\t\t\t\tif ( rscriptType.test( node.type || \"\" ) &&\n\t\t\t\t\t\t!dataPriv.access( node, \"globalEval\" ) &&\n\t\t\t\t\t\tjQuery.contains( doc, node ) ) {\n\n\t\t\t\t\t\tif ( node.src && ( node.type || \"\" ).toLowerCase()  !== \"module\" ) {\n\n\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\n\t\t\t\t\t\t\tif ( jQuery._evalUrl && !node.noModule ) {\n\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src, {\n\t\t\t\t\t\t\t\t\tnonce: node.nonce || node.getAttribute( \"nonce\" )\n\t\t\t\t\t\t\t\t}, doc );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Unwrap a CDATA section containing script contents. This shouldn't be\n\t\t\t\t\t\t\t// needed as in XML documents they're already not visible when\n\t\t\t\t\t\t\t// inspecting element contents and in HTML documents they have no\n\t\t\t\t\t\t\t// meaning but we're preserving that logic for backwards compatibility.\n\t\t\t\t\t\t\t// This will be removed completely in 4.0. See gh-4904.\n\t\t\t\t\t\t\tDOMEval( node.textContent.replace( rcleanScript, \"\" ), node, doc );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn collection;\n}\n\nfunction remove( elem, selector, keepData ) {\n\tvar node,\n\t\tnodes = selector ? jQuery.filter( selector, elem ) : elem,\n\t\ti = 0;\n\n\tfor ( ; ( node = nodes[ i ] ) != null; i++ ) {\n\t\tif ( !keepData && node.nodeType === 1 ) {\n\t\t\tjQuery.cleanData( getAll( node ) );\n\t\t}\n\n\t\tif ( node.parentNode ) {\n\t\t\tif ( keepData && isAttached( node ) ) {\n\t\t\t\tsetGlobalEval( getAll( node, \"script\" ) );\n\t\t\t}\n\t\t\tnode.parentNode.removeChild( node );\n\t\t}\n\t}\n\n\treturn elem;\n}\n\njQuery.extend( {\n\thtmlPrefilter: function( html ) {\n\t\treturn html;\n\t},\n\n\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\n\t\tvar i, l, srcElements, destElements,\n\t\t\tclone = elem.cloneNode( true ),\n\t\t\tinPage = isAttached( elem );\n\n\t\t// Fix IE cloning issues\n\t\tif ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\n\t\t\t\t!jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2\n\t\t\tdestElements = getAll( clone );\n\t\t\tsrcElements = getAll( elem );\n\n\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\tfixInput( srcElements[ i ], destElements[ i ] );\n\t\t\t}\n\t\t}\n\n\t\t// Copy the events from the original to the clone\n\t\tif ( dataAndEvents ) {\n\t\t\tif ( deepDataAndEvents ) {\n\t\t\t\tsrcElements = srcElements || getAll( elem );\n\t\t\t\tdestElements = destElements || getAll( clone );\n\n\t\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\t\tcloneCopyEvent( srcElements[ i ], destElements[ i ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcloneCopyEvent( elem, clone );\n\t\t\t}\n\t\t}\n\n\t\t// Preserve script evaluation history\n\t\tdestElements = getAll( clone, \"script\" );\n\t\tif ( destElements.length > 0 ) {\n\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\n\t\t}\n\n\t\t// Return the cloned set\n\t\treturn clone;\n\t},\n\n\tcleanData: function( elems ) {\n\t\tvar data, elem, type,\n\t\t\tspecial = jQuery.event.special,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\n\t\t\tif ( acceptData( elem ) ) {\n\t\t\t\tif ( ( data = elem[ dataPriv.expando ] ) ) {\n\t\t\t\t\tif ( data.events ) {\n\t\t\t\t\t\tfor ( type in data.events ) {\n\t\t\t\t\t\t\tif ( special[ type ] ) {\n\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );\n\n\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataPriv.expando ] = undefined;\n\t\t\t\t}\n\t\t\t\tif ( elem[ dataUser.expando ] ) {\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataUser.expando ] = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n} );\n\njQuery.fn.extend( {\n\tdetach: function( selector ) {\n\t\treturn remove( this, selector, true );\n\t},\n\n\tremove: function( selector ) {\n\t\treturn remove( this, selector );\n\t},\n\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t},\n\n\tappend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.appendChild( elem );\n\t\t\t}\n\t\t} );\n\t},\n\n\tprepend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\n\t\t\t}\n\t\t} );\n\t},\n\n\tbefore: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\n\t\t\t}\n\t\t} );\n\t},\n\n\tafter: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\n\t\t\t}\n\t\t} );\n\t},\n\n\tempty: function() {\n\t\tvar elem,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {\n\t\t\tif ( elem.nodeType === 1 ) {\n\n\t\t\t\t// Prevent memory leaks\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\n\t\t\t\t// Remove any remaining nodes\n\t\t\t\telem.textContent = \"\";\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tclone: function( dataAndEvents, deepDataAndEvents ) {\n\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\treturn this.map( function() {\n\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n\t\t} );\n\t},\n\n\thtml: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\tvar elem = this[ 0 ] || {},\n\t\t\t\ti = 0,\n\t\t\t\tl = this.length;\n\n\t\t\tif ( value === undefined && elem.nodeType === 1 ) {\n\t\t\t\treturn elem.innerHTML;\n\t\t\t}\n\n\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\n\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\n\n\t\t\t\tvalue = jQuery.htmlPrefilter( value );\n\n\t\t\t\ttry {\n\t\t\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\t\t\telem = this[ i ] || {};\n\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telem = 0;\n\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t} catch ( e ) {}\n\t\t\t}\n\n\t\t\tif ( elem ) {\n\t\t\t\tthis.empty().append( value );\n\t\t\t}\n\t\t}, null, value, arguments.length );\n\t},\n\n\treplaceWith: function() {\n\t\tvar ignored = [];\n\n\t\t// Make the changes, replacing each non-ignored context element with the new content\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tvar parent = this.parentNode;\n\n\t\t\tif ( jQuery.inArray( this, ignored ) < 0 ) {\n\t\t\t\tjQuery.cleanData( getAll( this ) );\n\t\t\t\tif ( parent ) {\n\t\t\t\t\tparent.replaceChild( elem, this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Force callback invocation\n\t\t}, ignored );\n\t}\n} );\n\njQuery.each( {\n\tappendTo: \"append\",\n\tprependTo: \"prepend\",\n\tinsertBefore: \"before\",\n\tinsertAfter: \"after\",\n\treplaceAll: \"replaceWith\"\n}, function( name, original ) {\n\tjQuery.fn[ name ] = function( selector ) {\n\t\tvar elems,\n\t\t\tret = [],\n\t\t\tinsert = jQuery( selector ),\n\t\t\tlast = insert.length - 1,\n\t\t\ti = 0;\n\n\t\tfor ( ; i <= last; i++ ) {\n\t\t\telems = i === last ? this : this.clone( true );\n\t\t\tjQuery( insert[ i ] )[ original ]( elems );\n\n\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t// .get() because push.apply(_, arraylike) throws on ancient WebKit\n\t\t\tpush.apply( ret, elems.get() );\n\t\t}\n\n\t\treturn this.pushStack( ret );\n\t};\n} );\nvar rnumnonpx = new RegExp( \"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\" );\n\nvar rcustomProp = /^--/;\n\n\nvar getStyles = function( elem ) {\n\n\t\t// Support: IE <=11 only, Firefox <=30 (trac-15098, trac-14150)\n\t\t// IE throws on elements created in popups\n\t\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n\t\tvar view = elem.ownerDocument.defaultView;\n\n\t\tif ( !view || !view.opener ) {\n\t\t\tview = window;\n\t\t}\n\n\t\treturn view.getComputedStyle( elem );\n\t};\n\nvar swap = function( elem, options, callback ) {\n\tvar ret, name,\n\t\told = {};\n\n\t// Remember the old values, and insert the new ones\n\tfor ( name in options ) {\n\t\told[ name ] = elem.style[ name ];\n\t\telem.style[ name ] = options[ name ];\n\t}\n\n\tret = callback.call( elem );\n\n\t// Revert the old values\n\tfor ( name in options ) {\n\t\telem.style[ name ] = old[ name ];\n\t}\n\n\treturn ret;\n};\n\n\nvar rboxStyle = new RegExp( cssExpand.join( \"|\" ), \"i\" );\n\nvar whitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\";\n\n\nvar rtrimCSS = new RegExp(\n\t\"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\",\n\t\"g\"\n);\n\n\n\n\n( function() {\n\n\t// Executing both pixelPosition & boxSizingReliable tests require only one layout\n\t// so they're executed at the same time to save the second computation.\n\tfunction computeStyleTests() {\n\n\t\t// This is a singleton, we need to execute it only once\n\t\tif ( !div ) {\n\t\t\treturn;\n\t\t}\n\n\t\tcontainer.style.cssText = \"position:absolute;left:-11111px;width:60px;\" +\n\t\t\t\"margin-top:1px;padding:0;border:0\";\n\t\tdiv.style.cssText =\n\t\t\t\"position:relative;display:block;box-sizing:border-box;overflow:scroll;\" +\n\t\t\t\"margin:auto;border:1px;padding:1px;\" +\n\t\t\t\"width:60%;top:1%\";\n\t\tdocumentElement.appendChild( container ).appendChild( div );\n\n\t\tvar divStyle = window.getComputedStyle( div );\n\t\tpixelPositionVal = divStyle.top !== \"1%\";\n\n\t\t// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\n\t\treliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;\n\n\t\t// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3\n\t\t// Some styles come back with percentage values, even though they shouldn't\n\t\tdiv.style.right = \"60%\";\n\t\tpixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;\n\n\t\t// Support: IE 9 - 11 only\n\t\t// Detect misreporting of content dimensions for box-sizing:border-box elements\n\t\tboxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;\n\n\t\t// Support: IE 9 only\n\t\t// Detect overflow:scroll screwiness (gh-3699)\n\t\t// Support: Chrome <=64\n\t\t// Don't get tricked when zoom affects offsetWidth (gh-4029)\n\t\tdiv.style.position = \"absolute\";\n\t\tscrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;\n\n\t\tdocumentElement.removeChild( container );\n\n\t\t// Nullify the div so it wouldn't be stored in the memory and\n\t\t// it will also be a sign that checks already performed\n\t\tdiv = null;\n\t}\n\n\tfunction roundPixelMeasures( measure ) {\n\t\treturn Math.round( parseFloat( measure ) );\n\t}\n\n\tvar pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,\n\t\treliableTrDimensionsVal, reliableMarginLeftVal,\n\t\tcontainer = document.createElement( \"div\" ),\n\t\tdiv = document.createElement( \"div\" );\n\n\t// Finish early in limited (non-browser) environments\n\tif ( !div.style ) {\n\t\treturn;\n\t}\n\n\t// Support: IE <=9 - 11 only\n\t// Style of cloned element affects source element cloned (trac-8908)\n\tdiv.style.backgroundClip = \"content-box\";\n\tdiv.cloneNode( true ).style.backgroundClip = \"\";\n\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n\n\tjQuery.extend( support, {\n\t\tboxSizingReliable: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn boxSizingReliableVal;\n\t\t},\n\t\tpixelBoxStyles: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelBoxStylesVal;\n\t\t},\n\t\tpixelPosition: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelPositionVal;\n\t\t},\n\t\treliableMarginLeft: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn reliableMarginLeftVal;\n\t\t},\n\t\tscrollboxSize: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn scrollboxSizeVal;\n\t\t},\n\n\t\t// Support: IE 9 - 11+, Edge 15 - 18+\n\t\t// IE/Edge misreport `getComputedStyle` of table rows with width/height\n\t\t// set in CSS while `offset*` properties report correct values.\n\t\t// Behavior in IE 9 is more subtle than in newer versions & it passes\n\t\t// some versions of this test; make sure not to make it pass there!\n\t\t//\n\t\t// Support: Firefox 70+\n\t\t// Only Firefox includes border widths\n\t\t// in computed dimensions. (gh-4529)\n\t\treliableTrDimensions: function() {\n\t\t\tvar table, tr, trChild, trStyle;\n\t\t\tif ( reliableTrDimensionsVal == null ) {\n\t\t\t\ttable = document.createElement( \"table\" );\n\t\t\t\ttr = document.createElement( \"tr\" );\n\t\t\t\ttrChild = document.createElement( \"div\" );\n\n\t\t\t\ttable.style.cssText = \"position:absolute;left:-11111px;border-collapse:separate\";\n\t\t\t\ttr.style.cssText = \"border:1px solid\";\n\n\t\t\t\t// Support: Chrome 86+\n\t\t\t\t// Height set through cssText does not get applied.\n\t\t\t\t// Computed height then comes back as 0.\n\t\t\t\ttr.style.height = \"1px\";\n\t\t\t\ttrChild.style.height = \"9px\";\n\n\t\t\t\t// Support: Android 8 Chrome 86+\n\t\t\t\t// In our bodyBackground.html iframe,\n\t\t\t\t// display for all div elements is set to \"inline\",\n\t\t\t\t// which causes a problem only in Android 8 Chrome 86.\n\t\t\t\t// Ensuring the div is display: block\n\t\t\t\t// gets around this issue.\n\t\t\t\ttrChild.style.display = \"block\";\n\n\t\t\t\tdocumentElement\n\t\t\t\t\t.appendChild( table )\n\t\t\t\t\t.appendChild( tr )\n\t\t\t\t\t.appendChild( trChild );\n\n\t\t\t\ttrStyle = window.getComputedStyle( tr );\n\t\t\t\treliableTrDimensionsVal = ( parseInt( trStyle.height, 10 ) +\n\t\t\t\t\tparseInt( trStyle.borderTopWidth, 10 ) +\n\t\t\t\t\tparseInt( trStyle.borderBottomWidth, 10 ) ) === tr.offsetHeight;\n\n\t\t\t\tdocumentElement.removeChild( table );\n\t\t\t}\n\t\t\treturn reliableTrDimensionsVal;\n\t\t}\n\t} );\n} )();\n\n\nfunction curCSS( elem, name, computed ) {\n\tvar width, minWidth, maxWidth, ret,\n\t\tisCustomProp = rcustomProp.test( name ),\n\n\t\t// Support: Firefox 51+\n\t\t// Retrieving style before computed somehow\n\t\t// fixes an issue with getting wrong values\n\t\t// on detached elements\n\t\tstyle = elem.style;\n\n\tcomputed = computed || getStyles( elem );\n\n\t// getPropertyValue is needed for:\n\t//   .css('filter') (IE 9 only, trac-12537)\n\t//   .css('--customProperty) (gh-3144)\n\tif ( computed ) {\n\t\tret = computed.getPropertyValue( name ) || computed[ name ];\n\n\t\t// trim whitespace for custom property (issue gh-4926)\n\t\tif ( isCustomProp ) {\n\n\t\t\t// rtrim treats U+000D CARRIAGE RETURN and U+000C FORM FEED\n\t\t\t// as whitespace while CSS does not, but this is not a problem\n\t\t\t// because CSS preprocessing replaces them with U+000A LINE FEED\n\t\t\t// (which *is* CSS whitespace)\n\t\t\t// https://www.w3.org/TR/css-syntax-3/#input-preprocessing\n\t\t\tret = ret.replace( rtrimCSS, \"$1\" );\n\t\t}\n\n\t\tif ( ret === \"\" && !isAttached( elem ) ) {\n\t\t\tret = jQuery.style( elem, name );\n\t\t}\n\n\t\t// A tribute to the \"awesome hack by Dean Edwards\"\n\t\t// Android Browser returns percentage for some values,\n\t\t// but width seems to be reliably pixels.\n\t\t// This is against the CSSOM draft spec:\n\t\t// https://drafts.csswg.org/cssom/#resolved-values\n\t\tif ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {\n\n\t\t\t// Remember the original values\n\t\t\twidth = style.width;\n\t\t\tminWidth = style.minWidth;\n\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t// Put in the new values to get a computed value out\n\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\tret = computed.width;\n\n\t\t\t// Revert the changed values\n\t\t\tstyle.width = width;\n\t\t\tstyle.minWidth = minWidth;\n\t\t\tstyle.maxWidth = maxWidth;\n\t\t}\n\t}\n\n\treturn ret !== undefined ?\n\n\t\t// Support: IE <=9 - 11 only\n\t\t// IE returns zIndex value as an integer.\n\t\tret + \"\" :\n\t\tret;\n}\n\n\nfunction addGetHookIf( conditionFn, hookFn ) {\n\n\t// Define the hook, we'll check on the first run if it's really needed.\n\treturn {\n\t\tget: function() {\n\t\t\tif ( conditionFn() ) {\n\n\t\t\t\t// Hook not needed (or it's not possible to use it due\n\t\t\t\t// to missing dependency), remove it.\n\t\t\t\tdelete this.get;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Hook needed; redefine it so that the support test is not executed again.\n\t\t\treturn ( this.get = hookFn ).apply( this, arguments );\n\t\t}\n\t};\n}\n\n\nvar cssPrefixes = [ \"Webkit\", \"Moz\", \"ms\" ],\n\temptyStyle = document.createElement( \"div\" ).style,\n\tvendorProps = {};\n\n// Return a vendor-prefixed property or undefined\nfunction vendorPropName( name ) {\n\n\t// Check for vendor prefixed names\n\tvar capName = name[ 0 ].toUpperCase() + name.slice( 1 ),\n\t\ti = cssPrefixes.length;\n\n\twhile ( i-- ) {\n\t\tname = cssPrefixes[ i ] + capName;\n\t\tif ( name in emptyStyle ) {\n\t\t\treturn name;\n\t\t}\n\t}\n}\n\n// Return a potentially-mapped jQuery.cssProps or vendor prefixed property\nfunction finalPropName( name ) {\n\tvar final = jQuery.cssProps[ name ] || vendorProps[ name ];\n\n\tif ( final ) {\n\t\treturn final;\n\t}\n\tif ( name in emptyStyle ) {\n\t\treturn name;\n\t}\n\treturn vendorProps[ name ] = vendorPropName( name ) || name;\n}\n\n\nvar\n\n\t// Swappable if display is none or starts with table\n\t// except \"table\", \"table-cell\", or \"table-caption\"\n\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\tcssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n\tcssNormalTransform = {\n\t\tletterSpacing: \"0\",\n\t\tfontWeight: \"400\"\n\t};\n\nfunction setPositiveNumber( _elem, value, subtract ) {\n\n\t// Any relative (+/-) values have already been\n\t// normalized at this point\n\tvar matches = rcssNum.exec( value );\n\treturn matches ?\n\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\n\t\tMath.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || \"px\" ) :\n\t\tvalue;\n}\n\nfunction boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {\n\tvar i = dimension === \"width\" ? 1 : 0,\n\t\textra = 0,\n\t\tdelta = 0;\n\n\t// Adjustment may not be necessary\n\tif ( box === ( isBorderBox ? \"border\" : \"content\" ) ) {\n\t\treturn 0;\n\t}\n\n\tfor ( ; i < 4; i += 2 ) {\n\n\t\t// Both box models exclude margin\n\t\tif ( box === \"margin\" ) {\n\t\t\tdelta += jQuery.css( elem, box + cssExpand[ i ], true, styles );\n\t\t}\n\n\t\t// If we get here with a content-box, we're seeking \"padding\" or \"border\" or \"margin\"\n\t\tif ( !isBorderBox ) {\n\n\t\t\t// Add padding\n\t\t\tdelta += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\n\t\t\t// For \"border\" or \"margin\", add border\n\t\t\tif ( box !== \"padding\" ) {\n\t\t\t\tdelta += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\n\t\t\t// But still keep track of it otherwise\n\t\t\t} else {\n\t\t\t\textra += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\n\t\t// If we get here with a border-box (content + padding + border), we're seeking \"content\" or\n\t\t// \"padding\" or \"margin\"\n\t\t} else {\n\n\t\t\t// For \"content\", subtract padding\n\t\t\tif ( box === \"content\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\t\t\t}\n\n\t\t\t// For \"content\" or \"padding\", subtract border\n\t\t\tif ( box !== \"margin\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Account for positive content-box scroll gutter when requested by providing computedVal\n\tif ( !isBorderBox && computedVal >= 0 ) {\n\n\t\t// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border\n\t\t// Assuming integer scroll gutter, subtract the rest and round down\n\t\tdelta += Math.max( 0, Math.ceil(\n\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\tcomputedVal -\n\t\t\tdelta -\n\t\t\textra -\n\t\t\t0.5\n\n\t\t// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter\n\t\t// Use an explicit zero to avoid NaN (gh-3964)\n\t\t) ) || 0;\n\t}\n\n\treturn delta;\n}\n\nfunction getWidthOrHeight( elem, dimension, extra ) {\n\n\t// Start with computed style\n\tvar styles = getStyles( elem ),\n\n\t\t// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).\n\t\t// Fake content-box until we know it's needed to know the true value.\n\t\tboxSizingNeeded = !support.boxSizingReliable() || extra,\n\t\tisBorderBox = boxSizingNeeded &&\n\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\tvalueIsBorderBox = isBorderBox,\n\n\t\tval = curCSS( elem, dimension, styles ),\n\t\toffsetProp = \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );\n\n\t// Support: Firefox <=54\n\t// Return a confounding non-pixel value or feign ignorance, as appropriate.\n\tif ( rnumnonpx.test( val ) ) {\n\t\tif ( !extra ) {\n\t\t\treturn val;\n\t\t}\n\t\tval = \"auto\";\n\t}\n\n\n\t// Support: IE 9 - 11 only\n\t// Use offsetWidth/offsetHeight for when box sizing is unreliable.\n\t// In those cases, the computed value can be trusted to be border-box.\n\tif ( ( !support.boxSizingReliable() && isBorderBox ||\n\n\t\t// Support: IE 10 - 11+, Edge 15 - 18+\n\t\t// IE/Edge misreport `getComputedStyle` of table rows with width/height\n\t\t// set in CSS while `offset*` properties report correct values.\n\t\t// Interestingly, in some cases IE 9 doesn't suffer from this issue.\n\t\t!support.reliableTrDimensions() && nodeName( elem, \"tr\" ) ||\n\n\t\t// Fall back to offsetWidth/offsetHeight when value is \"auto\"\n\t\t// This happens for inline elements with no explicit setting (gh-3571)\n\t\tval === \"auto\" ||\n\n\t\t// Support: Android <=4.1 - 4.3 only\n\t\t// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)\n\t\t!parseFloat( val ) && jQuery.css( elem, \"display\", false, styles ) === \"inline\" ) &&\n\n\t\t// Make sure the element is visible & connected\n\t\telem.getClientRects().length ) {\n\n\t\tisBorderBox = jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\";\n\n\t\t// Where available, offsetWidth/offsetHeight approximate border box dimensions.\n\t\t// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the\n\t\t// retrieved value as a content box dimension.\n\t\tvalueIsBorderBox = offsetProp in elem;\n\t\tif ( valueIsBorderBox ) {\n\t\t\tval = elem[ offsetProp ];\n\t\t}\n\t}\n\n\t// Normalize \"\" and auto\n\tval = parseFloat( val ) || 0;\n\n\t// Adjust for the element's box model\n\treturn ( val +\n\t\tboxModelAdjustment(\n\t\t\telem,\n\t\t\tdimension,\n\t\t\textra || ( isBorderBox ? \"border\" : \"content\" ),\n\t\t\tvalueIsBorderBox,\n\t\t\tstyles,\n\n\t\t\t// Provide the current computed size to request scroll gutter calculation (gh-3589)\n\t\t\tval\n\t\t)\n\t) + \"px\";\n}\n\njQuery.extend( {\n\n\t// Add in style property hooks for overriding the default\n\t// behavior of getting and setting a style property\n\tcssHooks: {\n\t\topacity: {\n\t\t\tget: function( elem, computed ) {\n\t\t\t\tif ( computed ) {\n\n\t\t\t\t\t// We should always get a number back from opacity\n\t\t\t\t\tvar ret = curCSS( elem, \"opacity\" );\n\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t// Don't automatically add \"px\" to these possibly-unitless properties\n\tcssNumber: {\n\t\t\"animationIterationCount\": true,\n\t\t\"columnCount\": true,\n\t\t\"fillOpacity\": true,\n\t\t\"flexGrow\": true,\n\t\t\"flexShrink\": true,\n\t\t\"fontWeight\": true,\n\t\t\"gridArea\": true,\n\t\t\"gridColumn\": true,\n\t\t\"gridColumnEnd\": true,\n\t\t\"gridColumnStart\": true,\n\t\t\"gridRow\": true,\n\t\t\"gridRowEnd\": true,\n\t\t\"gridRowStart\": true,\n\t\t\"lineHeight\": true,\n\t\t\"opacity\": true,\n\t\t\"order\": true,\n\t\t\"orphans\": true,\n\t\t\"widows\": true,\n\t\t\"zIndex\": true,\n\t\t\"zoom\": true\n\t},\n\n\t// Add in properties whose names you wish to fix before\n\t// setting or getting the value\n\tcssProps: {},\n\n\t// Get and set the style property on a DOM Node\n\tstyle: function( elem, name, value, extra ) {\n\n\t\t// Don't set styles on text and comment nodes\n\t\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure that we're working with the right name\n\t\tvar ret, type, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name ),\n\t\t\tstyle = elem.style;\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to query the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Gets hook for the prefixed version, then unprefixed version\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// Check if we're setting a value\n\t\tif ( value !== undefined ) {\n\t\t\ttype = typeof value;\n\n\t\t\t// Convert \"+=\" or \"-=\" to relative numbers (trac-7345)\n\t\t\tif ( type === \"string\" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {\n\t\t\t\tvalue = adjustCSS( elem, name, ret );\n\n\t\t\t\t// Fixes bug trac-9237\n\t\t\t\ttype = \"number\";\n\t\t\t}\n\n\t\t\t// Make sure that null and NaN values aren't set (trac-7116)\n\t\t\tif ( value == null || value !== value ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If a number was passed in, add the unit (except for certain CSS properties)\n\t\t\t// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append\n\t\t\t// \"px\" to a few hardcoded values.\n\t\t\tif ( type === \"number\" && !isCustomProp ) {\n\t\t\t\tvalue += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? \"\" : \"px\" );\n\t\t\t}\n\n\t\t\t// background-* props affect original clone's values\n\t\t\tif ( !support.clearCloneStyle && value === \"\" && name.indexOf( \"background\" ) === 0 ) {\n\t\t\t\tstyle[ name ] = \"inherit\";\n\t\t\t}\n\n\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n\t\t\tif ( !hooks || !( \"set\" in hooks ) ||\n\t\t\t\t( value = hooks.set( elem, value, extra ) ) !== undefined ) {\n\n\t\t\t\tif ( isCustomProp ) {\n\t\t\t\t\tstyle.setProperty( name, value );\n\t\t\t\t} else {\n\t\t\t\t\tstyle[ name ] = value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// If a hook was provided get the non-computed value from there\n\t\t\tif ( hooks && \"get\" in hooks &&\n\t\t\t\t( ret = hooks.get( elem, false, extra ) ) !== undefined ) {\n\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\t// Otherwise just get the value from the style object\n\t\t\treturn style[ name ];\n\t\t}\n\t},\n\n\tcss: function( elem, name, extra, styles ) {\n\t\tvar val, num, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name );\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to modify the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Try prefixed name followed by the unprefixed name\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// If a hook was provided get the computed value from there\n\t\tif ( hooks && \"get\" in hooks ) {\n\t\t\tval = hooks.get( elem, true, extra );\n\t\t}\n\n\t\t// Otherwise, if a way to get the computed value exists, use that\n\t\tif ( val === undefined ) {\n\t\t\tval = curCSS( elem, name, styles );\n\t\t}\n\n\t\t// Convert \"normal\" to computed value\n\t\tif ( val === \"normal\" && name in cssNormalTransform ) {\n\t\t\tval = cssNormalTransform[ name ];\n\t\t}\n\n\t\t// Make numeric if forced or a qualifier was provided and val looks numeric\n\t\tif ( extra === \"\" || extra ) {\n\t\t\tnum = parseFloat( val );\n\t\t\treturn extra === true || isFinite( num ) ? num || 0 : val;\n\t\t}\n\n\t\treturn val;\n\t}\n} );\n\njQuery.each( [ \"height\", \"width\" ], function( _i, dimension ) {\n\tjQuery.cssHooks[ dimension ] = {\n\t\tget: function( elem, computed, extra ) {\n\t\t\tif ( computed ) {\n\n\t\t\t\t// Certain elements can have dimension info if we invisibly show them\n\t\t\t\t// but it must have a current display style that would benefit\n\t\t\t\treturn rdisplayswap.test( jQuery.css( elem, \"display\" ) ) &&\n\n\t\t\t\t\t// Support: Safari 8+\n\t\t\t\t\t// Table columns in Safari have non-zero offsetWidth & zero\n\t\t\t\t\t// getBoundingClientRect().width unless display is changed.\n\t\t\t\t\t// Support: IE <=11 only\n\t\t\t\t\t// Running getBoundingClientRect on a disconnected node\n\t\t\t\t\t// in IE throws an error.\n\t\t\t\t\t( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?\n\t\t\t\t\tswap( elem, cssShow, function() {\n\t\t\t\t\t\treturn getWidthOrHeight( elem, dimension, extra );\n\t\t\t\t\t} ) :\n\t\t\t\t\tgetWidthOrHeight( elem, dimension, extra );\n\t\t\t}\n\t\t},\n\n\t\tset: function( elem, value, extra ) {\n\t\t\tvar matches,\n\t\t\t\tstyles = getStyles( elem ),\n\n\t\t\t\t// Only read styles.position if the test has a chance to fail\n\t\t\t\t// to avoid forcing a reflow.\n\t\t\t\tscrollboxSizeBuggy = !support.scrollboxSize() &&\n\t\t\t\t\tstyles.position === \"absolute\",\n\n\t\t\t\t// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)\n\t\t\t\tboxSizingNeeded = scrollboxSizeBuggy || extra,\n\t\t\t\tisBorderBox = boxSizingNeeded &&\n\t\t\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\t\t\tsubtract = extra ?\n\t\t\t\t\tboxModelAdjustment(\n\t\t\t\t\t\telem,\n\t\t\t\t\t\tdimension,\n\t\t\t\t\t\textra,\n\t\t\t\t\t\tisBorderBox,\n\t\t\t\t\t\tstyles\n\t\t\t\t\t) :\n\t\t\t\t\t0;\n\n\t\t\t// Account for unreliable border-box dimensions by comparing offset* to computed and\n\t\t\t// faking a content-box to get border and padding (gh-3699)\n\t\t\tif ( isBorderBox && scrollboxSizeBuggy ) {\n\t\t\t\tsubtract -= Math.ceil(\n\t\t\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\t\t\tparseFloat( styles[ dimension ] ) -\n\t\t\t\t\tboxModelAdjustment( elem, dimension, \"border\", false, styles ) -\n\t\t\t\t\t0.5\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Convert to pixels if value adjustment is needed\n\t\t\tif ( subtract && ( matches = rcssNum.exec( value ) ) &&\n\t\t\t\t( matches[ 3 ] || \"px\" ) !== \"px\" ) {\n\n\t\t\t\telem.style[ dimension ] = value;\n\t\t\t\tvalue = jQuery.css( elem, dimension );\n\t\t\t}\n\n\t\t\treturn setPositiveNumber( elem, value, subtract );\n\t\t}\n\t};\n} );\n\njQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,\n\tfunction( elem, computed ) {\n\t\tif ( computed ) {\n\t\t\treturn ( parseFloat( curCSS( elem, \"marginLeft\" ) ) ||\n\t\t\t\telem.getBoundingClientRect().left -\n\t\t\t\t\tswap( elem, { marginLeft: 0 }, function() {\n\t\t\t\t\t\treturn elem.getBoundingClientRect().left;\n\t\t\t\t\t} )\n\t\t\t) + \"px\";\n\t\t}\n\t}\n);\n\n// These hooks are used by animate to expand properties\njQuery.each( {\n\tmargin: \"\",\n\tpadding: \"\",\n\tborder: \"Width\"\n}, function( prefix, suffix ) {\n\tjQuery.cssHooks[ prefix + suffix ] = {\n\t\texpand: function( value ) {\n\t\t\tvar i = 0,\n\t\t\t\texpanded = {},\n\n\t\t\t\t// Assumes a single number if not a string\n\t\t\t\tparts = typeof value === \"string\" ? value.split( \" \" ) : [ value ];\n\n\t\t\tfor ( ; i < 4; i++ ) {\n\t\t\t\texpanded[ prefix + cssExpand[ i ] + suffix ] =\n\t\t\t\t\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];\n\t\t\t}\n\n\t\t\treturn expanded;\n\t\t}\n\t};\n\n\tif ( prefix !== \"margin\" ) {\n\t\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\n\t}\n} );\n\njQuery.fn.extend( {\n\tcss: function( name, value ) {\n\t\treturn access( this, function( elem, name, value ) {\n\t\t\tvar styles, len,\n\t\t\t\tmap = {},\n\t\t\t\ti = 0;\n\n\t\t\tif ( Array.isArray( name ) ) {\n\t\t\t\tstyles = getStyles( elem );\n\t\t\t\tlen = name.length;\n\n\t\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\t\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\n\t\t\t\t}\n\n\t\t\t\treturn map;\n\t\t\t}\n\n\t\t\treturn value !== undefined ?\n\t\t\t\tjQuery.style( elem, name, value ) :\n\t\t\t\tjQuery.css( elem, name );\n\t\t}, name, value, arguments.length > 1 );\n\t}\n} );\n\n\nfunction Tween( elem, options, prop, end, easing ) {\n\treturn new Tween.prototype.init( elem, options, prop, end, easing );\n}\njQuery.Tween = Tween;\n\nTween.prototype = {\n\tconstructor: Tween,\n\tinit: function( elem, options, prop, end, easing, unit ) {\n\t\tthis.elem = elem;\n\t\tthis.prop = prop;\n\t\tthis.easing = easing || jQuery.easing._default;\n\t\tthis.options = options;\n\t\tthis.start = this.now = this.cur();\n\t\tthis.end = end;\n\t\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\n\t},\n\tcur: function() {\n\t\tvar hooks = Tween.propHooks[ this.prop ];\n\n\t\treturn hooks && hooks.get ?\n\t\t\thooks.get( this ) :\n\t\t\tTween.propHooks._default.get( this );\n\t},\n\trun: function( percent ) {\n\t\tvar eased,\n\t\t\thooks = Tween.propHooks[ this.prop ];\n\n\t\tif ( this.options.duration ) {\n\t\t\tthis.pos = eased = jQuery.easing[ this.easing ](\n\t\t\t\tpercent, this.options.duration * percent, 0, 1, this.options.duration\n\t\t\t);\n\t\t} else {\n\t\t\tthis.pos = eased = percent;\n\t\t}\n\t\tthis.now = ( this.end - this.start ) * eased + this.start;\n\n\t\tif ( this.options.step ) {\n\t\t\tthis.options.step.call( this.elem, this.now, this );\n\t\t}\n\n\t\tif ( hooks && hooks.set ) {\n\t\t\thooks.set( this );\n\t\t} else {\n\t\t\tTween.propHooks._default.set( this );\n\t\t}\n\t\treturn this;\n\t}\n};\n\nTween.prototype.init.prototype = Tween.prototype;\n\nTween.propHooks = {\n\t_default: {\n\t\tget: function( tween ) {\n\t\t\tvar result;\n\n\t\t\t// Use a property on the element directly when it is not a DOM element,\n\t\t\t// or when there is no matching style property that exists.\n\t\t\tif ( tween.elem.nodeType !== 1 ||\n\t\t\t\ttween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {\n\t\t\t\treturn tween.elem[ tween.prop ];\n\t\t\t}\n\n\t\t\t// Passing an empty string as a 3rd parameter to .css will automatically\n\t\t\t// attempt a parseFloat and fallback to a string if the parse fails.\n\t\t\t// Simple values such as \"10px\" are parsed to Float;\n\t\t\t// complex values such as \"rotate(1rad)\" are returned as-is.\n\t\t\tresult = jQuery.css( tween.elem, tween.prop, \"\" );\n\n\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\n\t\t\treturn !result || result === \"auto\" ? 0 : result;\n\t\t},\n\t\tset: function( tween ) {\n\n\t\t\t// Use step hook for back compat.\n\t\t\t// Use cssHook if its there.\n\t\t\t// Use .style if available and use plain properties where available.\n\t\t\tif ( jQuery.fx.step[ tween.prop ] ) {\n\t\t\t\tjQuery.fx.step[ tween.prop ]( tween );\n\t\t\t} else if ( tween.elem.nodeType === 1 && (\n\t\t\t\tjQuery.cssHooks[ tween.prop ] ||\n\t\t\t\t\ttween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {\n\t\t\t\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\n\t\t\t} else {\n\t\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Support: IE <=9 only\n// Panic based approach to setting things on disconnected nodes\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n\tset: function( tween ) {\n\t\tif ( tween.elem.nodeType && tween.elem.parentNode ) {\n\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t}\n\t}\n};\n\njQuery.easing = {\n\tlinear: function( p ) {\n\t\treturn p;\n\t},\n\tswing: function( p ) {\n\t\treturn 0.5 - Math.cos( p * Math.PI ) / 2;\n\t},\n\t_default: \"swing\"\n};\n\njQuery.fx = Tween.prototype.init;\n\n// Back compat <1.8 extension point\njQuery.fx.step = {};\n\n\n\n\nvar\n\tfxNow, inProgress,\n\trfxtypes = /^(?:toggle|show|hide)$/,\n\trrun = /queueHooks$/;\n\nfunction schedule() {\n\tif ( inProgress ) {\n\t\tif ( document.hidden === false && window.requestAnimationFrame ) {\n\t\t\twindow.requestAnimationFrame( schedule );\n\t\t} else {\n\t\t\twindow.setTimeout( schedule, jQuery.fx.interval );\n\t\t}\n\n\t\tjQuery.fx.tick();\n\t}\n}\n\n// Animations created synchronously will run synchronously\nfunction createFxNow() {\n\twindow.setTimeout( function() {\n\t\tfxNow = undefined;\n\t} );\n\treturn ( fxNow = Date.now() );\n}\n\n// Generate parameters to create a standard animation\nfunction genFx( type, includeWidth ) {\n\tvar which,\n\t\ti = 0,\n\t\tattrs = { height: type };\n\n\t// If we include width, step value is 1 to do all cssExpand values,\n\t// otherwise step value is 2 to skip over Left and Right\n\tincludeWidth = includeWidth ? 1 : 0;\n\tfor ( ; i < 4; i += 2 - includeWidth ) {\n\t\twhich = cssExpand[ i ];\n\t\tattrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;\n\t}\n\n\tif ( includeWidth ) {\n\t\tattrs.opacity = attrs.width = type;\n\t}\n\n\treturn attrs;\n}\n\nfunction createTween( value, prop, animation ) {\n\tvar tween,\n\t\tcollection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ \"*\" ] ),\n\t\tindex = 0,\n\t\tlength = collection.length;\n\tfor ( ; index < length; index++ ) {\n\t\tif ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {\n\n\t\t\t// We're done with this property\n\t\t\treturn tween;\n\t\t}\n\t}\n}\n\nfunction defaultPrefilter( elem, props, opts ) {\n\tvar prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,\n\t\tisBox = \"width\" in props || \"height\" in props,\n\t\tanim = this,\n\t\torig = {},\n\t\tstyle = elem.style,\n\t\thidden = elem.nodeType && isHiddenWithinTree( elem ),\n\t\tdataShow = dataPriv.get( elem, \"fxshow\" );\n\n\t// Queue-skipping animations hijack the fx hooks\n\tif ( !opts.queue ) {\n\t\thooks = jQuery._queueHooks( elem, \"fx\" );\n\t\tif ( hooks.unqueued == null ) {\n\t\t\thooks.unqueued = 0;\n\t\t\toldfire = hooks.empty.fire;\n\t\t\thooks.empty.fire = function() {\n\t\t\t\tif ( !hooks.unqueued ) {\n\t\t\t\t\toldfire();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\thooks.unqueued++;\n\n\t\tanim.always( function() {\n\n\t\t\t// Ensure the complete handler is called before this completes\n\t\t\tanim.always( function() {\n\t\t\t\thooks.unqueued--;\n\t\t\t\tif ( !jQuery.queue( elem, \"fx\" ).length ) {\n\t\t\t\t\thooks.empty.fire();\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t// Detect show/hide animations\n\tfor ( prop in props ) {\n\t\tvalue = props[ prop ];\n\t\tif ( rfxtypes.test( value ) ) {\n\t\t\tdelete props[ prop ];\n\t\t\ttoggle = toggle || value === \"toggle\";\n\t\t\tif ( value === ( hidden ? \"hide\" : \"show\" ) ) {\n\n\t\t\t\t// Pretend to be hidden if this is a \"show\" and\n\t\t\t\t// there is still data from a stopped show/hide\n\t\t\t\tif ( value === \"show\" && dataShow && dataShow[ prop ] !== undefined ) {\n\t\t\t\t\thidden = true;\n\n\t\t\t\t// Ignore all other no-op show/hide data\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\n\t\t}\n\t}\n\n\t// Bail out if this is a no-op like .hide().hide()\n\tpropTween = !jQuery.isEmptyObject( props );\n\tif ( !propTween && jQuery.isEmptyObject( orig ) ) {\n\t\treturn;\n\t}\n\n\t// Restrict \"overflow\" and \"display\" styles during box animations\n\tif ( isBox && elem.nodeType === 1 ) {\n\n\t\t// Support: IE <=9 - 11, Edge 12 - 15\n\t\t// Record all 3 overflow attributes because IE does not infer the shorthand\n\t\t// from identically-valued overflowX and overflowY and Edge just mirrors\n\t\t// the overflowX value there.\n\t\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\n\n\t\t// Identify a display type, preferring old show/hide data over the CSS cascade\n\t\trestoreDisplay = dataShow && dataShow.display;\n\t\tif ( restoreDisplay == null ) {\n\t\t\trestoreDisplay = dataPriv.get( elem, \"display\" );\n\t\t}\n\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\tif ( display === \"none\" ) {\n\t\t\tif ( restoreDisplay ) {\n\t\t\t\tdisplay = restoreDisplay;\n\t\t\t} else {\n\n\t\t\t\t// Get nonempty value(s) by temporarily forcing visibility\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t\trestoreDisplay = elem.style.display || restoreDisplay;\n\t\t\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\t\t\tshowHide( [ elem ] );\n\t\t\t}\n\t\t}\n\n\t\t// Animate inline elements as inline-block\n\t\tif ( display === \"inline\" || display === \"inline-block\" && restoreDisplay != null ) {\n\t\t\tif ( jQuery.css( elem, \"float\" ) === \"none\" ) {\n\n\t\t\t\t// Restore the original display value at the end of pure show/hide animations\n\t\t\t\tif ( !propTween ) {\n\t\t\t\t\tanim.done( function() {\n\t\t\t\t\t\tstyle.display = restoreDisplay;\n\t\t\t\t\t} );\n\t\t\t\t\tif ( restoreDisplay == null ) {\n\t\t\t\t\t\tdisplay = style.display;\n\t\t\t\t\t\trestoreDisplay = display === \"none\" ? \"\" : display;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstyle.display = \"inline-block\";\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( opts.overflow ) {\n\t\tstyle.overflow = \"hidden\";\n\t\tanim.always( function() {\n\t\t\tstyle.overflow = opts.overflow[ 0 ];\n\t\t\tstyle.overflowX = opts.overflow[ 1 ];\n\t\t\tstyle.overflowY = opts.overflow[ 2 ];\n\t\t} );\n\t}\n\n\t// Implement show/hide animations\n\tpropTween = false;\n\tfor ( prop in orig ) {\n\n\t\t// General show/hide setup for this element animation\n\t\tif ( !propTween ) {\n\t\t\tif ( dataShow ) {\n\t\t\t\tif ( \"hidden\" in dataShow ) {\n\t\t\t\t\thidden = dataShow.hidden;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdataShow = dataPriv.access( elem, \"fxshow\", { display: restoreDisplay } );\n\t\t\t}\n\n\t\t\t// Store hidden/visible for toggle so `.stop().toggle()` \"reverses\"\n\t\t\tif ( toggle ) {\n\t\t\t\tdataShow.hidden = !hidden;\n\t\t\t}\n\n\t\t\t// Show elements before animating them\n\t\t\tif ( hidden ) {\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t}\n\n\t\t\t/* eslint-disable no-loop-func */\n\n\t\t\tanim.done( function() {\n\n\t\t\t\t/* eslint-enable no-loop-func */\n\n\t\t\t\t// The final step of a \"hide\" animation is actually hiding the element\n\t\t\t\tif ( !hidden ) {\n\t\t\t\t\tshowHide( [ elem ] );\n\t\t\t\t}\n\t\t\t\tdataPriv.remove( elem, \"fxshow\" );\n\t\t\t\tfor ( prop in orig ) {\n\t\t\t\t\tjQuery.style( elem, prop, orig[ prop ] );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t// Per-property setup\n\t\tpropTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\n\t\tif ( !( prop in dataShow ) ) {\n\t\t\tdataShow[ prop ] = propTween.start;\n\t\t\tif ( hidden ) {\n\t\t\t\tpropTween.end = propTween.start;\n\t\t\t\tpropTween.start = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction propFilter( props, specialEasing ) {\n\tvar index, name, easing, value, hooks;\n\n\t// camelCase, specialEasing and expand cssHook pass\n\tfor ( index in props ) {\n\t\tname = camelCase( index );\n\t\teasing = specialEasing[ name ];\n\t\tvalue = props[ index ];\n\t\tif ( Array.isArray( value ) ) {\n\t\t\teasing = value[ 1 ];\n\t\t\tvalue = props[ index ] = value[ 0 ];\n\t\t}\n\n\t\tif ( index !== name ) {\n\t\t\tprops[ name ] = value;\n\t\t\tdelete props[ index ];\n\t\t}\n\n\t\thooks = jQuery.cssHooks[ name ];\n\t\tif ( hooks && \"expand\" in hooks ) {\n\t\t\tvalue = hooks.expand( value );\n\t\t\tdelete props[ name ];\n\n\t\t\t// Not quite $.extend, this won't overwrite existing keys.\n\t\t\t// Reusing 'index' because we have the correct \"name\"\n\t\t\tfor ( index in value ) {\n\t\t\t\tif ( !( index in props ) ) {\n\t\t\t\t\tprops[ index ] = value[ index ];\n\t\t\t\t\tspecialEasing[ index ] = easing;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tspecialEasing[ name ] = easing;\n\t\t}\n\t}\n}\n\nfunction Animation( elem, properties, options ) {\n\tvar result,\n\t\tstopped,\n\t\tindex = 0,\n\t\tlength = Animation.prefilters.length,\n\t\tdeferred = jQuery.Deferred().always( function() {\n\n\t\t\t// Don't match elem in the :animated selector\n\t\t\tdelete tick.elem;\n\t\t} ),\n\t\ttick = function() {\n\t\t\tif ( stopped ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar currentTime = fxNow || createFxNow(),\n\t\t\t\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\n\n\t\t\t\t// Support: Android 2.3 only\n\t\t\t\t// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (trac-12497)\n\t\t\t\ttemp = remaining / animation.duration || 0,\n\t\t\t\tpercent = 1 - temp,\n\t\t\t\tindex = 0,\n\t\t\t\tlength = animation.tweens.length;\n\n\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\tanimation.tweens[ index ].run( percent );\n\t\t\t}\n\n\t\t\tdeferred.notifyWith( elem, [ animation, percent, remaining ] );\n\n\t\t\t// If there's more to do, yield\n\t\t\tif ( percent < 1 && length ) {\n\t\t\t\treturn remaining;\n\t\t\t}\n\n\t\t\t// If this was an empty animation, synthesize a final progress notification\n\t\t\tif ( !length ) {\n\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t}\n\n\t\t\t// Resolve the animation and report its conclusion\n\t\t\tdeferred.resolveWith( elem, [ animation ] );\n\t\t\treturn false;\n\t\t},\n\t\tanimation = deferred.promise( {\n\t\t\telem: elem,\n\t\t\tprops: jQuery.extend( {}, properties ),\n\t\t\topts: jQuery.extend( true, {\n\t\t\t\tspecialEasing: {},\n\t\t\t\teasing: jQuery.easing._default\n\t\t\t}, options ),\n\t\t\toriginalProperties: properties,\n\t\t\toriginalOptions: options,\n\t\t\tstartTime: fxNow || createFxNow(),\n\t\t\tduration: options.duration,\n\t\t\ttweens: [],\n\t\t\tcreateTween: function( prop, end ) {\n\t\t\t\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,\n\t\t\t\t\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );\n\t\t\t\tanimation.tweens.push( tween );\n\t\t\t\treturn tween;\n\t\t\t},\n\t\t\tstop: function( gotoEnd ) {\n\t\t\t\tvar index = 0,\n\n\t\t\t\t\t// If we are going to the end, we want to run all the tweens\n\t\t\t\t\t// otherwise we skip this part\n\t\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n\t\t\t\tif ( stopped ) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tstopped = true;\n\t\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\t\tanimation.tweens[ index ].run( 1 );\n\t\t\t\t}\n\n\t\t\t\t// Resolve when we played the last frame; otherwise, reject\n\t\t\t\tif ( gotoEnd ) {\n\t\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t\t\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t} ),\n\t\tprops = animation.props;\n\n\tpropFilter( props, animation.opts.specialEasing );\n\n\tfor ( ; index < length; index++ ) {\n\t\tresult = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );\n\t\tif ( result ) {\n\t\t\tif ( isFunction( result.stop ) ) {\n\t\t\t\tjQuery._queueHooks( animation.elem, animation.opts.queue ).stop =\n\t\t\t\t\tresult.stop.bind( result );\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tjQuery.map( props, createTween, animation );\n\n\tif ( isFunction( animation.opts.start ) ) {\n\t\tanimation.opts.start.call( elem, animation );\n\t}\n\n\t// Attach callbacks from options\n\tanimation\n\t\t.progress( animation.opts.progress )\n\t\t.done( animation.opts.done, animation.opts.complete )\n\t\t.fail( animation.opts.fail )\n\t\t.always( animation.opts.always );\n\n\tjQuery.fx.timer(\n\t\tjQuery.extend( tick, {\n\t\t\telem: elem,\n\t\t\tanim: animation,\n\t\t\tqueue: animation.opts.queue\n\t\t} )\n\t);\n\n\treturn animation;\n}\n\njQuery.Animation = jQuery.extend( Animation, {\n\n\ttweeners: {\n\t\t\"*\": [ function( prop, value ) {\n\t\t\tvar tween = this.createTween( prop, value );\n\t\t\tadjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );\n\t\t\treturn tween;\n\t\t} ]\n\t},\n\n\ttweener: function( props, callback ) {\n\t\tif ( isFunction( props ) ) {\n\t\t\tcallback = props;\n\t\t\tprops = [ \"*\" ];\n\t\t} else {\n\t\t\tprops = props.match( rnothtmlwhite );\n\t\t}\n\n\t\tvar prop,\n\t\t\tindex = 0,\n\t\t\tlength = props.length;\n\n\t\tfor ( ; index < length; index++ ) {\n\t\t\tprop = props[ index ];\n\t\t\tAnimation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];\n\t\t\tAnimation.tweeners[ prop ].unshift( callback );\n\t\t}\n\t},\n\n\tprefilters: [ defaultPrefilter ],\n\n\tprefilter: function( callback, prepend ) {\n\t\tif ( prepend ) {\n\t\t\tAnimation.prefilters.unshift( callback );\n\t\t} else {\n\t\t\tAnimation.prefilters.push( callback );\n\t\t}\n\t}\n} );\n\njQuery.speed = function( speed, easing, fn ) {\n\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\n\t\tcomplete: fn || !fn && easing ||\n\t\t\tisFunction( speed ) && speed,\n\t\tduration: speed,\n\t\teasing: fn && easing || easing && !isFunction( easing ) && easing\n\t};\n\n\t// Go to the end state if fx are off\n\tif ( jQuery.fx.off ) {\n\t\topt.duration = 0;\n\n\t} else {\n\t\tif ( typeof opt.duration !== \"number\" ) {\n\t\t\tif ( opt.duration in jQuery.fx.speeds ) {\n\t\t\t\topt.duration = jQuery.fx.speeds[ opt.duration ];\n\n\t\t\t} else {\n\t\t\t\topt.duration = jQuery.fx.speeds._default;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize opt.queue - true/undefined/null -> \"fx\"\n\tif ( opt.queue == null || opt.queue === true ) {\n\t\topt.queue = \"fx\";\n\t}\n\n\t// Queueing\n\topt.old = opt.complete;\n\n\topt.complete = function() {\n\t\tif ( isFunction( opt.old ) ) {\n\t\t\topt.old.call( this );\n\t\t}\n\n\t\tif ( opt.queue ) {\n\t\t\tjQuery.dequeue( this, opt.queue );\n\t\t}\n\t};\n\n\treturn opt;\n};\n\njQuery.fn.extend( {\n\tfadeTo: function( speed, to, easing, callback ) {\n\n\t\t// Show any hidden elements after setting opacity to 0\n\t\treturn this.filter( isHiddenWithinTree ).css( \"opacity\", 0 ).show()\n\n\t\t\t// Animate to the value specified\n\t\t\t.end().animate( { opacity: to }, speed, easing, callback );\n\t},\n\tanimate: function( prop, speed, easing, callback ) {\n\t\tvar empty = jQuery.isEmptyObject( prop ),\n\t\t\toptall = jQuery.speed( speed, easing, callback ),\n\t\t\tdoAnimation = function() {\n\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\n\t\t\t\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );\n\n\t\t\t\t// Empty animations, or finishing resolves immediately\n\t\t\t\tif ( empty || dataPriv.get( this, \"finish\" ) ) {\n\t\t\t\t\tanim.stop( true );\n\t\t\t\t}\n\t\t\t};\n\n\t\tdoAnimation.finish = doAnimation;\n\n\t\treturn empty || optall.queue === false ?\n\t\t\tthis.each( doAnimation ) :\n\t\t\tthis.queue( optall.queue, doAnimation );\n\t},\n\tstop: function( type, clearQueue, gotoEnd ) {\n\t\tvar stopQueue = function( hooks ) {\n\t\t\tvar stop = hooks.stop;\n\t\t\tdelete hooks.stop;\n\t\t\tstop( gotoEnd );\n\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tgotoEnd = clearQueue;\n\t\t\tclearQueue = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\tif ( clearQueue ) {\n\t\t\tthis.queue( type || \"fx\", [] );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar dequeue = true,\n\t\t\t\tindex = type != null && type + \"queueHooks\",\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tdata = dataPriv.get( this );\n\n\t\t\tif ( index ) {\n\t\t\t\tif ( data[ index ] && data[ index ].stop ) {\n\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( index in data ) {\n\t\t\t\t\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\n\t\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this &&\n\t\t\t\t\t( type == null || timers[ index ].queue === type ) ) {\n\n\t\t\t\t\ttimers[ index ].anim.stop( gotoEnd );\n\t\t\t\t\tdequeue = false;\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Start the next in the queue if the last step wasn't forced.\n\t\t\t// Timers currently will call their complete callbacks, which\n\t\t\t// will dequeue but only if they were gotoEnd.\n\t\t\tif ( dequeue || !gotoEnd ) {\n\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t}\n\t\t} );\n\t},\n\tfinish: function( type ) {\n\t\tif ( type !== false ) {\n\t\t\ttype = type || \"fx\";\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tvar index,\n\t\t\t\tdata = dataPriv.get( this ),\n\t\t\t\tqueue = data[ type + \"queue\" ],\n\t\t\t\thooks = data[ type + \"queueHooks\" ],\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tlength = queue ? queue.length : 0;\n\n\t\t\t// Enable finishing flag on private data\n\t\t\tdata.finish = true;\n\n\t\t\t// Empty the queue first\n\t\t\tjQuery.queue( this, type, [] );\n\n\t\t\tif ( hooks && hooks.stop ) {\n\t\t\t\thooks.stop.call( this, true );\n\t\t\t}\n\n\t\t\t// Look for any active animations, and finish them\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this && timers[ index ].queue === type ) {\n\t\t\t\t\ttimers[ index ].anim.stop( true );\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Look for any animations in the old queue and finish them\n\t\t\tfor ( index = 0; index < length; index++ ) {\n\t\t\t\tif ( queue[ index ] && queue[ index ].finish ) {\n\t\t\t\t\tqueue[ index ].finish.call( this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Turn off finishing flag\n\t\t\tdelete data.finish;\n\t\t} );\n\t}\n} );\n\njQuery.each( [ \"toggle\", \"show\", \"hide\" ], function( _i, name ) {\n\tvar cssFn = jQuery.fn[ name ];\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn speed == null || typeof speed === \"boolean\" ?\n\t\t\tcssFn.apply( this, arguments ) :\n\t\t\tthis.animate( genFx( name, true ), speed, easing, callback );\n\t};\n} );\n\n// Generate shortcuts for custom animations\njQuery.each( {\n\tslideDown: genFx( \"show\" ),\n\tslideUp: genFx( \"hide\" ),\n\tslideToggle: genFx( \"toggle\" ),\n\tfadeIn: { opacity: \"show\" },\n\tfadeOut: { opacity: \"hide\" },\n\tfadeToggle: { opacity: \"toggle\" }\n}, function( name, props ) {\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn this.animate( props, speed, easing, callback );\n\t};\n} );\n\njQuery.timers = [];\njQuery.fx.tick = function() {\n\tvar timer,\n\t\ti = 0,\n\t\ttimers = jQuery.timers;\n\n\tfxNow = Date.now();\n\n\tfor ( ; i < timers.length; i++ ) {\n\t\ttimer = timers[ i ];\n\n\t\t// Run the timer and safely remove it when done (allowing for external removal)\n\t\tif ( !timer() && timers[ i ] === timer ) {\n\t\t\ttimers.splice( i--, 1 );\n\t\t}\n\t}\n\n\tif ( !timers.length ) {\n\t\tjQuery.fx.stop();\n\t}\n\tfxNow = undefined;\n};\n\njQuery.fx.timer = function( timer ) {\n\tjQuery.timers.push( timer );\n\tjQuery.fx.start();\n};\n\njQuery.fx.interval = 13;\njQuery.fx.start = function() {\n\tif ( inProgress ) {\n\t\treturn;\n\t}\n\n\tinProgress = true;\n\tschedule();\n};\n\njQuery.fx.stop = function() {\n\tinProgress = null;\n};\n\njQuery.fx.speeds = {\n\tslow: 600,\n\tfast: 200,\n\n\t// Default speed\n\t_default: 400\n};\n\n\n// Based off of the plugin by Clint Helfers, with permission.\njQuery.fn.delay = function( time, type ) {\n\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\n\ttype = type || \"fx\";\n\n\treturn this.queue( type, function( next, hooks ) {\n\t\tvar timeout = window.setTimeout( next, time );\n\t\thooks.stop = function() {\n\t\t\twindow.clearTimeout( timeout );\n\t\t};\n\t} );\n};\n\n\n( function() {\n\tvar input = document.createElement( \"input\" ),\n\t\tselect = document.createElement( \"select\" ),\n\t\topt = select.appendChild( document.createElement( \"option\" ) );\n\n\tinput.type = \"checkbox\";\n\n\t// Support: Android <=4.3 only\n\t// Default value for a checkbox should be \"on\"\n\tsupport.checkOn = input.value !== \"\";\n\n\t// Support: IE <=11 only\n\t// Must access selectedIndex to make default options select\n\tsupport.optSelected = opt.selected;\n\n\t// Support: IE <=11 only\n\t// An input loses its value after becoming a radio\n\tinput = document.createElement( \"input\" );\n\tinput.value = \"t\";\n\tinput.type = \"radio\";\n\tsupport.radioValue = input.value === \"t\";\n} )();\n\n\nvar boolHook,\n\tattrHandle = jQuery.expr.attrHandle;\n\njQuery.fn.extend( {\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeAttr( this, name );\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tattr: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\n\t\t\treturn jQuery.prop( elem, name, value );\n\t\t}\n\n\t\t// Attribute hooks are determined by the lowercase version\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\thooks = jQuery.attrHooks[ name.toLowerCase() ] ||\n\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\telem.setAttribute( name, value + \"\" );\n\t\t\treturn value;\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tret = jQuery.find.attr( elem, name );\n\n\t\t// Non-existent attributes return null, we normalize to undefined\n\t\treturn ret == null ? undefined : ret;\n\t},\n\n\tattrHooks: {\n\t\ttype: {\n\t\t\tset: function( elem, value ) {\n\t\t\t\tif ( !support.radioValue && value === \"radio\" &&\n\t\t\t\t\tnodeName( elem, \"input\" ) ) {\n\t\t\t\t\tvar val = elem.value;\n\t\t\t\t\telem.setAttribute( \"type\", value );\n\t\t\t\t\tif ( val ) {\n\t\t\t\t\t\telem.value = val;\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tremoveAttr: function( elem, value ) {\n\t\tvar name,\n\t\t\ti = 0,\n\n\t\t\t// Attribute names can contain non-HTML whitespace characters\n\t\t\t// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n\t\t\tattrNames = value && value.match( rnothtmlwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n\t\t\t\telem.removeAttribute( name );\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Hooks for boolean attributes\nboolHook = {\n\tset: function( elem, value, name ) {\n\t\tif ( value === false ) {\n\n\t\t\t// Remove boolean attributes when set to false\n\t\t\tjQuery.removeAttr( elem, name );\n\t\t} else {\n\t\t\telem.setAttribute( name, name );\n\t\t}\n\t\treturn name;\n\t}\n};\n\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( _i, name ) {\n\tvar getter = attrHandle[ name ] || jQuery.find.attr;\n\n\tattrHandle[ name ] = function( elem, name, isXML ) {\n\t\tvar ret, handle,\n\t\t\tlowercaseName = name.toLowerCase();\n\n\t\tif ( !isXML ) {\n\n\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\n\t\t\thandle = attrHandle[ lowercaseName ];\n\t\t\tattrHandle[ lowercaseName ] = ret;\n\t\t\tret = getter( elem, name, isXML ) != null ?\n\t\t\t\tlowercaseName :\n\t\t\t\tnull;\n\t\t\tattrHandle[ lowercaseName ] = handle;\n\t\t}\n\t\treturn ret;\n\t};\n} );\n\n\n\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\n\trclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn ( elem[ name ] = value );\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn elem[ name ];\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\t// Support: IE <=9 - 11 only\n\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t// Use proper attribute retrieval (trac-12072)\n\t\t\t\tvar tabindex = jQuery.find.attr( elem, \"tabindex\" );\n\n\t\t\t\tif ( tabindex ) {\n\t\t\t\t\treturn parseInt( tabindex, 10 );\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n\t\t\t\t\trclickable.test( elem.nodeName ) &&\n\t\t\t\t\telem.href\n\t\t\t\t) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t},\n\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t}\n} );\n\n// Support: IE <=11 only\n// Accessing the selectedIndex property\n// forces the browser to respect setting selected\n// on the option\n// The getter ensures a default option is selected\n// when in an optgroup\n// eslint rule \"no-unused-expressions\" is disabled for this code\n// since it considers such accessions noop\nif ( !support.optSelected ) {\n\tjQuery.propHooks.selected = {\n\t\tget: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent && parent.parentNode ) {\n\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tset: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent ) {\n\t\t\t\tparent.selectedIndex;\n\n\t\t\t\tif ( parent.parentNode ) {\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( [\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\tjQuery.propFix[ this.toLowerCase() ] = this;\n} );\n\n\n\n\n\t// Strip and collapse whitespace according to HTML spec\n\t// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\n\tfunction stripAndCollapse( value ) {\n\t\tvar tokens = value.match( rnothtmlwhite ) || [];\n\t\treturn tokens.join( \" \" );\n\t}\n\n\nfunction getClass( elem ) {\n\treturn elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\n}\n\nfunction classesToArray( value ) {\n\tif ( Array.isArray( value ) ) {\n\t\treturn value;\n\t}\n\tif ( typeof value === \"string\" ) {\n\t\treturn value.match( rnothtmlwhite ) || [];\n\t}\n\treturn [];\n}\n\njQuery.fn.extend( {\n\taddClass: function( value ) {\n\t\tvar classNames, cur, curValue, className, i, finalValue;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tclassNames = classesToArray( value );\n\n\t\tif ( classNames.length ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tcurValue = getClass( this );\n\t\t\t\tcur = this.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tfor ( i = 0; i < classNames.length; i++ ) {\n\t\t\t\t\t\tclassName = classNames[ i ];\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + className + \" \" ) < 0 ) {\n\t\t\t\t\t\t\tcur += className + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\tthis.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremoveClass: function( value ) {\n\t\tvar classNames, cur, curValue, className, i, finalValue;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( !arguments.length ) {\n\t\t\treturn this.attr( \"class\", \"\" );\n\t\t}\n\n\t\tclassNames = classesToArray( value );\n\n\t\tif ( classNames.length ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tcurValue = getClass( this );\n\n\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\tcur = this.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tfor ( i = 0; i < classNames.length; i++ ) {\n\t\t\t\t\t\tclassName = classNames[ i ];\n\n\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + className + \" \" ) > -1 ) {\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + className + \" \", \" \" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\tthis.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttoggleClass: function( value, stateVal ) {\n\t\tvar classNames, className, i, self,\n\t\t\ttype = typeof value,\n\t\t\tisValidValue = type === \"string\" || Array.isArray( value );\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).toggleClass(\n\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\n\t\t\t\t\tstateVal\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\tif ( typeof stateVal === \"boolean\" && isValidValue ) {\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n\t\t}\n\n\t\tclassNames = classesToArray( value );\n\n\t\treturn this.each( function() {\n\t\t\tif ( isValidValue ) {\n\n\t\t\t\t// Toggle individual class names\n\t\t\t\tself = jQuery( this );\n\n\t\t\t\tfor ( i = 0; i < classNames.length; i++ ) {\n\t\t\t\t\tclassName = classNames[ i ];\n\n\t\t\t\t\t// Check each className given, space separated list\n\t\t\t\t\tif ( self.hasClass( className ) ) {\n\t\t\t\t\t\tself.removeClass( className );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.addClass( className );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// Toggle whole class name\n\t\t\t} else if ( value === undefined || type === \"boolean\" ) {\n\t\t\t\tclassName = getClass( this );\n\t\t\t\tif ( className ) {\n\n\t\t\t\t\t// Store className if set\n\t\t\t\t\tdataPriv.set( this, \"__className__\", className );\n\t\t\t\t}\n\n\t\t\t\t// If the element has a class name or if we're passed `false`,\n\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n\t\t\t\t// falling back to the empty string if nothing was stored.\n\t\t\t\tif ( this.setAttribute ) {\n\t\t\t\t\tthis.setAttribute( \"class\",\n\t\t\t\t\t\tclassName || value === false ?\n\t\t\t\t\t\t\t\"\" :\n\t\t\t\t\t\t\tdataPriv.get( this, \"__className__\" ) || \"\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\thasClass: function( selector ) {\n\t\tvar className, elem,\n\t\t\ti = 0;\n\n\t\tclassName = \" \" + selector + \" \";\n\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\tif ( elem.nodeType === 1 &&\n\t\t\t\t( \" \" + stripAndCollapse( getClass( elem ) ) + \" \" ).indexOf( className ) > -1 ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n} );\n\n\n\n\nvar rreturn = /\\r/g;\n\njQuery.fn.extend( {\n\tval: function( value ) {\n\t\tvar hooks, ret, valueIsFunction,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !arguments.length ) {\n\t\t\tif ( elem ) {\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\n\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n\t\t\t\tif ( hooks &&\n\t\t\t\t\t\"get\" in hooks &&\n\t\t\t\t\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\n\t\t\t\t) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\tret = elem.value;\n\n\t\t\t\t// Handle most common string cases\n\t\t\t\tif ( typeof ret === \"string\" ) {\n\t\t\t\t\treturn ret.replace( rreturn, \"\" );\n\t\t\t\t}\n\n\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\treturn ret == null ? \"\" : ret;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tvalueIsFunction = isFunction( value );\n\n\t\treturn this.each( function( i ) {\n\t\t\tvar val;\n\n\t\t\tif ( this.nodeType !== 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n\t\t\t} else {\n\t\t\t\tval = value;\n\t\t\t}\n\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\tif ( val == null ) {\n\t\t\t\tval = \"\";\n\n\t\t\t} else if ( typeof val === \"number\" ) {\n\t\t\t\tval += \"\";\n\n\t\t\t} else if ( Array.isArray( val ) ) {\n\t\t\t\tval = jQuery.map( val, function( value ) {\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tvalHooks: {\n\t\toption: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\tvar val = jQuery.find.attr( elem, \"value\" );\n\t\t\t\treturn val != null ?\n\t\t\t\t\tval :\n\n\t\t\t\t\t// Support: IE <=10 - 11 only\n\t\t\t\t\t// option.text throws exceptions (trac-14686, trac-14858)\n\t\t\t\t\t// Strip and collapse whitespace\n\t\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n\t\t\t\t\tstripAndCollapse( jQuery.text( elem ) );\n\t\t\t}\n\t\t},\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option, i,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tindex = elem.selectedIndex,\n\t\t\t\t\tone = elem.type === \"select-one\",\n\t\t\t\t\tvalues = one ? null : [],\n\t\t\t\t\tmax = one ? index + 1 : options.length;\n\n\t\t\t\tif ( index < 0 ) {\n\t\t\t\t\ti = max;\n\n\t\t\t\t} else {\n\t\t\t\t\ti = one ? index : 0;\n\t\t\t\t}\n\n\t\t\t\t// Loop through all the selected options\n\t\t\t\tfor ( ; i < max; i++ ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t// IE8-9 doesn't update selected after form reset (trac-2551)\n\t\t\t\t\tif ( ( option.selected || i === index ) &&\n\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t\t!option.disabled &&\n\t\t\t\t\t\t\t( !option.parentNode.disabled ||\n\t\t\t\t\t\t\t\t!nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\tvalue = jQuery( option ).val();\n\n\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\tif ( one ) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\tvalues.push( value );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t},\n\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar optionSet, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\n\t\t\t\t\ti = options.length;\n\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t/* eslint-disable no-cond-assign */\n\n\t\t\t\t\tif ( option.selected =\n\t\t\t\t\t\tjQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1\n\t\t\t\t\t) {\n\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t/* eslint-enable no-cond-assign */\n\t\t\t\t}\n\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\tif ( !optionSet ) {\n\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Radios and checkboxes getter/setter\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\n\tjQuery.valHooks[ this ] = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( Array.isArray( value ) ) {\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n\t\t\t}\n\t\t}\n\t};\n\tif ( !support.checkOn ) {\n\t\tjQuery.valHooks[ this ].get = function( elem ) {\n\t\t\treturn elem.getAttribute( \"value\" ) === null ? \"on\" : elem.value;\n\t\t};\n\t}\n} );\n\n\n\n\n// Return jQuery for attributes-only inclusion\n\n\nsupport.focusin = \"onfocusin\" in window;\n\n\nvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\n\tstopPropagationCallback = function( e ) {\n\t\te.stopPropagation();\n\t};\n\njQuery.extend( jQuery.event, {\n\n\ttrigger: function( event, data, elem, onlyHandlers ) {\n\n\t\tvar i, cur, tmp, bubbleType, ontype, handle, special, lastElement,\n\t\t\teventPath = [ elem || document ],\n\t\t\ttype = hasOwn.call( event, \"type\" ) ? event.type : event,\n\t\t\tnamespaces = hasOwn.call( event, \"namespace\" ) ? event.namespace.split( \".\" ) : [];\n\n\t\tcur = lastElement = tmp = elem = elem || document;\n\n\t\t// Don't do events on text and comment nodes\n\t\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\n\t\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( type.indexOf( \".\" ) > -1 ) {\n\n\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n\t\t\tnamespaces = type.split( \".\" );\n\t\t\ttype = namespaces.shift();\n\t\t\tnamespaces.sort();\n\t\t}\n\t\tontype = type.indexOf( \":\" ) < 0 && \"on\" + type;\n\n\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n\t\tevent = event[ jQuery.expando ] ?\n\t\t\tevent :\n\t\t\tnew jQuery.Event( type, typeof event === \"object\" && event );\n\n\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\n\t\tevent.namespace = namespaces.join( \".\" );\n\t\tevent.rnamespace = event.namespace ?\n\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" ) :\n\t\t\tnull;\n\n\t\t// Clean up the event in case it is being reused\n\t\tevent.result = undefined;\n\t\tif ( !event.target ) {\n\t\t\tevent.target = elem;\n\t\t}\n\n\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n\t\tdata = data == null ?\n\t\t\t[ event ] :\n\t\t\tjQuery.makeArray( data, [ event ] );\n\n\t\t// Allow special events to draw outside the lines\n\t\tspecial = jQuery.event.special[ type ] || {};\n\t\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine event propagation path in advance, per W3C events spec (trac-9951)\n\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (trac-9724)\n\t\tif ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {\n\n\t\t\tbubbleType = special.delegateType || type;\n\t\t\tif ( !rfocusMorph.test( bubbleType + type ) ) {\n\t\t\t\tcur = cur.parentNode;\n\t\t\t}\n\t\t\tfor ( ; cur; cur = cur.parentNode ) {\n\t\t\t\teventPath.push( cur );\n\t\t\t\ttmp = cur;\n\t\t\t}\n\n\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n\t\t\tif ( tmp === ( elem.ownerDocument || document ) ) {\n\t\t\t\teventPath.push( tmp.defaultView || tmp.parentWindow || window );\n\t\t\t}\n\t\t}\n\n\t\t// Fire handlers on the event path\n\t\ti = 0;\n\t\twhile ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tlastElement = cur;\n\t\t\tevent.type = i > 1 ?\n\t\t\t\tbubbleType :\n\t\t\t\tspecial.bindType || type;\n\n\t\t\t// jQuery handler\n\t\t\thandle = ( dataPriv.get( cur, \"events\" ) || Object.create( null ) )[ event.type ] &&\n\t\t\t\tdataPriv.get( cur, \"handle\" );\n\t\t\tif ( handle ) {\n\t\t\t\thandle.apply( cur, data );\n\t\t\t}\n\n\t\t\t// Native handler\n\t\t\thandle = ontype && cur[ ontype ];\n\t\t\tif ( handle && handle.apply && acceptData( cur ) ) {\n\t\t\t\tevent.result = handle.apply( cur, data );\n\t\t\t\tif ( event.result === false ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tevent.type = type;\n\n\t\t// If nobody prevented the default action, do it now\n\t\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {\n\n\t\t\tif ( ( !special._default ||\n\t\t\t\tspecial._default.apply( eventPath.pop(), data ) === false ) &&\n\t\t\t\tacceptData( elem ) ) {\n\n\t\t\t\t// Call a native DOM method on the target with the same name as the event.\n\t\t\t\t// Don't do default actions on window, that's where global variables be (trac-6170)\n\t\t\t\tif ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {\n\n\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\n\t\t\t\t\ttmp = elem[ ontype ];\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n\t\t\t\t\tjQuery.event.triggered = type;\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.addEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\telem[ type ]();\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.removeEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\tjQuery.event.triggered = undefined;\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\t// Piggyback on a donor event to simulate a different one\n\t// Used only for `focus(in | out)` events\n\tsimulate: function( type, elem, event ) {\n\t\tvar e = jQuery.extend(\n\t\t\tnew jQuery.Event(),\n\t\t\tevent,\n\t\t\t{\n\t\t\t\ttype: type,\n\t\t\t\tisSimulated: true\n\t\t\t}\n\t\t);\n\n\t\tjQuery.event.trigger( e, null, elem );\n\t}\n\n} );\n\njQuery.fn.extend( {\n\n\ttrigger: function( type, data ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.trigger( type, data, this );\n\t\t} );\n\t},\n\ttriggerHandler: function( type, data ) {\n\t\tvar elem = this[ 0 ];\n\t\tif ( elem ) {\n\t\t\treturn jQuery.event.trigger( type, data, elem, true );\n\t\t}\n\t}\n} );\n\n\n// Support: Firefox <=44\n// Firefox doesn't have focus(in | out) events\n// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n//\n// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n// focus(in | out) events fire after focus & blur events,\n// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\nif ( !support.focusin ) {\n\tjQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( orig, fix ) {\n\n\t\t// Attach a single capturing handler on the document while someone wants focusin/focusout\n\t\tvar handler = function( event ) {\n\t\t\tjQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );\n\t\t};\n\n\t\tjQuery.event.special[ fix ] = {\n\t\t\tsetup: function() {\n\n\t\t\t\t// Handle: regular nodes (via `this.ownerDocument`), window\n\t\t\t\t// (via `this.document`) & document (via `this`).\n\t\t\t\tvar doc = this.ownerDocument || this.document || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix );\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.addEventListener( orig, handler, true );\n\t\t\t\t}\n\t\t\t\tdataPriv.access( doc, fix, ( attaches || 0 ) + 1 );\n\t\t\t},\n\t\t\tteardown: function() {\n\t\t\t\tvar doc = this.ownerDocument || this.document || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix ) - 1;\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.removeEventListener( orig, handler, true );\n\t\t\t\t\tdataPriv.remove( doc, fix );\n\n\t\t\t\t} else {\n\t\t\t\t\tdataPriv.access( doc, fix, attaches );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t} );\n}\nvar location = window.location;\n\nvar nonce = { guid: Date.now() };\n\nvar rquery = ( /\\?/ );\n\n\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n\tvar xml, parserErrorElem;\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\n\t// Support: IE 9 - 11 only\n\t// IE throws on parseFromString with invalid input.\n\ttry {\n\t\txml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\n\t} catch ( e ) {}\n\n\tparserErrorElem = xml && xml.getElementsByTagName( \"parsererror\" )[ 0 ];\n\tif ( !xml || parserErrorElem ) {\n\t\tjQuery.error( \"Invalid XML: \" + (\n\t\t\tparserErrorElem ?\n\t\t\t\tjQuery.map( parserErrorElem.childNodes, function( el ) {\n\t\t\t\t\treturn el.textContent;\n\t\t\t\t} ).join( \"\\n\" ) :\n\t\t\t\tdata\n\t\t) );\n\t}\n\treturn xml;\n};\n\n\nvar\n\trbracket = /\\[\\]$/,\n\trCRLF = /\\r?\\n/g,\n\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n\trsubmittable = /^(?:input|select|textarea|keygen)/i;\n\nfunction buildParams( prefix, obj, traditional, add ) {\n\tvar name;\n\n\tif ( Array.isArray( obj ) ) {\n\n\t\t// Serialize array item.\n\t\tjQuery.each( obj, function( i, v ) {\n\t\t\tif ( traditional || rbracket.test( prefix ) ) {\n\n\t\t\t\t// Treat each array item as a scalar.\n\t\t\t\tadd( prefix, v );\n\n\t\t\t} else {\n\n\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n\t\t\t\tbuildParams(\n\t\t\t\t\tprefix + \"[\" + ( typeof v === \"object\" && v != null ? i : \"\" ) + \"]\",\n\t\t\t\t\tv,\n\t\t\t\t\ttraditional,\n\t\t\t\t\tadd\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\n\t} else if ( !traditional && toType( obj ) === \"object\" ) {\n\n\t\t// Serialize object item.\n\t\tfor ( name in obj ) {\n\t\t\tbuildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );\n\t\t}\n\n\t} else {\n\n\t\t// Serialize scalar item.\n\t\tadd( prefix, obj );\n\t}\n}\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\njQuery.param = function( a, traditional ) {\n\tvar prefix,\n\t\ts = [],\n\t\tadd = function( key, valueOrFunction ) {\n\n\t\t\t// If value is a function, invoke it and use its return value\n\t\t\tvar value = isFunction( valueOrFunction ) ?\n\t\t\t\tvalueOrFunction() :\n\t\t\t\tvalueOrFunction;\n\n\t\t\ts[ s.length ] = encodeURIComponent( key ) + \"=\" +\n\t\t\t\tencodeURIComponent( value == null ? \"\" : value );\n\t\t};\n\n\tif ( a == null ) {\n\t\treturn \"\";\n\t}\n\n\t// If an array was passed in, assume that it is an array of form elements.\n\tif ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\n\n\t\t// Serialize the form elements\n\t\tjQuery.each( a, function() {\n\t\t\tadd( this.name, this.value );\n\t\t} );\n\n\t} else {\n\n\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\n\t\t// did it), otherwise encode params recursively.\n\t\tfor ( prefix in a ) {\n\t\t\tbuildParams( prefix, a[ prefix ], traditional, add );\n\t\t}\n\t}\n\n\t// Return the resulting serialization\n\treturn s.join( \"&\" );\n};\n\njQuery.fn.extend( {\n\tserialize: function() {\n\t\treturn jQuery.param( this.serializeArray() );\n\t},\n\tserializeArray: function() {\n\t\treturn this.map( function() {\n\n\t\t\t// Can add propHook for \"elements\" to filter or add form elements\n\t\t\tvar elements = jQuery.prop( this, \"elements\" );\n\t\t\treturn elements ? jQuery.makeArray( elements ) : this;\n\t\t} ).filter( function() {\n\t\t\tvar type = this.type;\n\n\t\t\t// Use .is( \":disabled\" ) so that fieldset[disabled] works\n\t\t\treturn this.name && !jQuery( this ).is( \":disabled\" ) &&\n\t\t\t\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\n\t\t\t\t( this.checked || !rcheckableType.test( type ) );\n\t\t} ).map( function( _i, elem ) {\n\t\t\tvar val = jQuery( this ).val();\n\n\t\t\tif ( val == null ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif ( Array.isArray( val ) ) {\n\t\t\t\treturn jQuery.map( val, function( val ) {\n\t\t\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t} ).get();\n\t}\n} );\n\n\nvar\n\tr20 = /%20/g,\n\trhash = /#.*$/,\n\trantiCache = /([?&])_=[^&]*/,\n\trheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n\n\t// trac-7653, trac-8125, trac-8152: local protocol detection\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\trnoContent = /^(?:GET|HEAD)$/,\n\trprotocol = /^\\/\\//,\n\n\t/* Prefilters\n\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n\t * 2) These are called:\n\t *    - BEFORE asking for a transport\n\t *    - AFTER param serialization (s.data is a string if s.processData is true)\n\t * 3) key is the dataType\n\t * 4) the catchall symbol \"*\" can be used\n\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n\t */\n\tprefilters = {},\n\n\t/* Transports bindings\n\t * 1) key is the dataType\n\t * 2) the catchall symbol \"*\" can be used\n\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n\t */\n\ttransports = {},\n\n\t// Avoid comment-prolog char sequence (trac-10098); must appease lint and evade compression\n\tallTypes = \"*/\".concat( \"*\" ),\n\n\t// Anchor tag for parsing the document origin\n\toriginAnchor = document.createElement( \"a\" );\n\noriginAnchor.href = location.href;\n\n// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\nfunction addToPrefiltersOrTransports( structure ) {\n\n\t// dataTypeExpression is optional and defaults to \"*\"\n\treturn function( dataTypeExpression, func ) {\n\n\t\tif ( typeof dataTypeExpression !== \"string\" ) {\n\t\t\tfunc = dataTypeExpression;\n\t\t\tdataTypeExpression = \"*\";\n\t\t}\n\n\t\tvar dataType,\n\t\t\ti = 0,\n\t\t\tdataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];\n\n\t\tif ( isFunction( func ) ) {\n\n\t\t\t// For each dataType in the dataTypeExpression\n\t\t\twhile ( ( dataType = dataTypes[ i++ ] ) ) {\n\n\t\t\t\t// Prepend if requested\n\t\t\t\tif ( dataType[ 0 ] === \"+\" ) {\n\t\t\t\t\tdataType = dataType.slice( 1 ) || \"*\";\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );\n\n\t\t\t\t// Otherwise append\n\t\t\t\t} else {\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).push( func );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Base inspection function for prefilters and transports\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\n\n\tvar inspected = {},\n\t\tseekingTransport = ( structure === transports );\n\n\tfunction inspect( dataType ) {\n\t\tvar selected;\n\t\tinspected[ dataType ] = true;\n\t\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\n\t\t\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\n\t\t\tif ( typeof dataTypeOrTransport === \"string\" &&\n\t\t\t\t!seekingTransport && !inspected[ dataTypeOrTransport ] ) {\n\n\t\t\t\toptions.dataTypes.unshift( dataTypeOrTransport );\n\t\t\t\tinspect( dataTypeOrTransport );\n\t\t\t\treturn false;\n\t\t\t} else if ( seekingTransport ) {\n\t\t\t\treturn !( selected = dataTypeOrTransport );\n\t\t\t}\n\t\t} );\n\t\treturn selected;\n\t}\n\n\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );\n}\n\n// A special extend for ajax options\n// that takes \"flat\" options (not to be deep extended)\n// Fixes trac-9887\nfunction ajaxExtend( target, src ) {\n\tvar key, deep,\n\t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n\tfor ( key in src ) {\n\t\tif ( src[ key ] !== undefined ) {\n\t\t\t( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];\n\t\t}\n\t}\n\tif ( deep ) {\n\t\tjQuery.extend( true, target, deep );\n\t}\n\n\treturn target;\n}\n\n/* Handles responses to an ajax request:\n * - finds the right dataType (mediates between content-type and expected dataType)\n * - returns the corresponding response\n */\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\n\n\tvar ct, type, finalDataType, firstDataType,\n\t\tcontents = s.contents,\n\t\tdataTypes = s.dataTypes;\n\n\t// Remove auto dataType and get content-type in the process\n\twhile ( dataTypes[ 0 ] === \"*\" ) {\n\t\tdataTypes.shift();\n\t\tif ( ct === undefined ) {\n\t\t\tct = s.mimeType || jqXHR.getResponseHeader( \"Content-Type\" );\n\t\t}\n\t}\n\n\t// Check if we're dealing with a known content-type\n\tif ( ct ) {\n\t\tfor ( type in contents ) {\n\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\n\t\t\t\tdataTypes.unshift( type );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check to see if we have a response for the expected dataType\n\tif ( dataTypes[ 0 ] in responses ) {\n\t\tfinalDataType = dataTypes[ 0 ];\n\t} else {\n\n\t\t// Try convertible dataTypes\n\t\tfor ( type in responses ) {\n\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[ 0 ] ] ) {\n\t\t\t\tfinalDataType = type;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( !firstDataType ) {\n\t\t\t\tfirstDataType = type;\n\t\t\t}\n\t\t}\n\n\t\t// Or just use first one\n\t\tfinalDataType = finalDataType || firstDataType;\n\t}\n\n\t// If we found a dataType\n\t// We add the dataType to the list if needed\n\t// and return the corresponding response\n\tif ( finalDataType ) {\n\t\tif ( finalDataType !== dataTypes[ 0 ] ) {\n\t\t\tdataTypes.unshift( finalDataType );\n\t\t}\n\t\treturn responses[ finalDataType ];\n\t}\n}\n\n/* Chain conversions given the request and the original response\n * Also sets the responseXXX fields on the jqXHR instance\n */\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\n\tvar conv2, current, conv, tmp, prev,\n\t\tconverters = {},\n\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n\t\tdataTypes = s.dataTypes.slice();\n\n\t// Create converters map with lowercased keys\n\tif ( dataTypes[ 1 ] ) {\n\t\tfor ( conv in s.converters ) {\n\t\t\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];\n\t\t}\n\t}\n\n\tcurrent = dataTypes.shift();\n\n\t// Convert to each sequential dataType\n\twhile ( current ) {\n\n\t\tif ( s.responseFields[ current ] ) {\n\t\t\tjqXHR[ s.responseFields[ current ] ] = response;\n\t\t}\n\n\t\t// Apply the dataFilter if provided\n\t\tif ( !prev && isSuccess && s.dataFilter ) {\n\t\t\tresponse = s.dataFilter( response, s.dataType );\n\t\t}\n\n\t\tprev = current;\n\t\tcurrent = dataTypes.shift();\n\n\t\tif ( current ) {\n\n\t\t\t// There's only work to do if current dataType is non-auto\n\t\t\tif ( current === \"*\" ) {\n\n\t\t\t\tcurrent = prev;\n\n\t\t\t// Convert response if prev dataType is non-auto and differs from current\n\t\t\t} else if ( prev !== \"*\" && prev !== current ) {\n\n\t\t\t\t// Seek a direct converter\n\t\t\t\tconv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];\n\n\t\t\t\t// If none found, seek a pair\n\t\t\t\tif ( !conv ) {\n\t\t\t\t\tfor ( conv2 in converters ) {\n\n\t\t\t\t\t\t// If conv2 outputs current\n\t\t\t\t\t\ttmp = conv2.split( \" \" );\n\t\t\t\t\t\tif ( tmp[ 1 ] === current ) {\n\n\t\t\t\t\t\t\t// If prev can be converted to accepted input\n\t\t\t\t\t\t\tconv = converters[ prev + \" \" + tmp[ 0 ] ] ||\n\t\t\t\t\t\t\t\tconverters[ \"* \" + tmp[ 0 ] ];\n\t\t\t\t\t\t\tif ( conv ) {\n\n\t\t\t\t\t\t\t\t// Condense equivalence converters\n\t\t\t\t\t\t\t\tif ( conv === true ) {\n\t\t\t\t\t\t\t\t\tconv = converters[ conv2 ];\n\n\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n\t\t\t\t\t\t\t\t} else if ( converters[ conv2 ] !== true ) {\n\t\t\t\t\t\t\t\t\tcurrent = tmp[ 0 ];\n\t\t\t\t\t\t\t\t\tdataTypes.unshift( tmp[ 1 ] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply converter (if not an equivalence)\n\t\t\t\tif ( conv !== true ) {\n\n\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n\t\t\t\t\tif ( conv && s.throws ) {\n\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t\t} catch ( e ) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tstate: \"parsererror\",\n\t\t\t\t\t\t\t\terror: conv ? e : \"No conversion from \" + prev + \" to \" + current\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { state: \"success\", data: response };\n}\n\njQuery.extend( {\n\n\t// Counter for holding the number of active queries\n\tactive: 0,\n\n\t// Last-Modified header cache for next request\n\tlastModified: {},\n\tetag: {},\n\n\tajaxSettings: {\n\t\turl: location.href,\n\t\ttype: \"GET\",\n\t\tisLocal: rlocalProtocol.test( location.protocol ),\n\t\tglobal: true,\n\t\tprocessData: true,\n\t\tasync: true,\n\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\n\t\t/*\n\t\ttimeout: 0,\n\t\tdata: null,\n\t\tdataType: null,\n\t\tusername: null,\n\t\tpassword: null,\n\t\tcache: null,\n\t\tthrows: false,\n\t\ttraditional: false,\n\t\theaders: {},\n\t\t*/\n\n\t\taccepts: {\n\t\t\t\"*\": allTypes,\n\t\t\ttext: \"text/plain\",\n\t\t\thtml: \"text/html\",\n\t\t\txml: \"application/xml, text/xml\",\n\t\t\tjson: \"application/json, text/javascript\"\n\t\t},\n\n\t\tcontents: {\n\t\t\txml: /\\bxml\\b/,\n\t\t\thtml: /\\bhtml/,\n\t\t\tjson: /\\bjson\\b/\n\t\t},\n\n\t\tresponseFields: {\n\t\t\txml: \"responseXML\",\n\t\t\ttext: \"responseText\",\n\t\t\tjson: \"responseJSON\"\n\t\t},\n\n\t\t// Data converters\n\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\n\t\tconverters: {\n\n\t\t\t// Convert anything to text\n\t\t\t\"* text\": String,\n\n\t\t\t// Text to html (true = no transformation)\n\t\t\t\"text html\": true,\n\n\t\t\t// Evaluate text as a json expression\n\t\t\t\"text json\": JSON.parse,\n\n\t\t\t// Parse text as xml\n\t\t\t\"text xml\": jQuery.parseXML\n\t\t},\n\n\t\t// For options that shouldn't be deep extended:\n\t\t// you can add your own custom options here if\n\t\t// and when you create one that shouldn't be\n\t\t// deep extended (see ajaxExtend)\n\t\tflatOptions: {\n\t\t\turl: true,\n\t\t\tcontext: true\n\t\t}\n\t},\n\n\t// Creates a full fledged settings object into target\n\t// with both ajaxSettings and settings fields.\n\t// If target is omitted, writes into ajaxSettings.\n\tajaxSetup: function( target, settings ) {\n\t\treturn settings ?\n\n\t\t\t// Building a settings object\n\t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n\n\t\t\t// Extending ajaxSettings\n\t\t\tajaxExtend( jQuery.ajaxSettings, target );\n\t},\n\n\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\n\tajaxTransport: addToPrefiltersOrTransports( transports ),\n\n\t// Main method\n\tajax: function( url, options ) {\n\n\t\t// If url is an object, simulate pre-1.5 signature\n\t\tif ( typeof url === \"object\" ) {\n\t\t\toptions = url;\n\t\t\turl = undefined;\n\t\t}\n\n\t\t// Force options to be an object\n\t\toptions = options || {};\n\n\t\tvar transport,\n\n\t\t\t// URL without anti-cache param\n\t\t\tcacheURL,\n\n\t\t\t// Response headers\n\t\t\tresponseHeadersString,\n\t\t\tresponseHeaders,\n\n\t\t\t// timeout handle\n\t\t\ttimeoutTimer,\n\n\t\t\t// Url cleanup var\n\t\t\turlAnchor,\n\n\t\t\t// Request state (becomes false upon send and true upon completion)\n\t\t\tcompleted,\n\n\t\t\t// To know if global events are to be dispatched\n\t\t\tfireGlobals,\n\n\t\t\t// Loop variable\n\t\t\ti,\n\n\t\t\t// uncached part of the url\n\t\t\tuncached,\n\n\t\t\t// Create the final options object\n\t\t\ts = jQuery.ajaxSetup( {}, options ),\n\n\t\t\t// Callbacks context\n\t\t\tcallbackContext = s.context || s,\n\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n\t\t\tglobalEventContext = s.context &&\n\t\t\t\t( callbackContext.nodeType || callbackContext.jquery ) ?\n\t\t\t\tjQuery( callbackContext ) :\n\t\t\t\tjQuery.event,\n\n\t\t\t// Deferreds\n\t\t\tdeferred = jQuery.Deferred(),\n\t\t\tcompleteDeferred = jQuery.Callbacks( \"once memory\" ),\n\n\t\t\t// Status-dependent callbacks\n\t\t\tstatusCode = s.statusCode || {},\n\n\t\t\t// Headers (they are sent all at once)\n\t\t\trequestHeaders = {},\n\t\t\trequestHeadersNames = {},\n\n\t\t\t// Default abort message\n\t\t\tstrAbort = \"canceled\",\n\n\t\t\t// Fake xhr\n\t\t\tjqXHR = {\n\t\t\t\treadyState: 0,\n\n\t\t\t\t// Builds headers hashtable if needed\n\t\t\t\tgetResponseHeader: function( key ) {\n\t\t\t\t\tvar match;\n\t\t\t\t\tif ( completed ) {\n\t\t\t\t\t\tif ( !responseHeaders ) {\n\t\t\t\t\t\t\tresponseHeaders = {};\n\t\t\t\t\t\t\twhile ( ( match = rheaders.exec( responseHeadersString ) ) ) {\n\t\t\t\t\t\t\t\tresponseHeaders[ match[ 1 ].toLowerCase() + \" \" ] =\n\t\t\t\t\t\t\t\t\t( responseHeaders[ match[ 1 ].toLowerCase() + \" \" ] || [] )\n\t\t\t\t\t\t\t\t\t\t.concat( match[ 2 ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = responseHeaders[ key.toLowerCase() + \" \" ];\n\t\t\t\t\t}\n\t\t\t\t\treturn match == null ? null : match.join( \", \" );\n\t\t\t\t},\n\n\t\t\t\t// Raw string\n\t\t\t\tgetAllResponseHeaders: function() {\n\t\t\t\t\treturn completed ? responseHeadersString : null;\n\t\t\t\t},\n\n\t\t\t\t// Caches the header\n\t\t\t\tsetRequestHeader: function( name, value ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\tname = requestHeadersNames[ name.toLowerCase() ] =\n\t\t\t\t\t\t\trequestHeadersNames[ name.toLowerCase() ] || name;\n\t\t\t\t\t\trequestHeaders[ name ] = value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Overrides response content-type header\n\t\t\t\toverrideMimeType: function( type ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\ts.mimeType = type;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tstatusCode: function( map ) {\n\t\t\t\t\tvar code;\n\t\t\t\t\tif ( map ) {\n\t\t\t\t\t\tif ( completed ) {\n\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\n\t\t\t\t\t\t\tjqXHR.always( map[ jqXHR.status ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Lazy-add the new callbacks in a way that preserves old ones\n\t\t\t\t\t\t\tfor ( code in map ) {\n\t\t\t\t\t\t\t\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Cancel the request\n\t\t\t\tabort: function( statusText ) {\n\t\t\t\t\tvar finalText = statusText || strAbort;\n\t\t\t\t\tif ( transport ) {\n\t\t\t\t\t\ttransport.abort( finalText );\n\t\t\t\t\t}\n\t\t\t\t\tdone( 0, finalText );\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\n\t\t// Attach deferreds\n\t\tdeferred.promise( jqXHR );\n\n\t\t// Add protocol if not provided (prefilters might expect it)\n\t\t// Handle falsy url in the settings object (trac-10093: consistency with old signature)\n\t\t// We also use the url parameter if available\n\t\ts.url = ( ( url || s.url || location.href ) + \"\" )\n\t\t\t.replace( rprotocol, location.protocol + \"//\" );\n\n\t\t// Alias method option to type as per ticket trac-12004\n\t\ts.type = options.method || options.type || s.method || s.type;\n\n\t\t// Extract dataTypes list\n\t\ts.dataTypes = ( s.dataType || \"*\" ).toLowerCase().match( rnothtmlwhite ) || [ \"\" ];\n\n\t\t// A cross-domain request is in order when the origin doesn't match the current origin.\n\t\tif ( s.crossDomain == null ) {\n\t\t\turlAnchor = document.createElement( \"a\" );\n\n\t\t\t// Support: IE <=8 - 11, Edge 12 - 15\n\t\t\t// IE throws exception on accessing the href property if url is malformed,\n\t\t\t// e.g. http://example.com:80x/\n\t\t\ttry {\n\t\t\t\turlAnchor.href = s.url;\n\n\t\t\t\t// Support: IE <=8 - 11 only\n\t\t\t\t// Anchor's host property isn't correctly set when s.url is relative\n\t\t\t\turlAnchor.href = urlAnchor.href;\n\t\t\t\ts.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !==\n\t\t\t\t\turlAnchor.protocol + \"//\" + urlAnchor.host;\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// If there is an error parsing the URL, assume it is crossDomain,\n\t\t\t\t// it can be rejected by the transport if it is invalid\n\t\t\t\ts.crossDomain = true;\n\t\t\t}\n\t\t}\n\n\t\t// Convert data if not already a string\n\t\tif ( s.data && s.processData && typeof s.data !== \"string\" ) {\n\t\t\ts.data = jQuery.param( s.data, s.traditional );\n\t\t}\n\n\t\t// Apply prefilters\n\t\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\n\n\t\t// If request was aborted inside a prefilter, stop there\n\t\tif ( completed ) {\n\t\t\treturn jqXHR;\n\t\t}\n\n\t\t// We can fire global events as of now if asked to\n\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (trac-15118)\n\t\tfireGlobals = jQuery.event && s.global;\n\n\t\t// Watch for a new set of requests\n\t\tif ( fireGlobals && jQuery.active++ === 0 ) {\n\t\t\tjQuery.event.trigger( \"ajaxStart\" );\n\t\t}\n\n\t\t// Uppercase the type\n\t\ts.type = s.type.toUpperCase();\n\n\t\t// Determine if request has content\n\t\ts.hasContent = !rnoContent.test( s.type );\n\n\t\t// Save the URL in case we're toying with the If-Modified-Since\n\t\t// and/or If-None-Match header later on\n\t\t// Remove hash to simplify url manipulation\n\t\tcacheURL = s.url.replace( rhash, \"\" );\n\n\t\t// More options handling for requests with no content\n\t\tif ( !s.hasContent ) {\n\n\t\t\t// Remember the hash so we can put it back\n\t\t\tuncached = s.url.slice( cacheURL.length );\n\n\t\t\t// If data is available and should be processed, append data to url\n\t\t\tif ( s.data && ( s.processData || typeof s.data === \"string\" ) ) {\n\t\t\t\tcacheURL += ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data;\n\n\t\t\t\t// trac-9682: remove data so that it's not used in an eventual retry\n\t\t\t\tdelete s.data;\n\t\t\t}\n\n\t\t\t// Add or update anti-cache param if needed\n\t\t\tif ( s.cache === false ) {\n\t\t\t\tcacheURL = cacheURL.replace( rantiCache, \"$1\" );\n\t\t\t\tuncached = ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + ( nonce.guid++ ) +\n\t\t\t\t\tuncached;\n\t\t\t}\n\n\t\t\t// Put hash and anti-cache on the URL that will be requested (gh-1732)\n\t\t\ts.url = cacheURL + uncached;\n\n\t\t// Change '%20' to '+' if this is encoded form body content (gh-2658)\n\t\t} else if ( s.data && s.processData &&\n\t\t\t( s.contentType || \"\" ).indexOf( \"application/x-www-form-urlencoded\" ) === 0 ) {\n\t\t\ts.data = s.data.replace( r20, \"+\" );\n\t\t}\n\n\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\tif ( s.ifModified ) {\n\t\t\tif ( jQuery.lastModified[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );\n\t\t\t}\n\t\t\tif ( jQuery.etag[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );\n\t\t\t}\n\t\t}\n\n\t\t// Set the correct header, if data is being sent\n\t\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\n\t\t\tjqXHR.setRequestHeader( \"Content-Type\", s.contentType );\n\t\t}\n\n\t\t// Set the Accepts header for the server, depending on the dataType\n\t\tjqXHR.setRequestHeader(\n\t\t\t\"Accept\",\n\t\t\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?\n\t\t\t\ts.accepts[ s.dataTypes[ 0 ] ] +\n\t\t\t\t\t( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\n\t\t\t\ts.accepts[ \"*\" ]\n\t\t);\n\n\t\t// Check for headers option\n\t\tfor ( i in s.headers ) {\n\t\t\tjqXHR.setRequestHeader( i, s.headers[ i ] );\n\t\t}\n\n\t\t// Allow custom headers/mimetypes and early abort\n\t\tif ( s.beforeSend &&\n\t\t\t( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {\n\n\t\t\t// Abort if not done already and return\n\t\t\treturn jqXHR.abort();\n\t\t}\n\n\t\t// Aborting is no longer a cancellation\n\t\tstrAbort = \"abort\";\n\n\t\t// Install callbacks on deferreds\n\t\tcompleteDeferred.add( s.complete );\n\t\tjqXHR.done( s.success );\n\t\tjqXHR.fail( s.error );\n\n\t\t// Get transport\n\t\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n\n\t\t// If no transport, we auto-abort\n\t\tif ( !transport ) {\n\t\t\tdone( -1, \"No Transport\" );\n\t\t} else {\n\t\t\tjqXHR.readyState = 1;\n\n\t\t\t// Send global event\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\n\t\t\t}\n\n\t\t\t// If request was aborted inside ajaxSend, stop there\n\t\t\tif ( completed ) {\n\t\t\t\treturn jqXHR;\n\t\t\t}\n\n\t\t\t// Timeout\n\t\t\tif ( s.async && s.timeout > 0 ) {\n\t\t\t\ttimeoutTimer = window.setTimeout( function() {\n\t\t\t\t\tjqXHR.abort( \"timeout\" );\n\t\t\t\t}, s.timeout );\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tcompleted = false;\n\t\t\t\ttransport.send( requestHeaders, done );\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// Rethrow post-completion exceptions\n\t\t\t\tif ( completed ) {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\n\t\t\t\t// Propagate others as results\n\t\t\t\tdone( -1, e );\n\t\t\t}\n\t\t}\n\n\t\t// Callback for when everything is done\n\t\tfunction done( status, nativeStatusText, responses, headers ) {\n\t\t\tvar isSuccess, success, error, response, modified,\n\t\t\t\tstatusText = nativeStatusText;\n\n\t\t\t// Ignore repeat invocations\n\t\t\tif ( completed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcompleted = true;\n\n\t\t\t// Clear timeout if it exists\n\t\t\tif ( timeoutTimer ) {\n\t\t\t\twindow.clearTimeout( timeoutTimer );\n\t\t\t}\n\n\t\t\t// Dereference transport for early garbage collection\n\t\t\t// (no matter how long the jqXHR object will be used)\n\t\t\ttransport = undefined;\n\n\t\t\t// Cache response headers\n\t\t\tresponseHeadersString = headers || \"\";\n\n\t\t\t// Set readyState\n\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n\n\t\t\t// Determine if successful\n\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\n\n\t\t\t// Get response data\n\t\t\tif ( responses ) {\n\t\t\t\tresponse = ajaxHandleResponses( s, jqXHR, responses );\n\t\t\t}\n\n\t\t\t// Use a noop converter for missing script but not if jsonp\n\t\t\tif ( !isSuccess &&\n\t\t\t\tjQuery.inArray( \"script\", s.dataTypes ) > -1 &&\n\t\t\t\tjQuery.inArray( \"json\", s.dataTypes ) < 0 ) {\n\t\t\t\ts.converters[ \"text script\" ] = function() {};\n\t\t\t}\n\n\t\t\t// Convert no matter what (that way responseXXX fields are always set)\n\t\t\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );\n\n\t\t\t// If successful, handle type chaining\n\t\t\tif ( isSuccess ) {\n\n\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\t\tif ( s.ifModified ) {\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"Last-Modified\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.lastModified[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"etag\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.etag[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if no content\n\t\t\t\tif ( status === 204 || s.type === \"HEAD\" ) {\n\t\t\t\t\tstatusText = \"nocontent\";\n\n\t\t\t\t// if not modified\n\t\t\t\t} else if ( status === 304 ) {\n\t\t\t\t\tstatusText = \"notmodified\";\n\n\t\t\t\t// If we have data, let's convert it\n\t\t\t\t} else {\n\t\t\t\t\tstatusText = response.state;\n\t\t\t\t\tsuccess = response.data;\n\t\t\t\t\terror = response.error;\n\t\t\t\t\tisSuccess = !error;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Extract error from statusText and normalize for non-aborts\n\t\t\t\terror = statusText;\n\t\t\t\tif ( status || !statusText ) {\n\t\t\t\t\tstatusText = \"error\";\n\t\t\t\t\tif ( status < 0 ) {\n\t\t\t\t\t\tstatus = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set data for the fake xhr object\n\t\t\tjqXHR.status = status;\n\t\t\tjqXHR.statusText = ( nativeStatusText || statusText ) + \"\";\n\n\t\t\t// Success/Error\n\t\t\tif ( isSuccess ) {\n\t\t\t\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\n\t\t\t} else {\n\t\t\t\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\n\t\t\t}\n\n\t\t\t// Status-dependent callbacks\n\t\t\tjqXHR.statusCode( statusCode );\n\t\t\tstatusCode = undefined;\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\n\t\t\t\t\t[ jqXHR, s, isSuccess ? success : error ] );\n\t\t\t}\n\n\t\t\t// Complete\n\t\t\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );\n\n\t\t\t\t// Handle the global AJAX counter\n\t\t\t\tif ( !( --jQuery.active ) ) {\n\t\t\t\t\tjQuery.event.trigger( \"ajaxStop\" );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn jqXHR;\n\t},\n\n\tgetJSON: function( url, data, callback ) {\n\t\treturn jQuery.get( url, data, callback, \"json\" );\n\t},\n\n\tgetScript: function( url, callback ) {\n\t\treturn jQuery.get( url, undefined, callback, \"script\" );\n\t}\n} );\n\njQuery.each( [ \"get\", \"post\" ], function( _i, method ) {\n\tjQuery[ method ] = function( url, data, callback, type ) {\n\n\t\t// Shift arguments if data argument was omitted\n\t\tif ( isFunction( data ) ) {\n\t\t\ttype = type || callback;\n\t\t\tcallback = data;\n\t\t\tdata = undefined;\n\t\t}\n\n\t\t// The url can be an options object (which then must have .url)\n\t\treturn jQuery.ajax( jQuery.extend( {\n\t\t\turl: url,\n\t\t\ttype: method,\n\t\t\tdataType: type,\n\t\t\tdata: data,\n\t\t\tsuccess: callback\n\t\t}, jQuery.isPlainObject( url ) && url ) );\n\t};\n} );\n\njQuery.ajaxPrefilter( function( s ) {\n\tvar i;\n\tfor ( i in s.headers ) {\n\t\tif ( i.toLowerCase() === \"content-type\" ) {\n\t\t\ts.contentType = s.headers[ i ] || \"\";\n\t\t}\n\t}\n} );\n\n\njQuery._evalUrl = function( url, options, doc ) {\n\treturn jQuery.ajax( {\n\t\turl: url,\n\n\t\t// Make this explicit, since user can override this through ajaxSetup (trac-11264)\n\t\ttype: \"GET\",\n\t\tdataType: \"script\",\n\t\tcache: true,\n\t\tasync: false,\n\t\tglobal: false,\n\n\t\t// Only evaluate the response if it is successful (gh-4126)\n\t\t// dataFilter is not invoked for failure responses, so using it instead\n\t\t// of the default converter is kludgy but it works.\n\t\tconverters: {\n\t\t\t\"text script\": function() {}\n\t\t},\n\t\tdataFilter: function( response ) {\n\t\t\tjQuery.globalEval( response, options, doc );\n\t\t}\n\t} );\n};\n\n\njQuery.fn.extend( {\n\twrapAll: function( html ) {\n\t\tvar wrap;\n\n\t\tif ( this[ 0 ] ) {\n\t\t\tif ( isFunction( html ) ) {\n\t\t\t\thtml = html.call( this[ 0 ] );\n\t\t\t}\n\n\t\t\t// The elements to wrap the target around\n\t\t\twrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\n\n\t\t\tif ( this[ 0 ].parentNode ) {\n\t\t\t\twrap.insertBefore( this[ 0 ] );\n\t\t\t}\n\n\t\t\twrap.map( function() {\n\t\t\t\tvar elem = this;\n\n\t\t\t\twhile ( elem.firstElementChild ) {\n\t\t\t\t\telem = elem.firstElementChild;\n\t\t\t\t}\n\n\t\t\t\treturn elem;\n\t\t\t} ).append( this );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\twrapInner: function( html ) {\n\t\tif ( isFunction( html ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).wrapInner( html.call( this, i ) );\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar self = jQuery( this ),\n\t\t\t\tcontents = self.contents();\n\n\t\t\tif ( contents.length ) {\n\t\t\t\tcontents.wrapAll( html );\n\n\t\t\t} else {\n\t\t\t\tself.append( html );\n\t\t\t}\n\t\t} );\n\t},\n\n\twrap: function( html ) {\n\t\tvar htmlIsFunction = isFunction( html );\n\n\t\treturn this.each( function( i ) {\n\t\t\tjQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );\n\t\t} );\n\t},\n\n\tunwrap: function( selector ) {\n\t\tthis.parent( selector ).not( \"body\" ).each( function() {\n\t\t\tjQuery( this ).replaceWith( this.childNodes );\n\t\t} );\n\t\treturn this;\n\t}\n} );\n\n\njQuery.expr.pseudos.hidden = function( elem ) {\n\treturn !jQuery.expr.pseudos.visible( elem );\n};\njQuery.expr.pseudos.visible = function( elem ) {\n\treturn !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );\n};\n\n\n\n\njQuery.ajaxSettings.xhr = function() {\n\ttry {\n\t\treturn new window.XMLHttpRequest();\n\t} catch ( e ) {}\n};\n\nvar xhrSuccessStatus = {\n\n\t\t// File protocol always yields status code 0, assume 200\n\t\t0: 200,\n\n\t\t// Support: IE <=9 only\n\t\t// trac-1450: sometimes IE returns 1223 when it should be 204\n\t\t1223: 204\n\t},\n\txhrSupported = jQuery.ajaxSettings.xhr();\n\nsupport.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\nsupport.ajax = xhrSupported = !!xhrSupported;\n\njQuery.ajaxTransport( function( options ) {\n\tvar callback, errorCallback;\n\n\t// Cross domain only allowed if supported through XMLHttpRequest\n\tif ( support.cors || xhrSupported && !options.crossDomain ) {\n\t\treturn {\n\t\t\tsend: function( headers, complete ) {\n\t\t\t\tvar i,\n\t\t\t\t\txhr = options.xhr();\n\n\t\t\t\txhr.open(\n\t\t\t\t\toptions.type,\n\t\t\t\t\toptions.url,\n\t\t\t\t\toptions.async,\n\t\t\t\t\toptions.username,\n\t\t\t\t\toptions.password\n\t\t\t\t);\n\n\t\t\t\t// Apply custom fields if provided\n\t\t\t\tif ( options.xhrFields ) {\n\t\t\t\t\tfor ( i in options.xhrFields ) {\n\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Override mime type if needed\n\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {\n\t\t\t\t\txhr.overrideMimeType( options.mimeType );\n\t\t\t\t}\n\n\t\t\t\t// X-Requested-With header\n\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n\t\t\t\t// For same-domain requests, won't change header if already provided.\n\t\t\t\tif ( !options.crossDomain && !headers[ \"X-Requested-With\" ] ) {\n\t\t\t\t\theaders[ \"X-Requested-With\" ] = \"XMLHttpRequest\";\n\t\t\t\t}\n\n\t\t\t\t// Set headers\n\t\t\t\tfor ( i in headers ) {\n\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] );\n\t\t\t\t}\n\n\t\t\t\t// Callback\n\t\t\t\tcallback = function( type ) {\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\tcallback = errorCallback = xhr.onload =\n\t\t\t\t\t\t\t\txhr.onerror = xhr.onabort = xhr.ontimeout =\n\t\t\t\t\t\t\t\t\txhr.onreadystatechange = null;\n\n\t\t\t\t\t\t\tif ( type === \"abort\" ) {\n\t\t\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t\t\t} else if ( type === \"error\" ) {\n\n\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t// On a manual native abort, IE9 throws\n\t\t\t\t\t\t\t\t// errors on any property access that is not readyState\n\t\t\t\t\t\t\t\tif ( typeof xhr.status !== \"number\" ) {\n\t\t\t\t\t\t\t\t\tcomplete( 0, \"error\" );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcomplete(\n\n\t\t\t\t\t\t\t\t\t\t// File: protocol always yields status 0; see trac-8605, trac-14207\n\t\t\t\t\t\t\t\t\t\txhr.status,\n\t\t\t\t\t\t\t\t\t\txhr.statusText\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcomplete(\n\t\t\t\t\t\t\t\t\txhrSuccessStatus[ xhr.status ] || xhr.status,\n\t\t\t\t\t\t\t\t\txhr.statusText,\n\n\t\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t\t// IE9 has no XHR2 but throws on binary (trac-11426)\n\t\t\t\t\t\t\t\t\t// For XHR2 non-text, let the caller handle it (gh-2498)\n\t\t\t\t\t\t\t\t\t( xhr.responseType || \"text\" ) !== \"text\"  ||\n\t\t\t\t\t\t\t\t\ttypeof xhr.responseText !== \"string\" ?\n\t\t\t\t\t\t\t\t\t\t{ binary: xhr.response } :\n\t\t\t\t\t\t\t\t\t\t{ text: xhr.responseText },\n\t\t\t\t\t\t\t\t\txhr.getAllResponseHeaders()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\t// Listen to events\n\t\t\t\txhr.onload = callback();\n\t\t\t\terrorCallback = xhr.onerror = xhr.ontimeout = callback( \"error\" );\n\n\t\t\t\t// Support: IE 9 only\n\t\t\t\t// Use onreadystatechange to replace onabort\n\t\t\t\t// to handle uncaught aborts\n\t\t\t\tif ( xhr.onabort !== undefined ) {\n\t\t\t\t\txhr.onabort = errorCallback;\n\t\t\t\t} else {\n\t\t\t\t\txhr.onreadystatechange = function() {\n\n\t\t\t\t\t\t// Check readyState before timeout as it changes\n\t\t\t\t\t\tif ( xhr.readyState === 4 ) {\n\n\t\t\t\t\t\t\t// Allow onerror to be called first,\n\t\t\t\t\t\t\t// but that will not handle a native abort\n\t\t\t\t\t\t\t// Also, save errorCallback to a variable\n\t\t\t\t\t\t\t// as xhr.onerror cannot be accessed\n\t\t\t\t\t\t\twindow.setTimeout( function() {\n\t\t\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\t\t\terrorCallback();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Create the abort callback\n\t\t\t\tcallback = callback( \"abort\" );\n\n\t\t\t\ttry {\n\n\t\t\t\t\t// Do send the request (this may raise an exception)\n\t\t\t\t\txhr.send( options.hasContent && options.data || null );\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t// trac-14683: Only rethrow if this hasn't been notified as an error yet\n\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\n// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\njQuery.ajaxPrefilter( function( s ) {\n\tif ( s.crossDomain ) {\n\t\ts.contents.script = false;\n\t}\n} );\n\n// Install script dataType\njQuery.ajaxSetup( {\n\taccepts: {\n\t\tscript: \"text/javascript, application/javascript, \" +\n\t\t\t\"application/ecmascript, application/x-ecmascript\"\n\t},\n\tcontents: {\n\t\tscript: /\\b(?:java|ecma)script\\b/\n\t},\n\tconverters: {\n\t\t\"text script\": function( text ) {\n\t\t\tjQuery.globalEval( text );\n\t\t\treturn text;\n\t\t}\n\t}\n} );\n\n// Handle cache's special case and crossDomain\njQuery.ajaxPrefilter( \"script\", function( s ) {\n\tif ( s.cache === undefined ) {\n\t\ts.cache = false;\n\t}\n\tif ( s.crossDomain ) {\n\t\ts.type = \"GET\";\n\t}\n} );\n\n// Bind script tag hack transport\njQuery.ajaxTransport( \"script\", function( s ) {\n\n\t// This transport only deals with cross domain or forced-by-attrs requests\n\tif ( s.crossDomain || s.scriptAttrs ) {\n\t\tvar script, callback;\n\t\treturn {\n\t\t\tsend: function( _, complete ) {\n\t\t\t\tscript = jQuery( \"<script>\" )\n\t\t\t\t\t.attr( s.scriptAttrs || {} )\n\t\t\t\t\t.prop( { charset: s.scriptCharset, src: s.url } )\n\t\t\t\t\t.on( \"load error\", callback = function( evt ) {\n\t\t\t\t\t\tscript.remove();\n\t\t\t\t\t\tcallback = null;\n\t\t\t\t\t\tif ( evt ) {\n\t\t\t\t\t\t\tcomplete( evt.type === \"error\" ? 404 : 200, evt.type );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\n\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n\t\t\t\tdocument.head.appendChild( script[ 0 ] );\n\t\t\t},\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\nvar oldCallbacks = [],\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup( {\n\tjsonp: \"callback\",\n\tjsonpCallback: function() {\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce.guid++ ) );\n\t\tthis[ callback ] = true;\n\t\treturn callback;\n\t}\n} );\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n\n\tvar callbackName, overwritten, responseContainer,\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n\t\t\t\"url\" :\n\t\t\ttypeof s.data === \"string\" &&\n\t\t\t\t( s.contentType || \"\" )\n\t\t\t\t\t.indexOf( \"application/x-www-form-urlencoded\" ) === 0 &&\n\t\t\t\trjsonp.test( s.data ) && \"data\"\n\t\t);\n\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\n\n\t\t// Get callback name, remembering preexisting value associated with it\n\t\tcallbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?\n\t\t\ts.jsonpCallback() :\n\t\t\ts.jsonpCallback;\n\n\t\t// Insert callback into url or form data\n\t\tif ( jsonProp ) {\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\n\t\t} else if ( s.jsonp !== false ) {\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\n\t\t}\n\n\t\t// Use data converter to retrieve json after script execution\n\t\ts.converters[ \"script json\" ] = function() {\n\t\t\tif ( !responseContainer ) {\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\n\t\t\t}\n\t\t\treturn responseContainer[ 0 ];\n\t\t};\n\n\t\t// Force json dataType\n\t\ts.dataTypes[ 0 ] = \"json\";\n\n\t\t// Install callback\n\t\toverwritten = window[ callbackName ];\n\t\twindow[ callbackName ] = function() {\n\t\t\tresponseContainer = arguments;\n\t\t};\n\n\t\t// Clean-up function (fires after converters)\n\t\tjqXHR.always( function() {\n\n\t\t\t// If previous value didn't exist - remove it\n\t\t\tif ( overwritten === undefined ) {\n\t\t\t\tjQuery( window ).removeProp( callbackName );\n\n\t\t\t// Otherwise restore preexisting value\n\t\t\t} else {\n\t\t\t\twindow[ callbackName ] = overwritten;\n\t\t\t}\n\n\t\t\t// Save back as free\n\t\t\tif ( s[ callbackName ] ) {\n\n\t\t\t\t// Make sure that re-using the options doesn't screw things around\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t// Save the callback name for future use\n\t\t\t\toldCallbacks.push( callbackName );\n\t\t\t}\n\n\t\t\t// Call if it was a function and we have a response\n\t\t\tif ( responseContainer && isFunction( overwritten ) ) {\n\t\t\t\toverwritten( responseContainer[ 0 ] );\n\t\t\t}\n\n\t\t\tresponseContainer = overwritten = undefined;\n\t\t} );\n\n\t\t// Delegate to script\n\t\treturn \"script\";\n\t}\n} );\n\n\n\n\n// Support: Safari 8 only\n// In Safari 8 documents created via document.implementation.createHTMLDocument\n// collapse sibling forms: the second one becomes a child of the first one.\n// Because of that, this security measure has to be disabled in Safari 8.\n// https://bugs.webkit.org/show_bug.cgi?id=137337\nsupport.createHTMLDocument = ( function() {\n\tvar body = document.implementation.createHTMLDocument( \"\" ).body;\n\tbody.innerHTML = \"<form></form><form></form>\";\n\treturn body.childNodes.length === 2;\n} )();\n\n\n// Argument \"data\" should be string of html\n// context (optional): If specified, the fragment will be created in this context,\n// defaults to document\n// keepScripts (optional): If true, will include scripts passed in the html string\njQuery.parseHTML = function( data, context, keepScripts ) {\n\tif ( typeof data !== \"string\" ) {\n\t\treturn [];\n\t}\n\tif ( typeof context === \"boolean\" ) {\n\t\tkeepScripts = context;\n\t\tcontext = false;\n\t}\n\n\tvar base, parsed, scripts;\n\n\tif ( !context ) {\n\n\t\t// Stop scripts or inline event handlers from being executed immediately\n\t\t// by using document.implementation\n\t\tif ( support.createHTMLDocument ) {\n\t\t\tcontext = document.implementation.createHTMLDocument( \"\" );\n\n\t\t\t// Set the base href for the created document\n\t\t\t// so any parsed elements with URLs\n\t\t\t// are based on the document's URL (gh-2965)\n\t\t\tbase = context.createElement( \"base\" );\n\t\t\tbase.href = document.location.href;\n\t\t\tcontext.head.appendChild( base );\n\t\t} else {\n\t\t\tcontext = document;\n\t\t}\n\t}\n\n\tparsed = rsingleTag.exec( data );\n\tscripts = !keepScripts && [];\n\n\t// Single tag\n\tif ( parsed ) {\n\t\treturn [ context.createElement( parsed[ 1 ] ) ];\n\t}\n\n\tparsed = buildFragment( [ data ], context, scripts );\n\n\tif ( scripts && scripts.length ) {\n\t\tjQuery( scripts ).remove();\n\t}\n\n\treturn jQuery.merge( [], parsed.childNodes );\n};\n\n\n/**\n * Load a url into a page\n */\njQuery.fn.load = function( url, params, callback ) {\n\tvar selector, type, response,\n\t\tself = this,\n\t\toff = url.indexOf( \" \" );\n\n\tif ( off > -1 ) {\n\t\tselector = stripAndCollapse( url.slice( off ) );\n\t\turl = url.slice( 0, off );\n\t}\n\n\t// If it's a function\n\tif ( isFunction( params ) ) {\n\n\t\t// We assume that it's the callback\n\t\tcallback = params;\n\t\tparams = undefined;\n\n\t// Otherwise, build a param string\n\t} else if ( params && typeof params === \"object\" ) {\n\t\ttype = \"POST\";\n\t}\n\n\t// If we have elements to modify, make the request\n\tif ( self.length > 0 ) {\n\t\tjQuery.ajax( {\n\t\t\turl: url,\n\n\t\t\t// If \"type\" variable is undefined, then \"GET\" method will be used.\n\t\t\t// Make value of this field explicit since\n\t\t\t// user can override it through ajaxSetup method\n\t\t\ttype: type || \"GET\",\n\t\t\tdataType: \"html\",\n\t\t\tdata: params\n\t\t} ).done( function( responseText ) {\n\n\t\t\t// Save response for use in complete callback\n\t\t\tresponse = arguments;\n\n\t\t\tself.html( selector ?\n\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\n\t\t\t\tjQuery( \"<div>\" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :\n\n\t\t\t\t// Otherwise use the full result\n\t\t\t\tresponseText );\n\n\t\t// If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\n\t\t// but they are ignored because response was set above.\n\t\t// If it fails, this function gets \"jqXHR\", \"status\", \"error\"\n\t\t} ).always( callback && function( jqXHR, status ) {\n\t\t\tself.each( function() {\n\t\t\t\tcallback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );\n\t\t\t} );\n\t\t} );\n\t}\n\n\treturn this;\n};\n\n\n\n\njQuery.expr.pseudos.animated = function( elem ) {\n\treturn jQuery.grep( jQuery.timers, function( fn ) {\n\t\treturn elem === fn.elem;\n\t} ).length;\n};\n\n\n\n\njQuery.offset = {\n\tsetOffset: function( elem, options, i ) {\n\t\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\n\t\t\tposition = jQuery.css( elem, \"position\" ),\n\t\t\tcurElem = jQuery( elem ),\n\t\t\tprops = {};\n\n\t\t// Set position first, in-case top/left are set even on static elem\n\t\tif ( position === \"static\" ) {\n\t\t\telem.style.position = \"relative\";\n\t\t}\n\n\t\tcurOffset = curElem.offset();\n\t\tcurCSSTop = jQuery.css( elem, \"top\" );\n\t\tcurCSSLeft = jQuery.css( elem, \"left\" );\n\t\tcalculatePosition = ( position === \"absolute\" || position === \"fixed\" ) &&\n\t\t\t( curCSSTop + curCSSLeft ).indexOf( \"auto\" ) > -1;\n\n\t\t// Need to be able to calculate position if either\n\t\t// top or left is auto and position is either absolute or fixed\n\t\tif ( calculatePosition ) {\n\t\t\tcurPosition = curElem.position();\n\t\t\tcurTop = curPosition.top;\n\t\t\tcurLeft = curPosition.left;\n\n\t\t} else {\n\t\t\tcurTop = parseFloat( curCSSTop ) || 0;\n\t\t\tcurLeft = parseFloat( curCSSLeft ) || 0;\n\t\t}\n\n\t\tif ( isFunction( options ) ) {\n\n\t\t\t// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n\t\t\toptions = options.call( elem, i, jQuery.extend( {}, curOffset ) );\n\t\t}\n\n\t\tif ( options.top != null ) {\n\t\t\tprops.top = ( options.top - curOffset.top ) + curTop;\n\t\t}\n\t\tif ( options.left != null ) {\n\t\t\tprops.left = ( options.left - curOffset.left ) + curLeft;\n\t\t}\n\n\t\tif ( \"using\" in options ) {\n\t\t\toptions.using.call( elem, props );\n\n\t\t} else {\n\t\t\tcurElem.css( props );\n\t\t}\n\t}\n};\n\njQuery.fn.extend( {\n\n\t// offset() relates an element's border box to the document origin\n\toffset: function( options ) {\n\n\t\t// Preserve chaining for setter\n\t\tif ( arguments.length ) {\n\t\t\treturn options === undefined ?\n\t\t\t\tthis :\n\t\t\t\tthis.each( function( i ) {\n\t\t\t\t\tjQuery.offset.setOffset( this, options, i );\n\t\t\t\t} );\n\t\t}\n\n\t\tvar rect, win,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !elem ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n\t\t// Support: IE <=11 only\n\t\t// Running getBoundingClientRect on a\n\t\t// disconnected node in IE throws an error\n\t\tif ( !elem.getClientRects().length ) {\n\t\t\treturn { top: 0, left: 0 };\n\t\t}\n\n\t\t// Get document-relative position by adding viewport scroll to viewport-relative gBCR\n\t\trect = elem.getBoundingClientRect();\n\t\twin = elem.ownerDocument.defaultView;\n\t\treturn {\n\t\t\ttop: rect.top + win.pageYOffset,\n\t\t\tleft: rect.left + win.pageXOffset\n\t\t};\n\t},\n\n\t// position() relates an element's margin box to its offset parent's padding box\n\t// This corresponds to the behavior of CSS absolute positioning\n\tposition: function() {\n\t\tif ( !this[ 0 ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar offsetParent, offset, doc,\n\t\t\telem = this[ 0 ],\n\t\t\tparentOffset = { top: 0, left: 0 };\n\n\t\t// position:fixed elements are offset from the viewport, which itself always has zero offset\n\t\tif ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {\n\n\t\t\t// Assume position:fixed implies availability of getBoundingClientRect\n\t\t\toffset = elem.getBoundingClientRect();\n\n\t\t} else {\n\t\t\toffset = this.offset();\n\n\t\t\t// Account for the *real* offset parent, which can be the document or its root element\n\t\t\t// when a statically positioned element is identified\n\t\t\tdoc = elem.ownerDocument;\n\t\t\toffsetParent = elem.offsetParent || doc.documentElement;\n\t\t\twhile ( offsetParent &&\n\t\t\t\t( offsetParent === doc.body || offsetParent === doc.documentElement ) &&\n\t\t\t\tjQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\n\t\t\t\toffsetParent = offsetParent.parentNode;\n\t\t\t}\n\t\t\tif ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {\n\n\t\t\t\t// Incorporate borders into its offset, since they are outside its content origin\n\t\t\t\tparentOffset = jQuery( offsetParent ).offset();\n\t\t\t\tparentOffset.top += jQuery.css( offsetParent, \"borderTopWidth\", true );\n\t\t\t\tparentOffset.left += jQuery.css( offsetParent, \"borderLeftWidth\", true );\n\t\t\t}\n\t\t}\n\n\t\t// Subtract parent offsets and element margins\n\t\treturn {\n\t\t\ttop: offset.top - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),\n\t\t\tleft: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true )\n\t\t};\n\t},\n\n\t// This method will return documentElement in the following cases:\n\t// 1) For the element inside the iframe without offsetParent, this method will return\n\t//    documentElement of the parent window\n\t// 2) For the hidden or detached element\n\t// 3) For body or html element, i.e. in case of the html node - it will return itself\n\t//\n\t// but those exceptions were never presented as a real life use-cases\n\t// and might be considered as more preferable results.\n\t//\n\t// This logic, however, is not guaranteed and can change at any point in the future\n\toffsetParent: function() {\n\t\treturn this.map( function() {\n\t\t\tvar offsetParent = this.offsetParent;\n\n\t\t\twhile ( offsetParent && jQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\t\t\t\toffsetParent = offsetParent.offsetParent;\n\t\t\t}\n\n\t\t\treturn offsetParent || documentElement;\n\t\t} );\n\t}\n} );\n\n// Create scrollLeft and scrollTop methods\njQuery.each( { scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function( method, prop ) {\n\tvar top = \"pageYOffset\" === prop;\n\n\tjQuery.fn[ method ] = function( val ) {\n\t\treturn access( this, function( elem, method, val ) {\n\n\t\t\t// Coalesce documents and windows\n\t\t\tvar win;\n\t\t\tif ( isWindow( elem ) ) {\n\t\t\t\twin = elem;\n\t\t\t} else if ( elem.nodeType === 9 ) {\n\t\t\t\twin = elem.defaultView;\n\t\t\t}\n\n\t\t\tif ( val === undefined ) {\n\t\t\t\treturn win ? win[ prop ] : elem[ method ];\n\t\t\t}\n\n\t\t\tif ( win ) {\n\t\t\t\twin.scrollTo(\n\t\t\t\t\t!top ? val : win.pageXOffset,\n\t\t\t\t\ttop ? val : win.pageYOffset\n\t\t\t\t);\n\n\t\t\t} else {\n\t\t\t\telem[ method ] = val;\n\t\t\t}\n\t\t}, method, val, arguments.length );\n\t};\n} );\n\n// Support: Safari <=7 - 9.1, Chrome <=37 - 49\n// Add the top/left cssHooks using jQuery.fn.position\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n// getComputedStyle returns percent when specified for top/left/bottom/right;\n// rather than make the css module depend on the offset module, just check for it here\njQuery.each( [ \"top\", \"left\" ], function( _i, prop ) {\n\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\n\t\tfunction( elem, computed ) {\n\t\t\tif ( computed ) {\n\t\t\t\tcomputed = curCSS( elem, prop );\n\n\t\t\t\t// If curCSS returns percentage, fallback to offset\n\t\t\t\treturn rnumnonpx.test( computed ) ?\n\t\t\t\t\tjQuery( elem ).position()[ prop ] + \"px\" :\n\t\t\t\t\tcomputed;\n\t\t\t}\n\t\t}\n\t);\n} );\n\n\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\njQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {\n\tjQuery.each( {\n\t\tpadding: \"inner\" + name,\n\t\tcontent: type,\n\t\t\"\": \"outer\" + name\n\t}, function( defaultExtra, funcName ) {\n\n\t\t// Margin is only for outerHeight, outerWidth\n\t\tjQuery.fn[ funcName ] = function( margin, value ) {\n\t\t\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),\n\t\t\t\textra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );\n\n\t\t\treturn access( this, function( elem, type, value ) {\n\t\t\t\tvar doc;\n\n\t\t\t\tif ( isWindow( elem ) ) {\n\n\t\t\t\t\t// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\n\t\t\t\t\treturn funcName.indexOf( \"outer\" ) === 0 ?\n\t\t\t\t\t\telem[ \"inner\" + name ] :\n\t\t\t\t\t\telem.document.documentElement[ \"client\" + name ];\n\t\t\t\t}\n\n\t\t\t\t// Get document width or height\n\t\t\t\tif ( elem.nodeType === 9 ) {\n\t\t\t\t\tdoc = elem.documentElement;\n\n\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n\t\t\t\t\t// whichever is greatest\n\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\telem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],\n\t\t\t\t\t\telem.body[ \"offset\" + name ], doc[ \"offset\" + name ],\n\t\t\t\t\t\tdoc[ \"client\" + name ]\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn value === undefined ?\n\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n\t\t\t\t\tjQuery.css( elem, type, extra ) :\n\n\t\t\t\t\t// Set width or height on the element\n\t\t\t\t\tjQuery.style( elem, type, value, extra );\n\t\t\t}, type, chainable ? margin : undefined, chainable );\n\t\t};\n\t} );\n} );\n\n\njQuery.each( [\n\t\"ajaxStart\",\n\t\"ajaxStop\",\n\t\"ajaxComplete\",\n\t\"ajaxError\",\n\t\"ajaxSuccess\",\n\t\"ajaxSend\"\n], function( _i, type ) {\n\tjQuery.fn[ type ] = function( fn ) {\n\t\treturn this.on( type, fn );\n\t};\n} );\n\n\n\n\njQuery.fn.extend( {\n\n\tbind: function( types, data, fn ) {\n\t\treturn this.on( types, null, data, fn );\n\t},\n\tunbind: function( types, fn ) {\n\t\treturn this.off( types, null, fn );\n\t},\n\n\tdelegate: function( selector, types, data, fn ) {\n\t\treturn this.on( types, selector, data, fn );\n\t},\n\tundelegate: function( selector, types, fn ) {\n\n\t\t// ( namespace ) or ( selector, types [, fn] )\n\t\treturn arguments.length === 1 ?\n\t\t\tthis.off( selector, \"**\" ) :\n\t\t\tthis.off( types, selector || \"**\", fn );\n\t},\n\n\thover: function( fnOver, fnOut ) {\n\t\treturn this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\n\t}\n} );\n\njQuery.each(\n\t( \"blur focus focusin focusout resize scroll click dblclick \" +\n\t\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +\n\t\"change select submit keydown keypress keyup contextmenu\" ).split( \" \" ),\n\tfunction( _i, name ) {\n\n\t\t// Handle event binding\n\t\tjQuery.fn[ name ] = function( data, fn ) {\n\t\t\treturn arguments.length > 0 ?\n\t\t\t\tthis.on( name, null, data, fn ) :\n\t\t\t\tthis.trigger( name );\n\t\t};\n\t}\n);\n\n\n\n\n// Support: Android <=4.0 only\n// Make sure we trim BOM and NBSP\n// Require that the \"whitespace run\" starts from a non-whitespace\n// to avoid O(N^2) behavior when the engine would try matching \"\\s+$\" at each space position.\nvar rtrim = /^[\\s\\uFEFF\\xA0]+|([^\\s\\uFEFF\\xA0])[\\s\\uFEFF\\xA0]+$/g;\n\n// Bind a function to a context, optionally partially applying any\n// arguments.\n// jQuery.proxy is deprecated to promote standards (specifically Function#bind)\n// However, it is not slated for removal any time soon\njQuery.proxy = function( fn, context ) {\n\tvar tmp, args, proxy;\n\n\tif ( typeof context === \"string\" ) {\n\t\ttmp = fn[ context ];\n\t\tcontext = fn;\n\t\tfn = tmp;\n\t}\n\n\t// Quick check to determine if target is callable, in the spec\n\t// this throws a TypeError, but we will just return undefined.\n\tif ( !isFunction( fn ) ) {\n\t\treturn undefined;\n\t}\n\n\t// Simulated bind\n\targs = slice.call( arguments, 2 );\n\tproxy = function() {\n\t\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );\n\t};\n\n\t// Set the guid of unique handler to the same of original handler, so it can be removed\n\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n\treturn proxy;\n};\n\njQuery.holdReady = function( hold ) {\n\tif ( hold ) {\n\t\tjQuery.readyWait++;\n\t} else {\n\t\tjQuery.ready( true );\n\t}\n};\njQuery.isArray = Array.isArray;\njQuery.parseJSON = JSON.parse;\njQuery.nodeName = nodeName;\njQuery.isFunction = isFunction;\njQuery.isWindow = isWindow;\njQuery.camelCase = camelCase;\njQuery.type = toType;\n\njQuery.now = Date.now;\n\njQuery.isNumeric = function( obj ) {\n\n\t// As of jQuery 3.0, isNumeric is limited to\n\t// strings and numbers (primitives or objects)\n\t// that can be coerced to finite numbers (gh-2662)\n\tvar type = jQuery.type( obj );\n\treturn ( type === \"number\" || type === \"string\" ) &&\n\n\t\t// parseFloat NaNs numeric-cast false positives (\"\")\n\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t\t// subtraction forces infinities to NaN\n\t\t!isNaN( obj - parseFloat( obj ) );\n};\n\njQuery.trim = function( text ) {\n\treturn text == null ?\n\t\t\"\" :\n\t\t( text + \"\" ).replace( rtrim, \"$1\" );\n};\n\n\n\n// Register as a named AMD module, since jQuery can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase jquery is used because AMD module names are\n// derived from file names, and jQuery is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of jQuery, it will work.\n\n// Note that for maximum portability, libraries that are not jQuery should\n// declare themselves as anonymous modules, and avoid setting a global if an\n// AMD loader is present. jQuery is a special case. For more information, see\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\nif ( true ) {\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n\t\treturn jQuery;\n\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n}\n\n\n\n\nvar\n\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$;\n\njQuery.noConflict = function( deep ) {\n\tif ( window.$ === jQuery ) {\n\t\twindow.$ = _$;\n\t}\n\n\tif ( deep && window.jQuery === jQuery ) {\n\t\twindow.jQuery = _jQuery;\n\t}\n\n\treturn jQuery;\n};\n\n// Expose jQuery and $ identifiers, even in AMD\n// (trac-7102#comment:10, https://github.com/jquery/jquery/pull/557)\n// and CommonJS for browser emulators (trac-13566)\nif ( typeof noGlobal === \"undefined\" ) {\n\twindow.jQuery = window.$ = jQuery;\n}\n\n\n\n\nreturn jQuery;\n} );\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/jquery/dist/jquery.js\n");

/***/ }),

/***/ "./node_modules/jquery/dist/jquery.min.js":
/*!************************************************!*\
  !*** ./node_modules/jquery/dist/jquery.min.js ***!
  \************************************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! jQuery v3.6.1 | (c) OpenJS Foundation and other contributors | jquery.org/license */\n!function(e,t){\"use strict\"; true&&\"object\"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error(\"jQuery requires a window with a document\");return t(e)}:t(e)}(\"undefined\"!=typeof window?window:this,function(C,e){\"use strict\";var t=[],r=Object.getPrototypeOf,s=t.slice,g=t.flat?function(e){return t.flat.call(e)}:function(e){return t.concat.apply([],e)},u=t.push,i=t.indexOf,n={},o=n.toString,y=n.hasOwnProperty,a=y.toString,l=a.call(Object),v={},m=function(e){return\"function\"==typeof e&&\"number\"!=typeof e.nodeType&&\"function\"!=typeof e.item},x=function(e){return null!=e&&e===e.window},E=C.document,c={type:!0,src:!0,nonce:!0,noModule:!0};function b(e,t,n){var r,i,o=(n=n||E).createElement(\"script\");if(o.text=e,t)for(r in c)(i=t[r]||t.getAttribute&&t.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function w(e){return null==e?e+\"\":\"object\"==typeof e||\"function\"==typeof e?n[o.call(e)]||\"object\":typeof e}var f=\"3.6.1\",S=function(e,t){return new S.fn.init(e,t)};function p(e){var t=!!e&&\"length\"in e&&e.length,n=w(e);return!m(e)&&!x(e)&&(\"array\"===n||0===t||\"number\"==typeof t&&0<t&&t-1 in e)}S.fn=S.prototype={jquery:f,constructor:S,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=S.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return S.each(this,e)},map:function(n){return this.pushStack(S.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(S.grep(this,function(e,t){return(t+1)%2}))},odd:function(){return this.pushStack(S.grep(this,function(e,t){return t%2}))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(0<=n&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:u,sort:t.sort,splice:t.splice},S.extend=S.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,l=!1;for(\"boolean\"==typeof a&&(l=a,a=arguments[s]||{},s++),\"object\"==typeof a||m(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(e=arguments[s]))for(t in e)r=e[t],\"__proto__\"!==t&&a!==r&&(l&&r&&(S.isPlainObject(r)||(i=Array.isArray(r)))?(n=a[t],o=i&&!Array.isArray(n)?[]:i||S.isPlainObject(n)?n:{},i=!1,a[t]=S.extend(l,o,r)):void 0!==r&&(a[t]=r));return a},S.extend({expando:\"jQuery\"+(f+Math.random()).replace(/\\D/g,\"\"),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||\"[object Object]\"!==o.call(e))&&(!(t=r(e))||\"function\"==typeof(n=y.call(t,\"constructor\")&&t.constructor)&&a.call(n)===l)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){b(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,r=0;if(p(e)){for(n=e.length;r<n;r++)if(!1===t.call(e[r],r,e[r]))break}else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(p(Object(e))?S.merge(n,\"string\"==typeof e?[e]:e):u.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:i.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,a=!n;i<o;i++)!t(e[i],i)!==a&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,a=[];if(p(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&a.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&a.push(i);return g(a)},guid:1,support:v}),\"function\"==typeof Symbol&&(S.fn[Symbol.iterator]=t[Symbol.iterator]),S.each(\"Boolean Number String Function Array Date RegExp Object Error Symbol\".split(\" \"),function(e,t){n[\"[object \"+t+\"]\"]=t.toLowerCase()});var d=function(n){var e,d,b,o,i,h,f,g,w,u,l,T,C,a,E,y,s,c,v,S=\"sizzle\"+1*new Date,p=n.document,k=0,r=0,m=ue(),x=ue(),A=ue(),N=ue(),j=function(e,t){return e===t&&(l=!0),0},D={}.hasOwnProperty,t=[],q=t.pop,L=t.push,H=t.push,O=t.slice,P=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},R=\"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",M=\"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",I=\"(?:\\\\\\\\[\\\\da-fA-F]{1,6}\"+M+\"?|\\\\\\\\[^\\\\r\\\\n\\\\f]|[\\\\w-]|[^\\0-\\\\x7f])+\",W=\"\\\\[\"+M+\"*(\"+I+\")(?:\"+M+\"*([*^$|!~]?=)\"+M+\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\"+I+\"))|)\"+M+\"*\\\\]\",F=\":(\"+I+\")(?:\\\\((('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\"+W+\")*)|.*)\\\\)|)\",$=new RegExp(M+\"+\",\"g\"),B=new RegExp(\"^\"+M+\"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\"+M+\"+$\",\"g\"),_=new RegExp(\"^\"+M+\"*,\"+M+\"*\"),z=new RegExp(\"^\"+M+\"*([>+~]|\"+M+\")\"+M+\"*\"),U=new RegExp(M+\"|>\"),X=new RegExp(F),V=new RegExp(\"^\"+I+\"$\"),G={ID:new RegExp(\"^#(\"+I+\")\"),CLASS:new RegExp(\"^\\\\.(\"+I+\")\"),TAG:new RegExp(\"^(\"+I+\"|[*])\"),ATTR:new RegExp(\"^\"+W),PSEUDO:new RegExp(\"^\"+F),CHILD:new RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\"+M+\"*(even|odd|(([+-]|)(\\\\d*)n|)\"+M+\"*(?:([+-]|)\"+M+\"*(\\\\d+)|))\"+M+\"*\\\\)|)\",\"i\"),bool:new RegExp(\"^(?:\"+R+\")$\",\"i\"),needsContext:new RegExp(\"^\"+M+\"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\"+M+\"*((?:-\\\\d)?\\\\d*)\"+M+\"*\\\\)|)(?=[^-]|$)\",\"i\")},Y=/HTML$/i,Q=/^(?:input|select|textarea|button)$/i,J=/^h\\d$/i,K=/^[^{]+\\{\\s*\\[native \\w/,Z=/^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,ee=/[+~]/,te=new RegExp(\"\\\\\\\\[\\\\da-fA-F]{1,6}\"+M+\"?|\\\\\\\\([^\\\\r\\\\n\\\\f])\",\"g\"),ne=function(e,t){var n=\"0x\"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},re=/([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,ie=function(e,t){return t?\"\\0\"===e?\"\\ufffd\":e.slice(0,-1)+\"\\\\\"+e.charCodeAt(e.length-1).toString(16)+\" \":\"\\\\\"+e},oe=function(){T()},ae=be(function(e){return!0===e.disabled&&\"fieldset\"===e.nodeName.toLowerCase()},{dir:\"parentNode\",next:\"legend\"});try{H.apply(t=O.call(p.childNodes),p.childNodes),t[p.childNodes.length].nodeType}catch(e){H={apply:t.length?function(e,t){L.apply(e,O.call(t))}:function(e,t){var n=e.length,r=0;while(e[n++]=t[r++]);e.length=n-1}}}function se(t,e,n,r){var i,o,a,s,u,l,c,f=e&&e.ownerDocument,p=e?e.nodeType:9;if(n=n||[],\"string\"!=typeof t||!t||1!==p&&9!==p&&11!==p)return n;if(!r&&(T(e),e=e||C,E)){if(11!==p&&(u=Z.exec(t)))if(i=u[1]){if(9===p){if(!(a=e.getElementById(i)))return n;if(a.id===i)return n.push(a),n}else if(f&&(a=f.getElementById(i))&&v(e,a)&&a.id===i)return n.push(a),n}else{if(u[2])return H.apply(n,e.getElementsByTagName(t)),n;if((i=u[3])&&d.getElementsByClassName&&e.getElementsByClassName)return H.apply(n,e.getElementsByClassName(i)),n}if(d.qsa&&!N[t+\" \"]&&(!y||!y.test(t))&&(1!==p||\"object\"!==e.nodeName.toLowerCase())){if(c=t,f=e,1===p&&(U.test(t)||z.test(t))){(f=ee.test(t)&&ve(e.parentNode)||e)===e&&d.scope||((s=e.getAttribute(\"id\"))?s=s.replace(re,ie):e.setAttribute(\"id\",s=S)),o=(l=h(t)).length;while(o--)l[o]=(s?\"#\"+s:\":scope\")+\" \"+xe(l[o]);c=l.join(\",\")}try{return H.apply(n,f.querySelectorAll(c)),n}catch(e){N(t,!0)}finally{s===S&&e.removeAttribute(\"id\")}}}return g(t.replace(B,\"$1\"),e,n,r)}function ue(){var r=[];return function e(t,n){return r.push(t+\" \")>b.cacheLength&&delete e[r.shift()],e[t+\" \"]=n}}function le(e){return e[S]=!0,e}function ce(e){var t=C.createElement(\"fieldset\");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function fe(e,t){var n=e.split(\"|\"),r=n.length;while(r--)b.attrHandle[n[r]]=t}function pe(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)while(n=n.nextSibling)if(n===t)return-1;return e?1:-1}function de(t){return function(e){return\"input\"===e.nodeName.toLowerCase()&&e.type===t}}function he(n){return function(e){var t=e.nodeName.toLowerCase();return(\"input\"===t||\"button\"===t)&&e.type===n}}function ge(t){return function(e){return\"form\"in e?e.parentNode&&!1===e.disabled?\"label\"in e?\"label\"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&ae(e)===t:e.disabled===t:\"label\"in e&&e.disabled===t}}function ye(a){return le(function(o){return o=+o,le(function(e,t){var n,r=a([],e.length,o),i=r.length;while(i--)e[n=r[i]]&&(e[n]=!(t[n]=e[n]))})})}function ve(e){return e&&\"undefined\"!=typeof e.getElementsByTagName&&e}for(e in d=se.support={},i=se.isXML=function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return!Y.test(t||n&&n.nodeName||\"HTML\")},T=se.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:p;return r!=C&&9===r.nodeType&&r.documentElement&&(a=(C=r).documentElement,E=!i(C),p!=C&&(n=C.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener(\"unload\",oe,!1):n.attachEvent&&n.attachEvent(\"onunload\",oe)),d.scope=ce(function(e){return a.appendChild(e).appendChild(C.createElement(\"div\")),\"undefined\"!=typeof e.querySelectorAll&&!e.querySelectorAll(\":scope fieldset div\").length}),d.attributes=ce(function(e){return e.className=\"i\",!e.getAttribute(\"className\")}),d.getElementsByTagName=ce(function(e){return e.appendChild(C.createComment(\"\")),!e.getElementsByTagName(\"*\").length}),d.getElementsByClassName=K.test(C.getElementsByClassName),d.getById=ce(function(e){return a.appendChild(e).id=S,!C.getElementsByName||!C.getElementsByName(S).length}),d.getById?(b.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute(\"id\")===t}},b.find.ID=function(e,t){if(\"undefined\"!=typeof t.getElementById&&E){var n=t.getElementById(e);return n?[n]:[]}}):(b.filter.ID=function(e){var n=e.replace(te,ne);return function(e){var t=\"undefined\"!=typeof e.getAttributeNode&&e.getAttributeNode(\"id\");return t&&t.value===n}},b.find.ID=function(e,t){if(\"undefined\"!=typeof t.getElementById&&E){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode(\"id\"))&&n.value===e)return[o];i=t.getElementsByName(e),r=0;while(o=i[r++])if((n=o.getAttributeNode(\"id\"))&&n.value===e)return[o]}return[]}}),b.find.TAG=d.getElementsByTagName?function(e,t){return\"undefined\"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):d.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if(\"*\"===e){while(n=o[i++])1===n.nodeType&&r.push(n);return r}return o},b.find.CLASS=d.getElementsByClassName&&function(e,t){if(\"undefined\"!=typeof t.getElementsByClassName&&E)return t.getElementsByClassName(e)},s=[],y=[],(d.qsa=K.test(C.querySelectorAll))&&(ce(function(e){var t;a.appendChild(e).innerHTML=\"<a id='\"+S+\"'></a><select id='\"+S+\"-\\r\\\\' msallowcapture=''><option selected=''></option></select>\",e.querySelectorAll(\"[msallowcapture^='']\").length&&y.push(\"[*^$]=\"+M+\"*(?:''|\\\"\\\")\"),e.querySelectorAll(\"[selected]\").length||y.push(\"\\\\[\"+M+\"*(?:value|\"+R+\")\"),e.querySelectorAll(\"[id~=\"+S+\"-]\").length||y.push(\"~=\"),(t=C.createElement(\"input\")).setAttribute(\"name\",\"\"),e.appendChild(t),e.querySelectorAll(\"[name='']\").length||y.push(\"\\\\[\"+M+\"*name\"+M+\"*=\"+M+\"*(?:''|\\\"\\\")\"),e.querySelectorAll(\":checked\").length||y.push(\":checked\"),e.querySelectorAll(\"a#\"+S+\"+*\").length||y.push(\".#.+[+~]\"),e.querySelectorAll(\"\\\\\\f\"),y.push(\"[\\\\r\\\\n\\\\f]\")}),ce(function(e){e.innerHTML=\"<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>\";var t=C.createElement(\"input\");t.setAttribute(\"type\",\"hidden\"),e.appendChild(t).setAttribute(\"name\",\"D\"),e.querySelectorAll(\"[name=d]\").length&&y.push(\"name\"+M+\"*[*^$|!~]?=\"),2!==e.querySelectorAll(\":enabled\").length&&y.push(\":enabled\",\":disabled\"),a.appendChild(e).disabled=!0,2!==e.querySelectorAll(\":disabled\").length&&y.push(\":enabled\",\":disabled\"),e.querySelectorAll(\"*,:x\"),y.push(\",.*:\")})),(d.matchesSelector=K.test(c=a.matches||a.webkitMatchesSelector||a.mozMatchesSelector||a.oMatchesSelector||a.msMatchesSelector))&&ce(function(e){d.disconnectedMatch=c.call(e,\"*\"),c.call(e,\"[s!='']:x\"),s.push(\"!=\",F)}),y=y.length&&new RegExp(y.join(\"|\")),s=s.length&&new RegExp(s.join(\"|\")),t=K.test(a.compareDocumentPosition),v=t||K.test(a.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)while(t=t.parentNode)if(t===e)return!0;return!1},j=t?function(e,t){if(e===t)return l=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!d.sortDetached&&t.compareDocumentPosition(e)===n?e==C||e.ownerDocument==p&&v(p,e)?-1:t==C||t.ownerDocument==p&&v(p,t)?1:u?P(u,e)-P(u,t):0:4&n?-1:1)}:function(e,t){if(e===t)return l=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!i||!o)return e==C?-1:t==C?1:i?-1:o?1:u?P(u,e)-P(u,t):0;if(i===o)return pe(e,t);n=e;while(n=n.parentNode)a.unshift(n);n=t;while(n=n.parentNode)s.unshift(n);while(a[r]===s[r])r++;return r?pe(a[r],s[r]):a[r]==p?-1:s[r]==p?1:0}),C},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if(T(e),d.matchesSelector&&E&&!N[t+\" \"]&&(!s||!s.test(t))&&(!y||!y.test(t)))try{var n=c.call(e,t);if(n||d.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){N(t,!0)}return 0<se(t,C,null,[e]).length},se.contains=function(e,t){return(e.ownerDocument||e)!=C&&T(e),v(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!=C&&T(e);var n=b.attrHandle[t.toLowerCase()],r=n&&D.call(b.attrHandle,t.toLowerCase())?n(e,t,!E):void 0;return void 0!==r?r:d.attributes||!E?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},se.escape=function(e){return(e+\"\").replace(re,ie)},se.error=function(e){throw new Error(\"Syntax error, unrecognized expression: \"+e)},se.uniqueSort=function(e){var t,n=[],r=0,i=0;if(l=!d.detectDuplicates,u=!d.sortStable&&e.slice(0),e.sort(j),l){while(t=e[i++])t===e[i]&&(r=n.push(i));while(r--)e.splice(n[r],1)}return u=null,e},o=se.getText=function(e){var t,n=\"\",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if(\"string\"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else while(t=e[r++])n+=o(t);return n},(b=se.selectors={cacheLength:50,createPseudo:le,match:G,attrHandle:{},find:{},relative:{\">\":{dir:\"parentNode\",first:!0},\" \":{dir:\"parentNode\"},\"+\":{dir:\"previousSibling\",first:!0},\"~\":{dir:\"previousSibling\"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||\"\").replace(te,ne),\"~=\"===e[2]&&(e[3]=\" \"+e[3]+\" \"),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),\"nth\"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*(\"even\"===e[3]||\"odd\"===e[3])),e[5]=+(e[7]+e[8]||\"odd\"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return G.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||\"\":n&&X.test(n)&&(t=h(n,!0))&&(t=n.indexOf(\")\",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return\"*\"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=m[e+\" \"];return t||(t=new RegExp(\"(^|\"+M+\")\"+e+\"(\"+M+\"|$)\"))&&m(e,function(e){return t.test(\"string\"==typeof e.className&&e.className||\"undefined\"!=typeof e.getAttribute&&e.getAttribute(\"class\")||\"\")})},ATTR:function(n,r,i){return function(e){var t=se.attr(e,n);return null==t?\"!=\"===r:!r||(t+=\"\",\"=\"===r?t===i:\"!=\"===r?t!==i:\"^=\"===r?i&&0===t.indexOf(i):\"*=\"===r?i&&-1<t.indexOf(i):\"$=\"===r?i&&t.slice(-i.length)===i:\"~=\"===r?-1<(\" \"+t.replace($,\" \")+\" \").indexOf(i):\"|=\"===r&&(t===i||t.slice(0,i.length+1)===i+\"-\"))}},CHILD:function(h,e,t,g,y){var v=\"nth\"!==h.slice(0,3),m=\"last\"!==h.slice(-4),x=\"of-type\"===e;return 1===g&&0===y?function(e){return!!e.parentNode}:function(e,t,n){var r,i,o,a,s,u,l=v!==m?\"nextSibling\":\"previousSibling\",c=e.parentNode,f=x&&e.nodeName.toLowerCase(),p=!n&&!x,d=!1;if(c){if(v){while(l){a=e;while(a=a[l])if(x?a.nodeName.toLowerCase()===f:1===a.nodeType)return!1;u=l=\"only\"===h&&!u&&\"nextSibling\"}return!0}if(u=[m?c.firstChild:c.lastChild],m&&p){d=(s=(r=(i=(o=(a=c)[S]||(a[S]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]||[])[0]===k&&r[1])&&r[2],a=s&&c.childNodes[s];while(a=++s&&a&&a[l]||(d=s=0)||u.pop())if(1===a.nodeType&&++d&&a===e){i[h]=[k,s,d];break}}else if(p&&(d=s=(r=(i=(o=(a=e)[S]||(a[S]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]||[])[0]===k&&r[1]),!1===d)while(a=++s&&a&&a[l]||(d=s=0)||u.pop())if((x?a.nodeName.toLowerCase()===f:1===a.nodeType)&&++d&&(p&&((i=(o=a[S]||(a[S]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]=[k,d]),a===e))break;return(d-=y)===g||d%g==0&&0<=d/g}}},PSEUDO:function(e,o){var t,a=b.pseudos[e]||b.setFilters[e.toLowerCase()]||se.error(\"unsupported pseudo: \"+e);return a[S]?a(o):1<a.length?(t=[e,e,\"\",o],b.setFilters.hasOwnProperty(e.toLowerCase())?le(function(e,t){var n,r=a(e,o),i=r.length;while(i--)e[n=P(e,r[i])]=!(t[n]=r[i])}):function(e){return a(e,0,t)}):a}},pseudos:{not:le(function(e){var r=[],i=[],s=f(e.replace(B,\"$1\"));return s[S]?le(function(e,t,n,r){var i,o=s(e,null,r,[]),a=e.length;while(a--)(i=o[a])&&(e[a]=!(t[a]=i))}):function(e,t,n){return r[0]=e,s(r,null,n,i),r[0]=null,!i.pop()}}),has:le(function(t){return function(e){return 0<se(t,e).length}}),contains:le(function(t){return t=t.replace(te,ne),function(e){return-1<(e.textContent||o(e)).indexOf(t)}}),lang:le(function(n){return V.test(n||\"\")||se.error(\"unsupported lang: \"+n),n=n.replace(te,ne).toLowerCase(),function(e){var t;do{if(t=E?e.lang:e.getAttribute(\"xml:lang\")||e.getAttribute(\"lang\"))return(t=t.toLowerCase())===n||0===t.indexOf(n+\"-\")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=n.location&&n.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===a},focus:function(e){return e===C.activeElement&&(!C.hasFocus||C.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ge(!1),disabled:ge(!0),checked:function(e){var t=e.nodeName.toLowerCase();return\"input\"===t&&!!e.checked||\"option\"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!b.pseudos.empty(e)},header:function(e){return J.test(e.nodeName)},input:function(e){return Q.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return\"input\"===t&&\"button\"===e.type||\"button\"===t},text:function(e){var t;return\"input\"===e.nodeName.toLowerCase()&&\"text\"===e.type&&(null==(t=e.getAttribute(\"type\"))||\"text\"===t.toLowerCase())},first:ye(function(){return[0]}),last:ye(function(e,t){return[t-1]}),eq:ye(function(e,t,n){return[n<0?n+t:n]}),even:ye(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:ye(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:ye(function(e,t,n){for(var r=n<0?n+t:t<n?t:n;0<=--r;)e.push(r);return e}),gt:ye(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=b.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})b.pseudos[e]=de(e);for(e in{submit:!0,reset:!0})b.pseudos[e]=he(e);function me(){}function xe(e){for(var t=0,n=e.length,r=\"\";t<n;t++)r+=e[t].value;return r}function be(s,e,t){var u=e.dir,l=e.next,c=l||u,f=t&&\"parentNode\"===c,p=r++;return e.first?function(e,t,n){while(e=e[u])if(1===e.nodeType||f)return s(e,t,n);return!1}:function(e,t,n){var r,i,o,a=[k,p];if(n){while(e=e[u])if((1===e.nodeType||f)&&s(e,t,n))return!0}else while(e=e[u])if(1===e.nodeType||f)if(i=(o=e[S]||(e[S]={}))[e.uniqueID]||(o[e.uniqueID]={}),l&&l===e.nodeName.toLowerCase())e=e[u]||e;else{if((r=i[c])&&r[0]===k&&r[1]===p)return a[2]=r[2];if((i[c]=a)[2]=s(e,t,n))return!0}return!1}}function we(i){return 1<i.length?function(e,t,n){var r=i.length;while(r--)if(!i[r](e,t,n))return!1;return!0}:i[0]}function Te(e,t,n,r,i){for(var o,a=[],s=0,u=e.length,l=null!=t;s<u;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),l&&t.push(s)));return a}function Ce(d,h,g,y,v,e){return y&&!y[S]&&(y=Ce(y)),v&&!v[S]&&(v=Ce(v,e)),le(function(e,t,n,r){var i,o,a,s=[],u=[],l=t.length,c=e||function(e,t,n){for(var r=0,i=t.length;r<i;r++)se(e,t[r],n);return n}(h||\"*\",n.nodeType?[n]:n,[]),f=!d||!e&&h?c:Te(c,s,d,n,r),p=g?v||(e?d:l||y)?[]:t:f;if(g&&g(f,p,n,r),y){i=Te(p,u),y(i,[],n,r),o=i.length;while(o--)(a=i[o])&&(p[u[o]]=!(f[u[o]]=a))}if(e){if(v||d){if(v){i=[],o=p.length;while(o--)(a=p[o])&&i.push(f[o]=a);v(null,p=[],i,r)}o=p.length;while(o--)(a=p[o])&&-1<(i=v?P(e,a):s[o])&&(e[i]=!(t[i]=a))}}else p=Te(p===t?p.splice(l,p.length):p),v?v(null,t,p,r):H.apply(t,p)})}function Ee(e){for(var i,t,n,r=e.length,o=b.relative[e[0].type],a=o||b.relative[\" \"],s=o?1:0,u=be(function(e){return e===i},a,!0),l=be(function(e){return-1<P(i,e)},a,!0),c=[function(e,t,n){var r=!o&&(n||t!==w)||((i=t).nodeType?u(e,t,n):l(e,t,n));return i=null,r}];s<r;s++)if(t=b.relative[e[s].type])c=[be(we(c),t)];else{if((t=b.filter[e[s].type].apply(null,e[s].matches))[S]){for(n=++s;n<r;n++)if(b.relative[e[n].type])break;return Ce(1<s&&we(c),1<s&&xe(e.slice(0,s-1).concat({value:\" \"===e[s-2].type?\"*\":\"\"})).replace(B,\"$1\"),t,s<n&&Ee(e.slice(s,n)),n<r&&Ee(e=e.slice(n)),n<r&&xe(e))}c.push(t)}return we(c)}return me.prototype=b.filters=b.pseudos,b.setFilters=new me,h=se.tokenize=function(e,t){var n,r,i,o,a,s,u,l=x[e+\" \"];if(l)return t?0:l.slice(0);a=e,s=[],u=b.preFilter;while(a){for(o in n&&!(r=_.exec(a))||(r&&(a=a.slice(r[0].length)||a),s.push(i=[])),n=!1,(r=z.exec(a))&&(n=r.shift(),i.push({value:n,type:r[0].replace(B,\" \")}),a=a.slice(n.length)),b.filter)!(r=G[o].exec(a))||u[o]&&!(r=u[o](r))||(n=r.shift(),i.push({value:n,type:o,matches:r}),a=a.slice(n.length));if(!n)break}return t?a.length:a?se.error(e):x(e,s).slice(0)},f=se.compile=function(e,t){var n,y,v,m,x,r,i=[],o=[],a=A[e+\" \"];if(!a){t||(t=h(e)),n=t.length;while(n--)(a=Ee(t[n]))[S]?i.push(a):o.push(a);(a=A(e,(y=o,m=0<(v=i).length,x=0<y.length,r=function(e,t,n,r,i){var o,a,s,u=0,l=\"0\",c=e&&[],f=[],p=w,d=e||x&&b.find.TAG(\"*\",i),h=k+=null==p?1:Math.random()||.1,g=d.length;for(i&&(w=t==C||t||i);l!==g&&null!=(o=d[l]);l++){if(x&&o){a=0,t||o.ownerDocument==C||(T(o),n=!E);while(s=y[a++])if(s(o,t||C,n)){r.push(o);break}i&&(k=h)}m&&((o=!s&&o)&&u--,e&&c.push(o))}if(u+=l,m&&l!==u){a=0;while(s=v[a++])s(c,f,t,n);if(e){if(0<u)while(l--)c[l]||f[l]||(f[l]=q.call(r));f=Te(f)}H.apply(r,f),i&&!e&&0<f.length&&1<u+v.length&&se.uniqueSort(r)}return i&&(k=h,w=p),c},m?le(r):r))).selector=e}return a},g=se.select=function(e,t,n,r){var i,o,a,s,u,l=\"function\"==typeof e&&e,c=!r&&h(e=l.selector||e);if(n=n||[],1===c.length){if(2<(o=c[0]=c[0].slice(0)).length&&\"ID\"===(a=o[0]).type&&9===t.nodeType&&E&&b.relative[o[1].type]){if(!(t=(b.find.ID(a.matches[0].replace(te,ne),t)||[])[0]))return n;l&&(t=t.parentNode),e=e.slice(o.shift().value.length)}i=G.needsContext.test(e)?0:o.length;while(i--){if(a=o[i],b.relative[s=a.type])break;if((u=b.find[s])&&(r=u(a.matches[0].replace(te,ne),ee.test(o[0].type)&&ve(t.parentNode)||t))){if(o.splice(i,1),!(e=r.length&&xe(o)))return H.apply(n,r),n;break}}}return(l||f(e,c))(r,t,!E,n,!t||ee.test(e)&&ve(t.parentNode)||t),n},d.sortStable=S.split(\"\").sort(j).join(\"\")===S,d.detectDuplicates=!!l,T(),d.sortDetached=ce(function(e){return 1&e.compareDocumentPosition(C.createElement(\"fieldset\"))}),ce(function(e){return e.innerHTML=\"<a href='#'></a>\",\"#\"===e.firstChild.getAttribute(\"href\")})||fe(\"type|href|height|width\",function(e,t,n){if(!n)return e.getAttribute(t,\"type\"===t.toLowerCase()?1:2)}),d.attributes&&ce(function(e){return e.innerHTML=\"<input/>\",e.firstChild.setAttribute(\"value\",\"\"),\"\"===e.firstChild.getAttribute(\"value\")})||fe(\"value\",function(e,t,n){if(!n&&\"input\"===e.nodeName.toLowerCase())return e.defaultValue}),ce(function(e){return null==e.getAttribute(\"disabled\")})||fe(R,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),se}(C);S.find=d,S.expr=d.selectors,S.expr[\":\"]=S.expr.pseudos,S.uniqueSort=S.unique=d.uniqueSort,S.text=d.getText,S.isXMLDoc=d.isXML,S.contains=d.contains,S.escapeSelector=d.escape;var h=function(e,t,n){var r=[],i=void 0!==n;while((e=e[t])&&9!==e.nodeType)if(1===e.nodeType){if(i&&S(e).is(n))break;r.push(e)}return r},T=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},k=S.expr.match.needsContext;function A(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var N=/^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i;function j(e,n,r){return m(n)?S.grep(e,function(e,t){return!!n.call(e,t,e)!==r}):n.nodeType?S.grep(e,function(e){return e===n!==r}):\"string\"!=typeof n?S.grep(e,function(e){return-1<i.call(n,e)!==r}):S.filter(n,e,r)}S.filter=function(e,t,n){var r=t[0];return n&&(e=\":not(\"+e+\")\"),1===t.length&&1===r.nodeType?S.find.matchesSelector(r,e)?[r]:[]:S.find.matches(e,S.grep(t,function(e){return 1===e.nodeType}))},S.fn.extend({find:function(e){var t,n,r=this.length,i=this;if(\"string\"!=typeof e)return this.pushStack(S(e).filter(function(){for(t=0;t<r;t++)if(S.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)S.find(e,i[t],n);return 1<r?S.uniqueSort(n):n},filter:function(e){return this.pushStack(j(this,e||[],!1))},not:function(e){return this.pushStack(j(this,e||[],!0))},is:function(e){return!!j(this,\"string\"==typeof e&&k.test(e)?S(e):e||[],!1).length}});var D,q=/^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/;(S.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||D,\"string\"==typeof e){if(!(r=\"<\"===e[0]&&\">\"===e[e.length-1]&&3<=e.length?[null,e,null]:q.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof S?t[0]:t,S.merge(this,S.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:E,!0)),N.test(r[1])&&S.isPlainObject(t))for(r in t)m(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=E.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):m(e)?void 0!==n.ready?n.ready(e):e(S):S.makeArray(e,this)}).prototype=S.fn,D=S(E);var L=/^(?:parents|prev(?:Until|All))/,H={children:!0,contents:!0,next:!0,prev:!0};function O(e,t){while((e=e[t])&&1!==e.nodeType);return e}S.fn.extend({has:function(e){var t=S(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(S.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],a=\"string\"!=typeof e&&S(e);if(!k.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?-1<a.index(n):1===n.nodeType&&S.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(1<o.length?S.uniqueSort(o):o)},index:function(e){return e?\"string\"==typeof e?i.call(S(e),this[0]):i.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(S.uniqueSort(S.merge(this.get(),S(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),S.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return h(e,\"parentNode\")},parentsUntil:function(e,t,n){return h(e,\"parentNode\",n)},next:function(e){return O(e,\"nextSibling\")},prev:function(e){return O(e,\"previousSibling\")},nextAll:function(e){return h(e,\"nextSibling\")},prevAll:function(e){return h(e,\"previousSibling\")},nextUntil:function(e,t,n){return h(e,\"nextSibling\",n)},prevUntil:function(e,t,n){return h(e,\"previousSibling\",n)},siblings:function(e){return T((e.parentNode||{}).firstChild,e)},children:function(e){return T(e.firstChild)},contents:function(e){return null!=e.contentDocument&&r(e.contentDocument)?e.contentDocument:(A(e,\"template\")&&(e=e.content||e),S.merge([],e.childNodes))}},function(r,i){S.fn[r]=function(e,t){var n=S.map(this,i,e);return\"Until\"!==r.slice(-5)&&(t=e),t&&\"string\"==typeof t&&(n=S.filter(t,n)),1<this.length&&(H[r]||S.uniqueSort(n),L.test(r)&&n.reverse()),this.pushStack(n)}});var P=/[^\\x20\\t\\r\\n\\f]+/g;function R(e){return e}function M(e){throw e}function I(e,t,n,r){var i;try{e&&m(i=e.promise)?i.call(e).done(t).fail(n):e&&m(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}S.Callbacks=function(r){var e,n;r=\"string\"==typeof r?(e=r,n={},S.each(e.match(P)||[],function(e,t){n[t]=!0}),n):S.extend({},r);var i,t,o,a,s=[],u=[],l=-1,c=function(){for(a=a||r.once,o=i=!0;u.length;l=-1){t=u.shift();while(++l<s.length)!1===s[l].apply(t[0],t[1])&&r.stopOnFalse&&(l=s.length,t=!1)}r.memory||(t=!1),i=!1,a&&(s=t?[]:\"\")},f={add:function(){return s&&(t&&!i&&(l=s.length-1,u.push(t)),function n(e){S.each(e,function(e,t){m(t)?r.unique&&f.has(t)||s.push(t):t&&t.length&&\"string\"!==w(t)&&n(t)})}(arguments),t&&!i&&c()),this},remove:function(){return S.each(arguments,function(e,t){var n;while(-1<(n=S.inArray(t,s,n)))s.splice(n,1),n<=l&&l--}),this},has:function(e){return e?-1<S.inArray(e,s):0<s.length},empty:function(){return s&&(s=[]),this},disable:function(){return a=u=[],s=t=\"\",this},disabled:function(){return!s},lock:function(){return a=u=[],t||i||(s=t=\"\"),this},locked:function(){return!!a},fireWith:function(e,t){return a||(t=[e,(t=t||[]).slice?t.slice():t],u.push(t),i||c()),this},fire:function(){return f.fireWith(this,arguments),this},fired:function(){return!!o}};return f},S.extend({Deferred:function(e){var o=[[\"notify\",\"progress\",S.Callbacks(\"memory\"),S.Callbacks(\"memory\"),2],[\"resolve\",\"done\",S.Callbacks(\"once memory\"),S.Callbacks(\"once memory\"),0,\"resolved\"],[\"reject\",\"fail\",S.Callbacks(\"once memory\"),S.Callbacks(\"once memory\"),1,\"rejected\"]],i=\"pending\",a={state:function(){return i},always:function(){return s.done(arguments).fail(arguments),this},\"catch\":function(e){return a.then(null,e)},pipe:function(){var i=arguments;return S.Deferred(function(r){S.each(o,function(e,t){var n=m(i[t[4]])&&i[t[4]];s[t[1]](function(){var e=n&&n.apply(this,arguments);e&&m(e.promise)?e.promise().progress(r.notify).done(r.resolve).fail(r.reject):r[t[0]+\"With\"](this,n?[e]:arguments)})}),i=null}).promise()},then:function(t,n,r){var u=0;function l(i,o,a,s){return function(){var n=this,r=arguments,e=function(){var e,t;if(!(i<u)){if((e=a.apply(n,r))===o.promise())throw new TypeError(\"Thenable self-resolution\");t=e&&(\"object\"==typeof e||\"function\"==typeof e)&&e.then,m(t)?s?t.call(e,l(u,o,R,s),l(u,o,M,s)):(u++,t.call(e,l(u,o,R,s),l(u,o,M,s),l(u,o,R,o.notifyWith))):(a!==R&&(n=void 0,r=[e]),(s||o.resolveWith)(n,r))}},t=s?e:function(){try{e()}catch(e){S.Deferred.exceptionHook&&S.Deferred.exceptionHook(e,t.stackTrace),u<=i+1&&(a!==M&&(n=void 0,r=[e]),o.rejectWith(n,r))}};i?t():(S.Deferred.getStackHook&&(t.stackTrace=S.Deferred.getStackHook()),C.setTimeout(t))}}return S.Deferred(function(e){o[0][3].add(l(0,e,m(r)?r:R,e.notifyWith)),o[1][3].add(l(0,e,m(t)?t:R)),o[2][3].add(l(0,e,m(n)?n:M))}).promise()},promise:function(e){return null!=e?S.extend(e,a):a}},s={};return S.each(o,function(e,t){var n=t[2],r=t[5];a[t[1]]=n.add,r&&n.add(function(){i=r},o[3-e][2].disable,o[3-e][3].disable,o[0][2].lock,o[0][3].lock),n.add(t[3].fire),s[t[0]]=function(){return s[t[0]+\"With\"](this===s?void 0:this,arguments),this},s[t[0]+\"With\"]=n.fireWith}),a.promise(s),e&&e.call(s,s),s},when:function(e){var n=arguments.length,t=n,r=Array(t),i=s.call(arguments),o=S.Deferred(),a=function(t){return function(e){r[t]=this,i[t]=1<arguments.length?s.call(arguments):e,--n||o.resolveWith(r,i)}};if(n<=1&&(I(e,o.done(a(t)).resolve,o.reject,!n),\"pending\"===o.state()||m(i[t]&&i[t].then)))return o.then();while(t--)I(i[t],a(t),o.reject);return o.promise()}});var W=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;S.Deferred.exceptionHook=function(e,t){C.console&&C.console.warn&&e&&W.test(e.name)&&C.console.warn(\"jQuery.Deferred exception: \"+e.message,e.stack,t)},S.readyException=function(e){C.setTimeout(function(){throw e})};var F=S.Deferred();function $(){E.removeEventListener(\"DOMContentLoaded\",$),C.removeEventListener(\"load\",$),S.ready()}S.fn.ready=function(e){return F.then(e)[\"catch\"](function(e){S.readyException(e)}),this},S.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--S.readyWait:S.isReady)||(S.isReady=!0)!==e&&0<--S.readyWait||F.resolveWith(E,[S])}}),S.ready.then=F.then,\"complete\"===E.readyState||\"loading\"!==E.readyState&&!E.documentElement.doScroll?C.setTimeout(S.ready):(E.addEventListener(\"DOMContentLoaded\",$),C.addEventListener(\"load\",$));var B=function(e,t,n,r,i,o,a){var s=0,u=e.length,l=null==n;if(\"object\"===w(n))for(s in i=!0,n)B(e,t,s,n[s],!0,o,a);else if(void 0!==r&&(i=!0,m(r)||(a=!0),l&&(a?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(S(e),n)})),t))for(;s<u;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:l?t.call(e):u?t(e[0],n):o},_=/^-ms-/,z=/-([a-z])/g;function U(e,t){return t.toUpperCase()}function X(e){return e.replace(_,\"ms-\").replace(z,U)}var V=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function G(){this.expando=S.expando+G.uid++}G.uid=1,G.prototype={cache:function(e){var t=e[this.expando];return t||(t={},V(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if(\"string\"==typeof t)i[X(t)]=n;else for(r in t)i[X(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][X(t)]},access:function(e,t,n){return void 0===t||t&&\"string\"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(X):(t=X(t))in r?[t]:t.match(P)||[]).length;while(n--)delete r[t[n]]}(void 0===t||S.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!S.isEmptyObject(t)}};var Y=new G,Q=new G,J=/^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,K=/[A-Z]/g;function Z(e,t,n){var r,i;if(void 0===n&&1===e.nodeType)if(r=\"data-\"+t.replace(K,\"-$&\").toLowerCase(),\"string\"==typeof(n=e.getAttribute(r))){try{n=\"true\"===(i=n)||\"false\"!==i&&(\"null\"===i?null:i===+i+\"\"?+i:J.test(i)?JSON.parse(i):i)}catch(e){}Q.set(e,t,n)}else n=void 0;return n}S.extend({hasData:function(e){return Q.hasData(e)||Y.hasData(e)},data:function(e,t,n){return Q.access(e,t,n)},removeData:function(e,t){Q.remove(e,t)},_data:function(e,t,n){return Y.access(e,t,n)},_removeData:function(e,t){Y.remove(e,t)}}),S.fn.extend({data:function(n,e){var t,r,i,o=this[0],a=o&&o.attributes;if(void 0===n){if(this.length&&(i=Q.get(o),1===o.nodeType&&!Y.get(o,\"hasDataAttrs\"))){t=a.length;while(t--)a[t]&&0===(r=a[t].name).indexOf(\"data-\")&&(r=X(r.slice(5)),Z(o,r,i[r]));Y.set(o,\"hasDataAttrs\",!0)}return i}return\"object\"==typeof n?this.each(function(){Q.set(this,n)}):B(this,function(e){var t;if(o&&void 0===e)return void 0!==(t=Q.get(o,n))?t:void 0!==(t=Z(o,n))?t:void 0;this.each(function(){Q.set(this,n,e)})},null,e,1<arguments.length,null,!0)},removeData:function(e){return this.each(function(){Q.remove(this,e)})}}),S.extend({queue:function(e,t,n){var r;if(e)return t=(t||\"fx\")+\"queue\",r=Y.get(e,t),n&&(!r||Array.isArray(n)?r=Y.access(e,t,S.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||\"fx\";var n=S.queue(e,t),r=n.length,i=n.shift(),o=S._queueHooks(e,t);\"inprogress\"===i&&(i=n.shift(),r--),i&&(\"fx\"===t&&n.unshift(\"inprogress\"),delete o.stop,i.call(e,function(){S.dequeue(e,t)},o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+\"queueHooks\";return Y.get(e,n)||Y.access(e,n,{empty:S.Callbacks(\"once memory\").add(function(){Y.remove(e,[t+\"queue\",n])})})}}),S.fn.extend({queue:function(t,n){var e=2;return\"string\"!=typeof t&&(n=t,t=\"fx\",e--),arguments.length<e?S.queue(this[0],t):void 0===n?this:this.each(function(){var e=S.queue(this,t,n);S._queueHooks(this,t),\"fx\"===t&&\"inprogress\"!==e[0]&&S.dequeue(this,t)})},dequeue:function(e){return this.each(function(){S.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||\"fx\",[])},promise:function(e,t){var n,r=1,i=S.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};\"string\"!=typeof e&&(t=e,e=void 0),e=e||\"fx\";while(a--)(n=Y.get(o[a],e+\"queueHooks\"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var ee=/[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,te=new RegExp(\"^(?:([+-])=|)(\"+ee+\")([a-z%]*)$\",\"i\"),ne=[\"Top\",\"Right\",\"Bottom\",\"Left\"],re=E.documentElement,ie=function(e){return S.contains(e.ownerDocument,e)},oe={composed:!0};re.getRootNode&&(ie=function(e){return S.contains(e.ownerDocument,e)||e.getRootNode(oe)===e.ownerDocument});var ae=function(e,t){return\"none\"===(e=t||e).style.display||\"\"===e.style.display&&ie(e)&&\"none\"===S.css(e,\"display\")};function se(e,t,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return S.css(e,t,\"\")},u=s(),l=n&&n[3]||(S.cssNumber[t]?\"\":\"px\"),c=e.nodeType&&(S.cssNumber[t]||\"px\"!==l&&+u)&&te.exec(S.css(e,t));if(c&&c[3]!==l){u/=2,l=l||c[3],c=+u||1;while(a--)S.style(e,t,c+l),(1-o)*(1-(o=s()/u||.5))<=0&&(a=0),c/=o;c*=2,S.style(e,t,c+l),n=n||[]}return n&&(c=+c||+u||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=c,r.end=i)),i}var ue={};function le(e,t){for(var n,r,i,o,a,s,u,l=[],c=0,f=e.length;c<f;c++)(r=e[c]).style&&(n=r.style.display,t?(\"none\"===n&&(l[c]=Y.get(r,\"display\")||null,l[c]||(r.style.display=\"\")),\"\"===r.style.display&&ae(r)&&(l[c]=(u=a=o=void 0,a=(i=r).ownerDocument,s=i.nodeName,(u=ue[s])||(o=a.body.appendChild(a.createElement(s)),u=S.css(o,\"display\"),o.parentNode.removeChild(o),\"none\"===u&&(u=\"block\"),ue[s]=u)))):\"none\"!==n&&(l[c]=\"none\",Y.set(r,\"display\",n)));for(c=0;c<f;c++)null!=l[c]&&(e[c].style.display=l[c]);return e}S.fn.extend({show:function(){return le(this,!0)},hide:function(){return le(this)},toggle:function(e){return\"boolean\"==typeof e?e?this.show():this.hide():this.each(function(){ae(this)?S(this).show():S(this).hide()})}});var ce,fe,pe=/^(?:checkbox|radio)$/i,de=/<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i,he=/^$|^module$|\\/(?:java|ecma)script/i;ce=E.createDocumentFragment().appendChild(E.createElement(\"div\")),(fe=E.createElement(\"input\")).setAttribute(\"type\",\"radio\"),fe.setAttribute(\"checked\",\"checked\"),fe.setAttribute(\"name\",\"t\"),ce.appendChild(fe),v.checkClone=ce.cloneNode(!0).cloneNode(!0).lastChild.checked,ce.innerHTML=\"<textarea>x</textarea>\",v.noCloneChecked=!!ce.cloneNode(!0).lastChild.defaultValue,ce.innerHTML=\"<option></option>\",v.option=!!ce.lastChild;var ge={thead:[1,\"<table>\",\"</table>\"],col:[2,\"<table><colgroup>\",\"</colgroup></table>\"],tr:[2,\"<table><tbody>\",\"</tbody></table>\"],td:[3,\"<table><tbody><tr>\",\"</tr></tbody></table>\"],_default:[0,\"\",\"\"]};function ye(e,t){var n;return n=\"undefined\"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||\"*\"):\"undefined\"!=typeof e.querySelectorAll?e.querySelectorAll(t||\"*\"):[],void 0===t||t&&A(e,t)?S.merge([e],n):n}function ve(e,t){for(var n=0,r=e.length;n<r;n++)Y.set(e[n],\"globalEval\",!t||Y.get(t[n],\"globalEval\"))}ge.tbody=ge.tfoot=ge.colgroup=ge.caption=ge.thead,ge.th=ge.td,v.option||(ge.optgroup=ge.option=[1,\"<select multiple='multiple'>\",\"</select>\"]);var me=/<|&#?\\w+;/;function xe(e,t,n,r,i){for(var o,a,s,u,l,c,f=t.createDocumentFragment(),p=[],d=0,h=e.length;d<h;d++)if((o=e[d])||0===o)if(\"object\"===w(o))S.merge(p,o.nodeType?[o]:o);else if(me.test(o)){a=a||f.appendChild(t.createElement(\"div\")),s=(de.exec(o)||[\"\",\"\"])[1].toLowerCase(),u=ge[s]||ge._default,a.innerHTML=u[1]+S.htmlPrefilter(o)+u[2],c=u[0];while(c--)a=a.lastChild;S.merge(p,a.childNodes),(a=f.firstChild).textContent=\"\"}else p.push(t.createTextNode(o));f.textContent=\"\",d=0;while(o=p[d++])if(r&&-1<S.inArray(o,r))i&&i.push(o);else if(l=ie(o),a=ye(f.appendChild(o),\"script\"),l&&ve(a),n){c=0;while(o=a[c++])he.test(o.type||\"\")&&n.push(o)}return f}var be=/^([^.]*)(?:\\.(.+)|)/;function we(){return!0}function Te(){return!1}function Ce(e,t){return e===function(){try{return E.activeElement}catch(e){}}()==(\"focus\"===t)}function Ee(e,t,n,r,i,o){var a,s;if(\"object\"==typeof t){for(s in\"string\"!=typeof n&&(r=r||n,n=void 0),t)Ee(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&(\"string\"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=Te;else if(!i)return e;return 1===o&&(a=i,(i=function(e){return S().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=S.guid++)),e.each(function(){S.event.add(this,t,i,r,n)})}function Se(e,i,o){o?(Y.set(e,i,!1),S.event.add(e,i,{namespace:!1,handler:function(e){var t,n,r=Y.get(this,i);if(1&e.isTrigger&&this[i]){if(r.length)(S.event.special[i]||{}).delegateType&&e.stopPropagation();else if(r=s.call(arguments),Y.set(this,i,r),t=o(this,i),this[i](),r!==(n=Y.get(this,i))||t?Y.set(this,i,!1):n={},r!==n)return e.stopImmediatePropagation(),e.preventDefault(),n&&n.value}else r.length&&(Y.set(this,i,{value:S.event.trigger(S.extend(r[0],S.Event.prototype),r.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===Y.get(e,i)&&S.event.add(e,i,we)}S.event={global:{},add:function(t,e,n,r,i){var o,a,s,u,l,c,f,p,d,h,g,y=Y.get(t);if(V(t)){n.handler&&(n=(o=n).handler,i=o.selector),i&&S.find.matchesSelector(re,i),n.guid||(n.guid=S.guid++),(u=y.events)||(u=y.events=Object.create(null)),(a=y.handle)||(a=y.handle=function(e){return\"undefined\"!=typeof S&&S.event.triggered!==e.type?S.event.dispatch.apply(t,arguments):void 0}),l=(e=(e||\"\").match(P)||[\"\"]).length;while(l--)d=g=(s=be.exec(e[l])||[])[1],h=(s[2]||\"\").split(\".\").sort(),d&&(f=S.event.special[d]||{},d=(i?f.delegateType:f.bindType)||d,f=S.event.special[d]||{},c=S.extend({type:d,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&S.expr.match.needsContext.test(i),namespace:h.join(\".\")},o),(p=u[d])||((p=u[d]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(t,r,h,a)||t.addEventListener&&t.addEventListener(d,a)),f.add&&(f.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,c):p.push(c),S.event.global[d]=!0)}},remove:function(e,t,n,r,i){var o,a,s,u,l,c,f,p,d,h,g,y=Y.hasData(e)&&Y.get(e);if(y&&(u=y.events)){l=(t=(t||\"\").match(P)||[\"\"]).length;while(l--)if(d=g=(s=be.exec(t[l])||[])[1],h=(s[2]||\"\").split(\".\").sort(),d){f=S.event.special[d]||{},p=u[d=(r?f.delegateType:f.bindType)||d]||[],s=s[2]&&new RegExp(\"(^|\\\\.)\"+h.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"),a=o=p.length;while(o--)c=p[o],!i&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&(\"**\"!==r||!c.selector)||(p.splice(o,1),c.selector&&p.delegateCount--,f.remove&&f.remove.call(e,c));a&&!p.length&&(f.teardown&&!1!==f.teardown.call(e,h,y.handle)||S.removeEvent(e,d,y.handle),delete u[d])}else for(d in u)S.event.remove(e,d+t[l],n,r,!0);S.isEmptyObject(u)&&Y.remove(e,\"handle events\")}},dispatch:function(e){var t,n,r,i,o,a,s=new Array(arguments.length),u=S.event.fix(e),l=(Y.get(this,\"events\")||Object.create(null))[u.type]||[],c=S.event.special[u.type]||{};for(s[0]=u,t=1;t<arguments.length;t++)s[t]=arguments[t];if(u.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,u)){a=S.event.handlers.call(this,u,l),t=0;while((i=a[t++])&&!u.isPropagationStopped()){u.currentTarget=i.elem,n=0;while((o=i.handlers[n++])&&!u.isImmediatePropagationStopped())u.rnamespace&&!1!==o.namespace&&!u.rnamespace.test(o.namespace)||(u.handleObj=o,u.data=o.data,void 0!==(r=((S.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,s))&&!1===(u.result=r)&&(u.preventDefault(),u.stopPropagation()))}return c.postDispatch&&c.postDispatch.call(this,u),u.result}},handlers:function(e,t){var n,r,i,o,a,s=[],u=t.delegateCount,l=e.target;if(u&&l.nodeType&&!(\"click\"===e.type&&1<=e.button))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&(\"click\"!==e.type||!0!==l.disabled)){for(o=[],a={},n=0;n<u;n++)void 0===a[i=(r=t[n]).selector+\" \"]&&(a[i]=r.needsContext?-1<S(i,this).index(l):S.find(i,this,null,[l]).length),a[i]&&o.push(r);o.length&&s.push({elem:l,handlers:o})}return l=this,u<t.length&&s.push({elem:l,handlers:t.slice(u)}),s},addProp:function(t,e){Object.defineProperty(S.Event.prototype,t,{enumerable:!0,configurable:!0,get:m(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[S.expando]?e:new S.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return pe.test(t.type)&&t.click&&A(t,\"input\")&&Se(t,\"click\",we),!1},trigger:function(e){var t=this||e;return pe.test(t.type)&&t.click&&A(t,\"input\")&&Se(t,\"click\"),!0},_default:function(e){var t=e.target;return pe.test(t.type)&&t.click&&A(t,\"input\")&&Y.get(t,\"click\")||A(t,\"a\")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},S.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},S.Event=function(e,t){if(!(this instanceof S.Event))return new S.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?we:Te,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&S.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[S.expando]=!0},S.Event.prototype={constructor:S.Event,isDefaultPrevented:Te,isPropagationStopped:Te,isImmediatePropagationStopped:Te,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=we,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=we,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=we,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},S.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,\"char\":!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},S.event.addProp),S.each({focus:\"focusin\",blur:\"focusout\"},function(t,e){S.event.special[t]={setup:function(){return Se(this,t,Ce),!1},trigger:function(){return Se(this,t),!0},_default:function(e){return Y.get(e.target,t)},delegateType:e}}),S.each({mouseenter:\"mouseover\",mouseleave:\"mouseout\",pointerenter:\"pointerover\",pointerleave:\"pointerout\"},function(e,i){S.event.special[e]={delegateType:i,bindType:i,handle:function(e){var t,n=e.relatedTarget,r=e.handleObj;return n&&(n===this||S.contains(this,n))||(e.type=r.origType,t=r.handler.apply(this,arguments),e.type=i),t}}}),S.fn.extend({on:function(e,t,n,r){return Ee(this,e,t,n,r)},one:function(e,t,n,r){return Ee(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,S(e.delegateTarget).off(r.namespace?r.origType+\".\"+r.namespace:r.origType,r.selector,r.handler),this;if(\"object\"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&\"function\"!=typeof t||(n=t,t=void 0),!1===n&&(n=Te),this.each(function(){S.event.remove(this,e,n,t)})}});var ke=/<script|<style|<link/i,Ae=/checked\\s*(?:[^=]|=\\s*.checked.)/i,Ne=/^\\s*<!\\[CDATA\\[|\\]\\]>\\s*$/g;function je(e,t){return A(e,\"table\")&&A(11!==t.nodeType?t:t.firstChild,\"tr\")&&S(e).children(\"tbody\")[0]||e}function De(e){return e.type=(null!==e.getAttribute(\"type\"))+\"/\"+e.type,e}function qe(e){return\"true/\"===(e.type||\"\").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute(\"type\"),e}function Le(e,t){var n,r,i,o,a,s;if(1===t.nodeType){if(Y.hasData(e)&&(s=Y.get(e).events))for(i in Y.remove(t,\"handle events\"),s)for(n=0,r=s[i].length;n<r;n++)S.event.add(t,i,s[i][n]);Q.hasData(e)&&(o=Q.access(e),a=S.extend({},o),Q.set(t,a))}}function He(n,r,i,o){r=g(r);var e,t,a,s,u,l,c=0,f=n.length,p=f-1,d=r[0],h=m(d);if(h||1<f&&\"string\"==typeof d&&!v.checkClone&&Ae.test(d))return n.each(function(e){var t=n.eq(e);h&&(r[0]=d.call(this,e,t.html())),He(t,r,i,o)});if(f&&(t=(e=xe(r,n[0].ownerDocument,!1,n,o)).firstChild,1===e.childNodes.length&&(e=t),t||o)){for(s=(a=S.map(ye(e,\"script\"),De)).length;c<f;c++)u=e,c!==p&&(u=S.clone(u,!0,!0),s&&S.merge(a,ye(u,\"script\"))),i.call(n[c],u,c);if(s)for(l=a[a.length-1].ownerDocument,S.map(a,qe),c=0;c<s;c++)u=a[c],he.test(u.type||\"\")&&!Y.access(u,\"globalEval\")&&S.contains(l,u)&&(u.src&&\"module\"!==(u.type||\"\").toLowerCase()?S._evalUrl&&!u.noModule&&S._evalUrl(u.src,{nonce:u.nonce||u.getAttribute(\"nonce\")},l):b(u.textContent.replace(Ne,\"\"),u,l))}return n}function Oe(e,t,n){for(var r,i=t?S.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||S.cleanData(ye(r)),r.parentNode&&(n&&ie(r)&&ve(ye(r,\"script\")),r.parentNode.removeChild(r));return e}S.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var r,i,o,a,s,u,l,c=e.cloneNode(!0),f=ie(e);if(!(v.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||S.isXMLDoc(e)))for(a=ye(c),r=0,i=(o=ye(e)).length;r<i;r++)s=o[r],u=a[r],void 0,\"input\"===(l=u.nodeName.toLowerCase())&&pe.test(s.type)?u.checked=s.checked:\"input\"!==l&&\"textarea\"!==l||(u.defaultValue=s.defaultValue);if(t)if(n)for(o=o||ye(e),a=a||ye(c),r=0,i=o.length;r<i;r++)Le(o[r],a[r]);else Le(e,c);return 0<(a=ye(c,\"script\")).length&&ve(a,!f&&ye(e,\"script\")),c},cleanData:function(e){for(var t,n,r,i=S.event.special,o=0;void 0!==(n=e[o]);o++)if(V(n)){if(t=n[Y.expando]){if(t.events)for(r in t.events)i[r]?S.event.remove(n,r):S.removeEvent(n,r,t.handle);n[Y.expando]=void 0}n[Q.expando]&&(n[Q.expando]=void 0)}}}),S.fn.extend({detach:function(e){return Oe(this,e,!0)},remove:function(e){return Oe(this,e)},text:function(e){return B(this,function(e){return void 0===e?S.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return He(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||je(this,e).appendChild(e)})},prepend:function(){return He(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=je(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return He(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return He(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(S.cleanData(ye(e,!1)),e.textContent=\"\");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return S.clone(this,e,t)})},html:function(e){return B(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if(\"string\"==typeof e&&!ke.test(e)&&!ge[(de.exec(e)||[\"\",\"\"])[1].toLowerCase()]){e=S.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(S.cleanData(ye(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return He(this,arguments,function(e){var t=this.parentNode;S.inArray(this,n)<0&&(S.cleanData(ye(this)),t&&t.replaceChild(e,this))},n)}}),S.each({appendTo:\"append\",prependTo:\"prepend\",insertBefore:\"before\",insertAfter:\"after\",replaceAll:\"replaceWith\"},function(e,a){S.fn[e]=function(e){for(var t,n=[],r=S(e),i=r.length-1,o=0;o<=i;o++)t=o===i?this:this.clone(!0),S(r[o])[a](t),u.apply(n,t.get());return this.pushStack(n)}});var Pe=new RegExp(\"^(\"+ee+\")(?!px)[a-z%]+$\",\"i\"),Re=/^--/,Me=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=C),t.getComputedStyle(e)},Ie=function(e,t,n){var r,i,o={};for(i in t)o[i]=e.style[i],e.style[i]=t[i];for(i in r=n.call(e),t)e.style[i]=o[i];return r},We=new RegExp(ne.join(\"|\"),\"i\"),Fe=\"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",$e=new RegExp(\"^\"+Fe+\"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\"+Fe+\"+$\",\"g\");function Be(e,t,n){var r,i,o,a,s=Re.test(t),u=e.style;return(n=n||Me(e))&&(a=n.getPropertyValue(t)||n[t],s&&(a=a.replace($e,\"$1\")),\"\"!==a||ie(e)||(a=S.style(e,t)),!v.pixelBoxStyles()&&Pe.test(a)&&We.test(t)&&(r=u.width,i=u.minWidth,o=u.maxWidth,u.minWidth=u.maxWidth=u.width=a,a=n.width,u.width=r,u.minWidth=i,u.maxWidth=o)),void 0!==a?a+\"\":a}function _e(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(l){u.style.cssText=\"position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0\",l.style.cssText=\"position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%\",re.appendChild(u).appendChild(l);var e=C.getComputedStyle(l);n=\"1%\"!==e.top,s=12===t(e.marginLeft),l.style.right=\"60%\",o=36===t(e.right),r=36===t(e.width),l.style.position=\"absolute\",i=12===t(l.offsetWidth/3),re.removeChild(u),l=null}}function t(e){return Math.round(parseFloat(e))}var n,r,i,o,a,s,u=E.createElement(\"div\"),l=E.createElement(\"div\");l.style&&(l.style.backgroundClip=\"content-box\",l.cloneNode(!0).style.backgroundClip=\"\",v.clearCloneStyle=\"content-box\"===l.style.backgroundClip,S.extend(v,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),o},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),s},scrollboxSize:function(){return e(),i},reliableTrDimensions:function(){var e,t,n,r;return null==a&&(e=E.createElement(\"table\"),t=E.createElement(\"tr\"),n=E.createElement(\"div\"),e.style.cssText=\"position:absolute;left:-11111px;border-collapse:separate\",t.style.cssText=\"border:1px solid\",t.style.height=\"1px\",n.style.height=\"9px\",n.style.display=\"block\",re.appendChild(e).appendChild(t).appendChild(n),r=C.getComputedStyle(t),a=parseInt(r.height,10)+parseInt(r.borderTopWidth,10)+parseInt(r.borderBottomWidth,10)===t.offsetHeight,re.removeChild(e)),a}}))}();var ze=[\"Webkit\",\"Moz\",\"ms\"],Ue=E.createElement(\"div\").style,Xe={};function Ve(e){var t=S.cssProps[e]||Xe[e];return t||(e in Ue?e:Xe[e]=function(e){var t=e[0].toUpperCase()+e.slice(1),n=ze.length;while(n--)if((e=ze[n]+t)in Ue)return e}(e)||e)}var Ge=/^(none|table(?!-c[ea]).+)/,Ye={position:\"absolute\",visibility:\"hidden\",display:\"block\"},Qe={letterSpacing:\"0\",fontWeight:\"400\"};function Je(e,t,n){var r=te.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||\"px\"):t}function Ke(e,t,n,r,i,o){var a=\"width\"===t?1:0,s=0,u=0;if(n===(r?\"border\":\"content\"))return 0;for(;a<4;a+=2)\"margin\"===n&&(u+=S.css(e,n+ne[a],!0,i)),r?(\"content\"===n&&(u-=S.css(e,\"padding\"+ne[a],!0,i)),\"margin\"!==n&&(u-=S.css(e,\"border\"+ne[a]+\"Width\",!0,i))):(u+=S.css(e,\"padding\"+ne[a],!0,i),\"padding\"!==n?u+=S.css(e,\"border\"+ne[a]+\"Width\",!0,i):s+=S.css(e,\"border\"+ne[a]+\"Width\",!0,i));return!r&&0<=o&&(u+=Math.max(0,Math.ceil(e[\"offset\"+t[0].toUpperCase()+t.slice(1)]-o-u-s-.5))||0),u}function Ze(e,t,n){var r=Me(e),i=(!v.boxSizingReliable()||n)&&\"border-box\"===S.css(e,\"boxSizing\",!1,r),o=i,a=Be(e,t,r),s=\"offset\"+t[0].toUpperCase()+t.slice(1);if(Pe.test(a)){if(!n)return a;a=\"auto\"}return(!v.boxSizingReliable()&&i||!v.reliableTrDimensions()&&A(e,\"tr\")||\"auto\"===a||!parseFloat(a)&&\"inline\"===S.css(e,\"display\",!1,r))&&e.getClientRects().length&&(i=\"border-box\"===S.css(e,\"boxSizing\",!1,r),(o=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+Ke(e,t,n||(i?\"border\":\"content\"),o,r,a)+\"px\"}function et(e,t,n,r,i){return new et.prototype.init(e,t,n,r,i)}S.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Be(e,\"opacity\");return\"\"===n?\"1\":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=X(t),u=Re.test(t),l=e.style;if(u||(t=Ve(s)),a=S.cssHooks[t]||S.cssHooks[s],void 0===n)return a&&\"get\"in a&&void 0!==(i=a.get(e,!1,r))?i:l[t];\"string\"===(o=typeof n)&&(i=te.exec(n))&&i[1]&&(n=se(e,t,i),o=\"number\"),null!=n&&n==n&&(\"number\"!==o||u||(n+=i&&i[3]||(S.cssNumber[s]?\"\":\"px\")),v.clearCloneStyle||\"\"!==n||0!==t.indexOf(\"background\")||(l[t]=\"inherit\"),a&&\"set\"in a&&void 0===(n=a.set(e,n,r))||(u?l.setProperty(t,n):l[t]=n))}},css:function(e,t,n,r){var i,o,a,s=X(t);return Re.test(t)||(t=Ve(s)),(a=S.cssHooks[t]||S.cssHooks[s])&&\"get\"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=Be(e,t,r)),\"normal\"===i&&t in Qe&&(i=Qe[t]),\"\"===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),S.each([\"height\",\"width\"],function(e,u){S.cssHooks[u]={get:function(e,t,n){if(t)return!Ge.test(S.css(e,\"display\"))||e.getClientRects().length&&e.getBoundingClientRect().width?Ze(e,u,n):Ie(e,Ye,function(){return Ze(e,u,n)})},set:function(e,t,n){var r,i=Me(e),o=!v.scrollboxSize()&&\"absolute\"===i.position,a=(o||n)&&\"border-box\"===S.css(e,\"boxSizing\",!1,i),s=n?Ke(e,u,n,a,i):0;return a&&o&&(s-=Math.ceil(e[\"offset\"+u[0].toUpperCase()+u.slice(1)]-parseFloat(i[u])-Ke(e,u,\"border\",!1,i)-.5)),s&&(r=te.exec(t))&&\"px\"!==(r[3]||\"px\")&&(e.style[u]=t,t=S.css(e,u)),Je(0,t,s)}}}),S.cssHooks.marginLeft=_e(v.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Be(e,\"marginLeft\"))||e.getBoundingClientRect().left-Ie(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+\"px\"}),S.each({margin:\"\",padding:\"\",border:\"Width\"},function(i,o){S.cssHooks[i+o]={expand:function(e){for(var t=0,n={},r=\"string\"==typeof e?e.split(\" \"):[e];t<4;t++)n[i+ne[t]+o]=r[t]||r[t-2]||r[0];return n}},\"margin\"!==i&&(S.cssHooks[i+o].set=Je)}),S.fn.extend({css:function(e,t){return B(this,function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=Me(e),i=t.length;a<i;a++)o[t[a]]=S.css(e,t[a],!1,r);return o}return void 0!==n?S.style(e,t,n):S.css(e,t)},e,t,1<arguments.length)}}),((S.Tween=et).prototype={constructor:et,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||S.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(S.cssNumber[n]?\"\":\"px\")},cur:function(){var e=et.propHooks[this.prop];return e&&e.get?e.get(this):et.propHooks._default.get(this)},run:function(e){var t,n=et.propHooks[this.prop];return this.options.duration?this.pos=t=S.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):et.propHooks._default.set(this),this}}).init.prototype=et.prototype,(et.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=S.css(e.elem,e.prop,\"\"))&&\"auto\"!==t?t:0},set:function(e){S.fx.step[e.prop]?S.fx.step[e.prop](e):1!==e.elem.nodeType||!S.cssHooks[e.prop]&&null==e.elem.style[Ve(e.prop)]?e.elem[e.prop]=e.now:S.style(e.elem,e.prop,e.now+e.unit)}}}).scrollTop=et.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},S.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:\"swing\"},S.fx=et.prototype.init,S.fx.step={};var tt,nt,rt,it,ot=/^(?:toggle|show|hide)$/,at=/queueHooks$/;function st(){nt&&(!1===E.hidden&&C.requestAnimationFrame?C.requestAnimationFrame(st):C.setTimeout(st,S.fx.interval),S.fx.tick())}function ut(){return C.setTimeout(function(){tt=void 0}),tt=Date.now()}function lt(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i[\"margin\"+(n=ne[r])]=i[\"padding\"+n]=e;return t&&(i.opacity=i.width=e),i}function ct(e,t,n){for(var r,i=(ft.tweeners[t]||[]).concat(ft.tweeners[\"*\"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,t,e))return r}function ft(o,e,t){var n,a,r=0,i=ft.prefilters.length,s=S.Deferred().always(function(){delete u.elem}),u=function(){if(a)return!1;for(var e=tt||ut(),t=Math.max(0,l.startTime+l.duration-e),n=1-(t/l.duration||0),r=0,i=l.tweens.length;r<i;r++)l.tweens[r].run(n);return s.notifyWith(o,[l,n,t]),n<1&&i?t:(i||s.notifyWith(o,[l,1,0]),s.resolveWith(o,[l]),!1)},l=s.promise({elem:o,props:S.extend({},e),opts:S.extend(!0,{specialEasing:{},easing:S.easing._default},t),originalProperties:e,originalOptions:t,startTime:tt||ut(),duration:t.duration,tweens:[],createTween:function(e,t){var n=S.Tween(o,l.opts,e,t,l.opts.specialEasing[e]||l.opts.easing);return l.tweens.push(n),n},stop:function(e){var t=0,n=e?l.tweens.length:0;if(a)return this;for(a=!0;t<n;t++)l.tweens[t].run(1);return e?(s.notifyWith(o,[l,1,0]),s.resolveWith(o,[l,e])):s.rejectWith(o,[l,e]),this}}),c=l.props;for(!function(e,t){var n,r,i,o,a;for(n in e)if(i=t[r=X(n)],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(a=S.cssHooks[r])&&\"expand\"in a)for(n in o=a.expand(o),delete e[r],o)n in e||(e[n]=o[n],t[n]=i);else t[r]=i}(c,l.opts.specialEasing);r<i;r++)if(n=ft.prefilters[r].call(l,o,c,l.opts))return m(n.stop)&&(S._queueHooks(l.elem,l.opts.queue).stop=n.stop.bind(n)),n;return S.map(c,ct,l),m(l.opts.start)&&l.opts.start.call(o,l),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always),S.fx.timer(S.extend(u,{elem:o,anim:l,queue:l.opts.queue})),l}S.Animation=S.extend(ft,{tweeners:{\"*\":[function(e,t){var n=this.createTween(e,t);return se(n.elem,e,te.exec(t),n),n}]},tweener:function(e,t){m(e)?(t=e,e=[\"*\"]):e=e.match(P);for(var n,r=0,i=e.length;r<i;r++)n=e[r],ft.tweeners[n]=ft.tweeners[n]||[],ft.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,i,o,a,s,u,l,c,f=\"width\"in t||\"height\"in t,p=this,d={},h=e.style,g=e.nodeType&&ae(e),y=Y.get(e,\"fxshow\");for(r in n.queue||(null==(a=S._queueHooks(e,\"fx\")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,p.always(function(){p.always(function(){a.unqueued--,S.queue(e,\"fx\").length||a.empty.fire()})})),t)if(i=t[r],ot.test(i)){if(delete t[r],o=o||\"toggle\"===i,i===(g?\"hide\":\"show\")){if(\"show\"!==i||!y||void 0===y[r])continue;g=!0}d[r]=y&&y[r]||S.style(e,r)}if((u=!S.isEmptyObject(t))||!S.isEmptyObject(d))for(r in f&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(l=y&&y.display)&&(l=Y.get(e,\"display\")),\"none\"===(c=S.css(e,\"display\"))&&(l?c=l:(le([e],!0),l=e.style.display||l,c=S.css(e,\"display\"),le([e]))),(\"inline\"===c||\"inline-block\"===c&&null!=l)&&\"none\"===S.css(e,\"float\")&&(u||(p.done(function(){h.display=l}),null==l&&(c=h.display,l=\"none\"===c?\"\":c)),h.display=\"inline-block\")),n.overflow&&(h.overflow=\"hidden\",p.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),u=!1,d)u||(y?\"hidden\"in y&&(g=y.hidden):y=Y.access(e,\"fxshow\",{display:l}),o&&(y.hidden=!g),g&&le([e],!0),p.done(function(){for(r in g||le([e]),Y.remove(e,\"fxshow\"),d)S.style(e,r,d[r])})),u=ct(g?y[r]:0,r,p),r in y||(y[r]=u.start,g&&(u.end=u.start,u.start=0))}],prefilter:function(e,t){t?ft.prefilters.unshift(e):ft.prefilters.push(e)}}),S.speed=function(e,t,n){var r=e&&\"object\"==typeof e?S.extend({},e):{complete:n||!n&&t||m(e)&&e,duration:e,easing:n&&t||t&&!m(t)&&t};return S.fx.off?r.duration=0:\"number\"!=typeof r.duration&&(r.duration in S.fx.speeds?r.duration=S.fx.speeds[r.duration]:r.duration=S.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue=\"fx\"),r.old=r.complete,r.complete=function(){m(r.old)&&r.old.call(this),r.queue&&S.dequeue(this,r.queue)},r},S.fn.extend({fadeTo:function(e,t,n,r){return this.filter(ae).css(\"opacity\",0).show().end().animate({opacity:t},e,n,r)},animate:function(t,e,n,r){var i=S.isEmptyObject(t),o=S.speed(e,n,r),a=function(){var e=ft(this,S.extend({},t),o);(i||Y.get(this,\"finish\"))&&e.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(i,e,o){var a=function(e){var t=e.stop;delete e.stop,t(o)};return\"string\"!=typeof i&&(o=e,e=i,i=void 0),e&&this.queue(i||\"fx\",[]),this.each(function(){var e=!0,t=null!=i&&i+\"queueHooks\",n=S.timers,r=Y.get(this);if(t)r[t]&&r[t].stop&&a(r[t]);else for(t in r)r[t]&&r[t].stop&&at.test(t)&&a(r[t]);for(t=n.length;t--;)n[t].elem!==this||null!=i&&n[t].queue!==i||(n[t].anim.stop(o),e=!1,n.splice(t,1));!e&&o||S.dequeue(this,i)})},finish:function(a){return!1!==a&&(a=a||\"fx\"),this.each(function(){var e,t=Y.get(this),n=t[a+\"queue\"],r=t[a+\"queueHooks\"],i=S.timers,o=n?n.length:0;for(t.finish=!0,S.queue(this,a,[]),r&&r.stop&&r.stop.call(this,!0),e=i.length;e--;)i[e].elem===this&&i[e].queue===a&&(i[e].anim.stop(!0),i.splice(e,1));for(e=0;e<o;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete t.finish})}}),S.each([\"toggle\",\"show\",\"hide\"],function(e,r){var i=S.fn[r];S.fn[r]=function(e,t,n){return null==e||\"boolean\"==typeof e?i.apply(this,arguments):this.animate(lt(r,!0),e,t,n)}}),S.each({slideDown:lt(\"show\"),slideUp:lt(\"hide\"),slideToggle:lt(\"toggle\"),fadeIn:{opacity:\"show\"},fadeOut:{opacity:\"hide\"},fadeToggle:{opacity:\"toggle\"}},function(e,r){S.fn[e]=function(e,t,n){return this.animate(r,e,t,n)}}),S.timers=[],S.fx.tick=function(){var e,t=0,n=S.timers;for(tt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||S.fx.stop(),tt=void 0},S.fx.timer=function(e){S.timers.push(e),S.fx.start()},S.fx.interval=13,S.fx.start=function(){nt||(nt=!0,st())},S.fx.stop=function(){nt=null},S.fx.speeds={slow:600,fast:200,_default:400},S.fn.delay=function(r,e){return r=S.fx&&S.fx.speeds[r]||r,e=e||\"fx\",this.queue(e,function(e,t){var n=C.setTimeout(e,r);t.stop=function(){C.clearTimeout(n)}})},rt=E.createElement(\"input\"),it=E.createElement(\"select\").appendChild(E.createElement(\"option\")),rt.type=\"checkbox\",v.checkOn=\"\"!==rt.value,v.optSelected=it.selected,(rt=E.createElement(\"input\")).value=\"t\",rt.type=\"radio\",v.radioValue=\"t\"===rt.value;var pt,dt=S.expr.attrHandle;S.fn.extend({attr:function(e,t){return B(this,S.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){S.removeAttr(this,e)})}}),S.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return\"undefined\"==typeof e.getAttribute?S.prop(e,t,n):(1===o&&S.isXMLDoc(e)||(i=S.attrHooks[t.toLowerCase()]||(S.expr.match.bool.test(t)?pt:void 0)),void 0!==n?null===n?void S.removeAttr(e,t):i&&\"set\"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+\"\"),n):i&&\"get\"in i&&null!==(r=i.get(e,t))?r:null==(r=S.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!v.radioValue&&\"radio\"===t&&A(e,\"input\")){var n=e.value;return e.setAttribute(\"type\",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(P);if(i&&1===e.nodeType)while(n=i[r++])e.removeAttribute(n)}}),pt={set:function(e,t,n){return!1===t?S.removeAttr(e,n):e.setAttribute(n,n),n}},S.each(S.expr.match.bool.source.match(/\\w+/g),function(e,t){var a=dt[t]||S.find.attr;dt[t]=function(e,t,n){var r,i,o=t.toLowerCase();return n||(i=dt[o],dt[o]=r,r=null!=a(e,t,n)?o:null,dt[o]=i),r}});var ht=/^(?:input|select|textarea|button)$/i,gt=/^(?:a|area)$/i;function yt(e){return(e.match(P)||[]).join(\" \")}function vt(e){return e.getAttribute&&e.getAttribute(\"class\")||\"\"}function mt(e){return Array.isArray(e)?e:\"string\"==typeof e&&e.match(P)||[]}S.fn.extend({prop:function(e,t){return B(this,S.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[S.propFix[e]||e]})}}),S.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&S.isXMLDoc(e)||(t=S.propFix[t]||t,i=S.propHooks[t]),void 0!==n?i&&\"set\"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&\"get\"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=S.find.attr(e,\"tabindex\");return t?parseInt(t,10):ht.test(e.nodeName)||gt.test(e.nodeName)&&e.href?0:-1}}},propFix:{\"for\":\"htmlFor\",\"class\":\"className\"}}),v.optSelected||(S.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),S.each([\"tabIndex\",\"readOnly\",\"maxLength\",\"cellSpacing\",\"cellPadding\",\"rowSpan\",\"colSpan\",\"useMap\",\"frameBorder\",\"contentEditable\"],function(){S.propFix[this.toLowerCase()]=this}),S.fn.extend({addClass:function(t){var e,n,r,i,o,a;return m(t)?this.each(function(e){S(this).addClass(t.call(this,e,vt(this)))}):(e=mt(t)).length?this.each(function(){if(r=vt(this),n=1===this.nodeType&&\" \"+yt(r)+\" \"){for(o=0;o<e.length;o++)i=e[o],n.indexOf(\" \"+i+\" \")<0&&(n+=i+\" \");a=yt(n),r!==a&&this.setAttribute(\"class\",a)}}):this},removeClass:function(t){var e,n,r,i,o,a;return m(t)?this.each(function(e){S(this).removeClass(t.call(this,e,vt(this)))}):arguments.length?(e=mt(t)).length?this.each(function(){if(r=vt(this),n=1===this.nodeType&&\" \"+yt(r)+\" \"){for(o=0;o<e.length;o++){i=e[o];while(-1<n.indexOf(\" \"+i+\" \"))n=n.replace(\" \"+i+\" \",\" \")}a=yt(n),r!==a&&this.setAttribute(\"class\",a)}}):this:this.attr(\"class\",\"\")},toggleClass:function(t,n){var e,r,i,o,a=typeof t,s=\"string\"===a||Array.isArray(t);return m(t)?this.each(function(e){S(this).toggleClass(t.call(this,e,vt(this),n),n)}):\"boolean\"==typeof n&&s?n?this.addClass(t):this.removeClass(t):(e=mt(t),this.each(function(){if(s)for(o=S(this),i=0;i<e.length;i++)r=e[i],o.hasClass(r)?o.removeClass(r):o.addClass(r);else void 0!==t&&\"boolean\"!==a||((r=vt(this))&&Y.set(this,\"__className__\",r),this.setAttribute&&this.setAttribute(\"class\",r||!1===t?\"\":Y.get(this,\"__className__\")||\"\"))}))},hasClass:function(e){var t,n,r=0;t=\" \"+e+\" \";while(n=this[r++])if(1===n.nodeType&&-1<(\" \"+yt(vt(n))+\" \").indexOf(t))return!0;return!1}});var xt=/\\r/g;S.fn.extend({val:function(n){var r,e,i,t=this[0];return arguments.length?(i=m(n),this.each(function(e){var t;1===this.nodeType&&(null==(t=i?n.call(this,e,S(this).val()):n)?t=\"\":\"number\"==typeof t?t+=\"\":Array.isArray(t)&&(t=S.map(t,function(e){return null==e?\"\":e+\"\"})),(r=S.valHooks[this.type]||S.valHooks[this.nodeName.toLowerCase()])&&\"set\"in r&&void 0!==r.set(this,t,\"value\")||(this.value=t))})):t?(r=S.valHooks[t.type]||S.valHooks[t.nodeName.toLowerCase()])&&\"get\"in r&&void 0!==(e=r.get(t,\"value\"))?e:\"string\"==typeof(e=t.value)?e.replace(xt,\"\"):null==e?\"\":e:void 0}}),S.extend({valHooks:{option:{get:function(e){var t=S.find.attr(e,\"value\");return null!=t?t:yt(S.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,a=\"select-one\"===e.type,s=a?null:[],u=a?o+1:i.length;for(r=o<0?u:a?o:0;r<u;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!A(n.parentNode,\"optgroup\"))){if(t=S(n).val(),a)return t;s.push(t)}return s},set:function(e,t){var n,r,i=e.options,o=S.makeArray(t),a=i.length;while(a--)((r=i[a]).selected=-1<S.inArray(S.valHooks.option.get(r),o))&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),S.each([\"radio\",\"checkbox\"],function(){S.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<S.inArray(S(e).val(),t)}},v.checkOn||(S.valHooks[this].get=function(e){return null===e.getAttribute(\"value\")?\"on\":e.value})}),v.focusin=\"onfocusin\"in C;var bt=/^(?:focusinfocus|focusoutblur)$/,wt=function(e){e.stopPropagation()};S.extend(S.event,{trigger:function(e,t,n,r){var i,o,a,s,u,l,c,f,p=[n||E],d=y.call(e,\"type\")?e.type:e,h=y.call(e,\"namespace\")?e.namespace.split(\".\"):[];if(o=f=a=n=n||E,3!==n.nodeType&&8!==n.nodeType&&!bt.test(d+S.event.triggered)&&(-1<d.indexOf(\".\")&&(d=(h=d.split(\".\")).shift(),h.sort()),u=d.indexOf(\":\")<0&&\"on\"+d,(e=e[S.expando]?e:new S.Event(d,\"object\"==typeof e&&e)).isTrigger=r?2:3,e.namespace=h.join(\".\"),e.rnamespace=e.namespace?new RegExp(\"(^|\\\\.)\"+h.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:S.makeArray(t,[e]),c=S.event.special[d]||{},r||!c.trigger||!1!==c.trigger.apply(n,t))){if(!r&&!c.noBubble&&!x(n)){for(s=c.delegateType||d,bt.test(s+d)||(o=o.parentNode);o;o=o.parentNode)p.push(o),a=o;a===(n.ownerDocument||E)&&p.push(a.defaultView||a.parentWindow||C)}i=0;while((o=p[i++])&&!e.isPropagationStopped())f=o,e.type=1<i?s:c.bindType||d,(l=(Y.get(o,\"events\")||Object.create(null))[e.type]&&Y.get(o,\"handle\"))&&l.apply(o,t),(l=u&&o[u])&&l.apply&&V(o)&&(e.result=l.apply(o,t),!1===e.result&&e.preventDefault());return e.type=d,r||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(p.pop(),t)||!V(n)||u&&m(n[d])&&!x(n)&&((a=n[u])&&(n[u]=null),S.event.triggered=d,e.isPropagationStopped()&&f.addEventListener(d,wt),n[d](),e.isPropagationStopped()&&f.removeEventListener(d,wt),S.event.triggered=void 0,a&&(n[u]=a)),e.result}},simulate:function(e,t,n){var r=S.extend(new S.Event,n,{type:e,isSimulated:!0});S.event.trigger(r,null,t)}}),S.fn.extend({trigger:function(e,t){return this.each(function(){S.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return S.event.trigger(e,t,n,!0)}}),v.focusin||S.each({focus:\"focusin\",blur:\"focusout\"},function(n,r){var i=function(e){S.event.simulate(r,e.target,S.event.fix(e))};S.event.special[r]={setup:function(){var e=this.ownerDocument||this.document||this,t=Y.access(e,r);t||e.addEventListener(n,i,!0),Y.access(e,r,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this.document||this,t=Y.access(e,r)-1;t?Y.access(e,r,t):(e.removeEventListener(n,i,!0),Y.remove(e,r))}}});var Tt=C.location,Ct={guid:Date.now()},Et=/\\?/;S.parseXML=function(e){var t,n;if(!e||\"string\"!=typeof e)return null;try{t=(new C.DOMParser).parseFromString(e,\"text/xml\")}catch(e){}return n=t&&t.getElementsByTagName(\"parsererror\")[0],t&&!n||S.error(\"Invalid XML: \"+(n?S.map(n.childNodes,function(e){return e.textContent}).join(\"\\n\"):e)),t};var St=/\\[\\]$/,kt=/\\r?\\n/g,At=/^(?:submit|button|image|reset|file)$/i,Nt=/^(?:input|select|textarea|keygen)/i;function jt(n,e,r,i){var t;if(Array.isArray(e))S.each(e,function(e,t){r||St.test(n)?i(n,t):jt(n+\"[\"+(\"object\"==typeof t&&null!=t?e:\"\")+\"]\",t,r,i)});else if(r||\"object\"!==w(e))i(n,e);else for(t in e)jt(n+\"[\"+t+\"]\",e[t],r,i)}S.param=function(e,t){var n,r=[],i=function(e,t){var n=m(t)?t():t;r[r.length]=encodeURIComponent(e)+\"=\"+encodeURIComponent(null==n?\"\":n)};if(null==e)return\"\";if(Array.isArray(e)||e.jquery&&!S.isPlainObject(e))S.each(e,function(){i(this.name,this.value)});else for(n in e)jt(n,e[n],t,i);return r.join(\"&\")},S.fn.extend({serialize:function(){return S.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=S.prop(this,\"elements\");return e?S.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!S(this).is(\":disabled\")&&Nt.test(this.nodeName)&&!At.test(e)&&(this.checked||!pe.test(e))}).map(function(e,t){var n=S(this).val();return null==n?null:Array.isArray(n)?S.map(n,function(e){return{name:t.name,value:e.replace(kt,\"\\r\\n\")}}):{name:t.name,value:n.replace(kt,\"\\r\\n\")}}).get()}});var Dt=/%20/g,qt=/#.*$/,Lt=/([?&])_=[^&]*/,Ht=/^(.*?):[ \\t]*([^\\r\\n]*)$/gm,Ot=/^(?:GET|HEAD)$/,Pt=/^\\/\\//,Rt={},Mt={},It=\"*/\".concat(\"*\"),Wt=E.createElement(\"a\");function Ft(o){return function(e,t){\"string\"!=typeof e&&(t=e,e=\"*\");var n,r=0,i=e.toLowerCase().match(P)||[];if(m(t))while(n=i[r++])\"+\"===n[0]?(n=n.slice(1)||\"*\",(o[n]=o[n]||[]).unshift(t)):(o[n]=o[n]||[]).push(t)}}function $t(t,i,o,a){var s={},u=t===Mt;function l(e){var r;return s[e]=!0,S.each(t[e]||[],function(e,t){var n=t(i,o,a);return\"string\"!=typeof n||u||s[n]?u?!(r=n):void 0:(i.dataTypes.unshift(n),l(n),!1)}),r}return l(i.dataTypes[0])||!s[\"*\"]&&l(\"*\")}function Bt(e,t){var n,r,i=S.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&S.extend(!0,e,r),e}Wt.href=Tt.href,S.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Tt.href,type:\"GET\",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Tt.protocol),global:!0,processData:!0,async:!0,contentType:\"application/x-www-form-urlencoded; charset=UTF-8\",accepts:{\"*\":It,text:\"text/plain\",html:\"text/html\",xml:\"application/xml, text/xml\",json:\"application/json, text/javascript\"},contents:{xml:/\\bxml\\b/,html:/\\bhtml/,json:/\\bjson\\b/},responseFields:{xml:\"responseXML\",text:\"responseText\",json:\"responseJSON\"},converters:{\"* text\":String,\"text html\":!0,\"text json\":JSON.parse,\"text xml\":S.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Bt(Bt(e,S.ajaxSettings),t):Bt(S.ajaxSettings,e)},ajaxPrefilter:Ft(Rt),ajaxTransport:Ft(Mt),ajax:function(e,t){\"object\"==typeof e&&(t=e,e=void 0),t=t||{};var c,f,p,n,d,r,h,g,i,o,y=S.ajaxSetup({},t),v=y.context||y,m=y.context&&(v.nodeType||v.jquery)?S(v):S.event,x=S.Deferred(),b=S.Callbacks(\"once memory\"),w=y.statusCode||{},a={},s={},u=\"canceled\",T={readyState:0,getResponseHeader:function(e){var t;if(h){if(!n){n={};while(t=Ht.exec(p))n[t[1].toLowerCase()+\" \"]=(n[t[1].toLowerCase()+\" \"]||[]).concat(t[2])}t=n[e.toLowerCase()+\" \"]}return null==t?null:t.join(\", \")},getAllResponseHeaders:function(){return h?p:null},setRequestHeader:function(e,t){return null==h&&(e=s[e.toLowerCase()]=s[e.toLowerCase()]||e,a[e]=t),this},overrideMimeType:function(e){return null==h&&(y.mimeType=e),this},statusCode:function(e){var t;if(e)if(h)T.always(e[T.status]);else for(t in e)w[t]=[w[t],e[t]];return this},abort:function(e){var t=e||u;return c&&c.abort(t),l(0,t),this}};if(x.promise(T),y.url=((e||y.url||Tt.href)+\"\").replace(Pt,Tt.protocol+\"//\"),y.type=t.method||t.type||y.method||y.type,y.dataTypes=(y.dataType||\"*\").toLowerCase().match(P)||[\"\"],null==y.crossDomain){r=E.createElement(\"a\");try{r.href=y.url,r.href=r.href,y.crossDomain=Wt.protocol+\"//\"+Wt.host!=r.protocol+\"//\"+r.host}catch(e){y.crossDomain=!0}}if(y.data&&y.processData&&\"string\"!=typeof y.data&&(y.data=S.param(y.data,y.traditional)),$t(Rt,y,t,T),h)return T;for(i in(g=S.event&&y.global)&&0==S.active++&&S.event.trigger(\"ajaxStart\"),y.type=y.type.toUpperCase(),y.hasContent=!Ot.test(y.type),f=y.url.replace(qt,\"\"),y.hasContent?y.data&&y.processData&&0===(y.contentType||\"\").indexOf(\"application/x-www-form-urlencoded\")&&(y.data=y.data.replace(Dt,\"+\")):(o=y.url.slice(f.length),y.data&&(y.processData||\"string\"==typeof y.data)&&(f+=(Et.test(f)?\"&\":\"?\")+y.data,delete y.data),!1===y.cache&&(f=f.replace(Lt,\"$1\"),o=(Et.test(f)?\"&\":\"?\")+\"_=\"+Ct.guid+++o),y.url=f+o),y.ifModified&&(S.lastModified[f]&&T.setRequestHeader(\"If-Modified-Since\",S.lastModified[f]),S.etag[f]&&T.setRequestHeader(\"If-None-Match\",S.etag[f])),(y.data&&y.hasContent&&!1!==y.contentType||t.contentType)&&T.setRequestHeader(\"Content-Type\",y.contentType),T.setRequestHeader(\"Accept\",y.dataTypes[0]&&y.accepts[y.dataTypes[0]]?y.accepts[y.dataTypes[0]]+(\"*\"!==y.dataTypes[0]?\", \"+It+\"; q=0.01\":\"\"):y.accepts[\"*\"]),y.headers)T.setRequestHeader(i,y.headers[i]);if(y.beforeSend&&(!1===y.beforeSend.call(v,T,y)||h))return T.abort();if(u=\"abort\",b.add(y.complete),T.done(y.success),T.fail(y.error),c=$t(Mt,y,t,T)){if(T.readyState=1,g&&m.trigger(\"ajaxSend\",[T,y]),h)return T;y.async&&0<y.timeout&&(d=C.setTimeout(function(){T.abort(\"timeout\")},y.timeout));try{h=!1,c.send(a,l)}catch(e){if(h)throw e;l(-1,e)}}else l(-1,\"No Transport\");function l(e,t,n,r){var i,o,a,s,u,l=t;h||(h=!0,d&&C.clearTimeout(d),c=void 0,p=r||\"\",T.readyState=0<e?4:0,i=200<=e&&e<300||304===e,n&&(s=function(e,t,n){var r,i,o,a,s=e.contents,u=e.dataTypes;while(\"*\"===u[0])u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader(\"Content-Type\"));if(r)for(i in s)if(s[i]&&s[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||e.converters[i+\" \"+u[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==u[0]&&u.unshift(o),n[o]}(y,T,n)),!i&&-1<S.inArray(\"script\",y.dataTypes)&&S.inArray(\"json\",y.dataTypes)<0&&(y.converters[\"text script\"]=function(){}),s=function(e,t,n,r){var i,o,a,s,u,l={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)l[a.toLowerCase()]=e.converters[a];o=c.shift();while(o)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=c.shift())if(\"*\"===o)o=u;else if(\"*\"!==u&&u!==o){if(!(a=l[u+\" \"+o]||l[\"* \"+o]))for(i in l)if((s=i.split(\" \"))[1]===o&&(a=l[u+\" \"+s[0]]||l[\"* \"+s[0]])){!0===a?a=l[i]:!0!==l[i]&&(o=s[0],c.unshift(s[1]));break}if(!0!==a)if(a&&e[\"throws\"])t=a(t);else try{t=a(t)}catch(e){return{state:\"parsererror\",error:a?e:\"No conversion from \"+u+\" to \"+o}}}return{state:\"success\",data:t}}(y,s,T,i),i?(y.ifModified&&((u=T.getResponseHeader(\"Last-Modified\"))&&(S.lastModified[f]=u),(u=T.getResponseHeader(\"etag\"))&&(S.etag[f]=u)),204===e||\"HEAD\"===y.type?l=\"nocontent\":304===e?l=\"notmodified\":(l=s.state,o=s.data,i=!(a=s.error))):(a=l,!e&&l||(l=\"error\",e<0&&(e=0))),T.status=e,T.statusText=(t||l)+\"\",i?x.resolveWith(v,[o,l,T]):x.rejectWith(v,[T,l,a]),T.statusCode(w),w=void 0,g&&m.trigger(i?\"ajaxSuccess\":\"ajaxError\",[T,y,i?o:a]),b.fireWith(v,[T,l]),g&&(m.trigger(\"ajaxComplete\",[T,y]),--S.active||S.event.trigger(\"ajaxStop\")))}return T},getJSON:function(e,t,n){return S.get(e,t,n,\"json\")},getScript:function(e,t){return S.get(e,void 0,t,\"script\")}}),S.each([\"get\",\"post\"],function(e,i){S[i]=function(e,t,n,r){return m(t)&&(r=r||n,n=t,t=void 0),S.ajax(S.extend({url:e,type:i,dataType:r,data:t,success:n},S.isPlainObject(e)&&e))}}),S.ajaxPrefilter(function(e){var t;for(t in e.headers)\"content-type\"===t.toLowerCase()&&(e.contentType=e.headers[t]||\"\")}),S._evalUrl=function(e,t,n){return S.ajax({url:e,type:\"GET\",dataType:\"script\",cache:!0,async:!1,global:!1,converters:{\"text script\":function(){}},dataFilter:function(e){S.globalEval(e,t,n)}})},S.fn.extend({wrapAll:function(e){var t;return this[0]&&(m(e)&&(e=e.call(this[0])),t=S(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){var e=this;while(e.firstElementChild)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(n){return m(n)?this.each(function(e){S(this).wrapInner(n.call(this,e))}):this.each(function(){var e=S(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=m(t);return this.each(function(e){S(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not(\"body\").each(function(){S(this).replaceWith(this.childNodes)}),this}}),S.expr.pseudos.hidden=function(e){return!S.expr.pseudos.visible(e)},S.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},S.ajaxSettings.xhr=function(){try{return new C.XMLHttpRequest}catch(e){}};var _t={0:200,1223:204},zt=S.ajaxSettings.xhr();v.cors=!!zt&&\"withCredentials\"in zt,v.ajax=zt=!!zt,S.ajaxTransport(function(i){var o,a;if(v.cors||zt&&!i.crossDomain)return{send:function(e,t){var n,r=i.xhr();if(r.open(i.type,i.url,i.async,i.username,i.password),i.xhrFields)for(n in i.xhrFields)r[n]=i.xhrFields[n];for(n in i.mimeType&&r.overrideMimeType&&r.overrideMimeType(i.mimeType),i.crossDomain||e[\"X-Requested-With\"]||(e[\"X-Requested-With\"]=\"XMLHttpRequest\"),e)r.setRequestHeader(n,e[n]);o=function(e){return function(){o&&(o=a=r.onload=r.onerror=r.onabort=r.ontimeout=r.onreadystatechange=null,\"abort\"===e?r.abort():\"error\"===e?\"number\"!=typeof r.status?t(0,\"error\"):t(r.status,r.statusText):t(_t[r.status]||r.status,r.statusText,\"text\"!==(r.responseType||\"text\")||\"string\"!=typeof r.responseText?{binary:r.response}:{text:r.responseText},r.getAllResponseHeaders()))}},r.onload=o(),a=r.onerror=r.ontimeout=o(\"error\"),void 0!==r.onabort?r.onabort=a:r.onreadystatechange=function(){4===r.readyState&&C.setTimeout(function(){o&&a()})},o=o(\"abort\");try{r.send(i.hasContent&&i.data||null)}catch(e){if(o)throw e}},abort:function(){o&&o()}}}),S.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),S.ajaxSetup({accepts:{script:\"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript\"},contents:{script:/\\b(?:java|ecma)script\\b/},converters:{\"text script\":function(e){return S.globalEval(e),e}}}),S.ajaxPrefilter(\"script\",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type=\"GET\")}),S.ajaxTransport(\"script\",function(n){var r,i;if(n.crossDomain||n.scriptAttrs)return{send:function(e,t){r=S(\"<script>\").attr(n.scriptAttrs||{}).prop({charset:n.scriptCharset,src:n.url}).on(\"load error\",i=function(e){r.remove(),i=null,e&&t(\"error\"===e.type?404:200,e.type)}),E.head.appendChild(r[0])},abort:function(){i&&i()}}});var Ut,Xt=[],Vt=/(=)\\?(?=&|$)|\\?\\?/;S.ajaxSetup({jsonp:\"callback\",jsonpCallback:function(){var e=Xt.pop()||S.expando+\"_\"+Ct.guid++;return this[e]=!0,e}}),S.ajaxPrefilter(\"json jsonp\",function(e,t,n){var r,i,o,a=!1!==e.jsonp&&(Vt.test(e.url)?\"url\":\"string\"==typeof e.data&&0===(e.contentType||\"\").indexOf(\"application/x-www-form-urlencoded\")&&Vt.test(e.data)&&\"data\");if(a||\"jsonp\"===e.dataTypes[0])return r=e.jsonpCallback=m(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Vt,\"$1\"+r):!1!==e.jsonp&&(e.url+=(Et.test(e.url)?\"&\":\"?\")+e.jsonp+\"=\"+r),e.converters[\"script json\"]=function(){return o||S.error(r+\" was not called\"),o[0]},e.dataTypes[0]=\"json\",i=C[r],C[r]=function(){o=arguments},n.always(function(){void 0===i?S(C).removeProp(r):C[r]=i,e[r]&&(e.jsonpCallback=t.jsonpCallback,Xt.push(r)),o&&m(i)&&i(o[0]),o=i=void 0}),\"script\"}),v.createHTMLDocument=((Ut=E.implementation.createHTMLDocument(\"\").body).innerHTML=\"<form></form><form></form>\",2===Ut.childNodes.length),S.parseHTML=function(e,t,n){return\"string\"!=typeof e?[]:(\"boolean\"==typeof t&&(n=t,t=!1),t||(v.createHTMLDocument?((r=(t=E.implementation.createHTMLDocument(\"\")).createElement(\"base\")).href=E.location.href,t.head.appendChild(r)):t=E),o=!n&&[],(i=N.exec(e))?[t.createElement(i[1])]:(i=xe([e],t,o),o&&o.length&&S(o).remove(),S.merge([],i.childNodes)));var r,i,o},S.fn.load=function(e,t,n){var r,i,o,a=this,s=e.indexOf(\" \");return-1<s&&(r=yt(e.slice(s)),e=e.slice(0,s)),m(t)?(n=t,t=void 0):t&&\"object\"==typeof t&&(i=\"POST\"),0<a.length&&S.ajax({url:e,type:i||\"GET\",dataType:\"html\",data:t}).done(function(e){o=arguments,a.html(r?S(\"<div>\").append(S.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},S.expr.pseudos.animated=function(t){return S.grep(S.timers,function(e){return t===e.elem}).length},S.offset={setOffset:function(e,t,n){var r,i,o,a,s,u,l=S.css(e,\"position\"),c=S(e),f={};\"static\"===l&&(e.style.position=\"relative\"),s=c.offset(),o=S.css(e,\"top\"),u=S.css(e,\"left\"),(\"absolute\"===l||\"fixed\"===l)&&-1<(o+u).indexOf(\"auto\")?(a=(r=c.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),m(t)&&(t=t.call(e,n,S.extend({},s))),null!=t.top&&(f.top=t.top-s.top+a),null!=t.left&&(f.left=t.left-s.left+i),\"using\"in t?t.using.call(e,f):c.css(f)}},S.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){S.offset.setOffset(this,t,e)});var e,n,r=this[0];return r?r.getClientRects().length?(e=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if(\"fixed\"===S.css(r,\"position\"))t=r.getBoundingClientRect();else{t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;while(e&&(e===n.body||e===n.documentElement)&&\"static\"===S.css(e,\"position\"))e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=S(e).offset()).top+=S.css(e,\"borderTopWidth\",!0),i.left+=S.css(e,\"borderLeftWidth\",!0))}return{top:t.top-i.top-S.css(r,\"marginTop\",!0),left:t.left-i.left-S.css(r,\"marginLeft\",!0)}}},offsetParent:function(){return this.map(function(){var e=this.offsetParent;while(e&&\"static\"===S.css(e,\"position\"))e=e.offsetParent;return e||re})}}),S.each({scrollLeft:\"pageXOffset\",scrollTop:\"pageYOffset\"},function(t,i){var o=\"pageYOffset\"===i;S.fn[t]=function(e){return B(this,function(e,t,n){var r;if(x(e)?r=e:9===e.nodeType&&(r=e.defaultView),void 0===n)return r?r[i]:e[t];r?r.scrollTo(o?r.pageXOffset:n,o?n:r.pageYOffset):e[t]=n},t,e,arguments.length)}}),S.each([\"top\",\"left\"],function(e,n){S.cssHooks[n]=_e(v.pixelPosition,function(e,t){if(t)return t=Be(e,n),Pe.test(t)?S(e).position()[n]+\"px\":t})}),S.each({Height:\"height\",Width:\"width\"},function(a,s){S.each({padding:\"inner\"+a,content:s,\"\":\"outer\"+a},function(r,o){S.fn[o]=function(e,t){var n=arguments.length&&(r||\"boolean\"!=typeof e),i=r||(!0===e||!0===t?\"margin\":\"border\");return B(this,function(e,t,n){var r;return x(e)?0===o.indexOf(\"outer\")?e[\"inner\"+a]:e.document.documentElement[\"client\"+a]:9===e.nodeType?(r=e.documentElement,Math.max(e.body[\"scroll\"+a],r[\"scroll\"+a],e.body[\"offset\"+a],r[\"offset\"+a],r[\"client\"+a])):void 0===n?S.css(e,t,i):S.style(e,t,n,i)},s,n?e:void 0,n)}})}),S.each([\"ajaxStart\",\"ajaxStop\",\"ajaxComplete\",\"ajaxError\",\"ajaxSuccess\",\"ajaxSend\"],function(e,t){S.fn[t]=function(e){return this.on(t,e)}}),S.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,\"**\"):this.off(t,e||\"**\",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),S.each(\"blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu\".split(\" \"),function(e,n){S.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}});var Gt=/^[\\s\\uFEFF\\xA0]+|([^\\s\\uFEFF\\xA0])[\\s\\uFEFF\\xA0]+$/g;S.proxy=function(e,t){var n,r,i;if(\"string\"==typeof t&&(n=e[t],t=e,e=n),m(e))return r=s.call(arguments,2),(i=function(){return e.apply(t||this,r.concat(s.call(arguments)))}).guid=e.guid=e.guid||S.guid++,i},S.holdReady=function(e){e?S.readyWait++:S.ready(!0)},S.isArray=Array.isArray,S.parseJSON=JSON.parse,S.nodeName=A,S.isFunction=m,S.isWindow=x,S.camelCase=X,S.type=w,S.now=Date.now,S.isNumeric=function(e){var t=S.type(e);return(\"number\"===t||\"string\"===t)&&!isNaN(e-parseFloat(e))},S.trim=function(e){return null==e?\"\":(e+\"\").replace(Gt,\"$1\")}, true&&!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function(){return S}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));var Yt=C.jQuery,Qt=C.$;return S.noConflict=function(e){return C.$===S&&(C.$=Qt),e&&C.jQuery===S&&(C.jQuery=Yt),S},\"undefined\"==typeof e&&(C.jQuery=C.$=S),S});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/jquery/dist/jquery.min.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/js/frontend.js");
/******/ 	
/******/ })()
;